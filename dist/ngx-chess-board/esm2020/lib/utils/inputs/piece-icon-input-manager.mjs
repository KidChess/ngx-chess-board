import { Bishop } from '../../models/pieces/bishop';
import { Color } from '../../models/pieces/color';
import { King } from '../../models/pieces/king';
import { Knight } from '../../models/pieces/knight';
import { Pawn } from '../../models/pieces/pawn';
import { Queen } from '../../models/pieces/queen';
import { Rook } from '../../models/pieces/rook';
import { Coin } from '../../models/pieces/coin';
export class PieceIconInputManager {
    constructor() {
        this._defaultIcons = false;
    }
    get pieceIconInput() {
        return this._pieceIconInput;
    }
    set pieceIconInput(value) {
        this._pieceIconInput = value;
    }
    get defaultIcons() {
        return this._defaultIcons;
    }
    set defaultIcons(value) {
        this._defaultIcons = value;
    }
    isDefaultIcons() {
        return (this.pieceIconInput === undefined || this.pieceIconInput === null);
    }
    getPieceIcon(piece) {
        let isWhite = piece.color === Color.WHITE;
        switch (piece.constructor) {
            case Coin:
                return isWhite
                    ? this.pieceIconInput.whiteCoinUrl
                    : this.pieceIconInput.blackCoinUrl;
            case King:
                return isWhite
                    ? this.pieceIconInput.whiteKingUrl
                    : this.pieceIconInput.blackKingUrl;
            case Queen:
                return isWhite
                    ? this.pieceIconInput.whiteQueenUrl
                    : this.pieceIconInput.blackQueenUrl;
            case Rook:
                return isWhite
                    ? this.pieceIconInput.whiteRookUrl
                    : this.pieceIconInput.blackRookUrl;
            case Bishop:
                return isWhite
                    ? this.pieceIconInput.whiteBishopUrl
                    : this.pieceIconInput.blackBishopUrl;
            case Knight:
                return isWhite
                    ? this.pieceIconInput.whiteKnightUrl
                    : this.pieceIconInput.blackKnightUrl;
            case Pawn:
                return isWhite
                    ? this.pieceIconInput.whitePawnUrl
                    : this.pieceIconInput.blackPawnUrl;
        }
    }
    loadDefaultData() {
        this.pieceIconInput = {
            blackCoinUrl: '',
            blackBishopUrl: '',
            blackKingUrl: '',
            blackKnightUrl: '',
            blackQueenUrl: '',
            blackRookUrl: '',
            whiteCoinUrl: '',
            whiteBishopUrl: '',
            whiteKingUrl: '',
            whiteKnightUrl: '',
            whitePawnUrl: '',
            whiteQueenUrl: '',
            whiteRookUrl: '',
            blackPawnUrl: 'a',
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllY2UtaWNvbi1pbnB1dC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWNoZXNzLWJvYXJkL3NyYy9saWIvdXRpbHMvaW5wdXRzL3BpZWNlLWljb24taW5wdXQtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR2hELE1BQU0sT0FBTyxxQkFBcUI7SUFBbEM7UUFDWSxrQkFBYSxHQUFZLEtBQUssQ0FBQztJQTZFM0MsQ0FBQztJQTFFRyxJQUFJLGNBQWM7UUFDZCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksY0FBYyxDQUFDLEtBQXFCO1FBQ3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksWUFBWSxDQUFDLEtBQWM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUVELGNBQWM7UUFDVixPQUFPLENBQ0gsSUFBSSxDQUFDLGNBQWMsS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQ3BFLENBQUM7SUFDTixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQVk7UUFDckIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzFDLFFBQVEsS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUN2QixLQUFLLElBQUk7Z0JBQ0wsT0FBTyxPQUFPO29CQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVk7b0JBQ2xDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQztZQUMzQyxLQUFLLElBQUk7Z0JBQ0wsT0FBTyxPQUFPO29CQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVk7b0JBQ2xDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQztZQUMzQyxLQUFLLEtBQUs7Z0JBQ04sT0FBTyxPQUFPO29CQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWE7b0JBQ25DLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQztZQUM1QyxLQUFLLElBQUk7Z0JBQ0wsT0FBTyxPQUFPO29CQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVk7b0JBQ2xDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQztZQUMzQyxLQUFLLE1BQU07Z0JBQ1AsT0FBTyxPQUFPO29CQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWM7b0JBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQztZQUM3QyxLQUFLLE1BQU07Z0JBQ1AsT0FBTyxPQUFPO29CQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWM7b0JBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQztZQUM3QyxLQUFLLElBQUk7Z0JBQ0wsT0FBTyxPQUFPO29CQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVk7b0JBQ2xDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQztTQUM5QztJQUNMLENBQUM7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLGNBQWMsR0FBRztZQUNsQixZQUFZLEVBQUUsRUFBRTtZQUNoQixjQUFjLEVBQUUsRUFBRTtZQUNsQixZQUFZLEVBQUUsRUFBRTtZQUNoQixjQUFjLEVBQUUsRUFBRTtZQUNsQixhQUFhLEVBQUUsRUFBRTtZQUNqQixZQUFZLEVBQUUsRUFBRTtZQUNoQixZQUFZLEVBQUUsRUFBRTtZQUNoQixjQUFjLEVBQUUsRUFBRTtZQUNsQixZQUFZLEVBQUUsRUFBRTtZQUNoQixjQUFjLEVBQUUsRUFBRTtZQUNsQixZQUFZLEVBQUUsRUFBRTtZQUNoQixhQUFhLEVBQUUsRUFBRTtZQUNqQixZQUFZLEVBQUUsRUFBRTtZQUNoQixZQUFZLEVBQUUsR0FBRztTQUNwQixDQUFDO0lBQ04sQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlzaG9wIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9iaXNob3AnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL2NvbG9yJztcbmltcG9ydCB7IEtpbmcgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL2tpbmcnO1xuaW1wb3J0IHsgS25pZ2h0IH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9rbmlnaHQnO1xuaW1wb3J0IHsgUGF3biB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcGF3bic7XG5pbXBvcnQgeyBQaWVjZSB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcGllY2UnO1xuaW1wb3J0IHsgUXVlZW4gfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3F1ZWVuJztcbmltcG9ydCB7IFJvb2sgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3Jvb2snO1xuaW1wb3J0IHsgQ29pbiB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvY29pbic7XG5pbXBvcnQgeyBQaWVjZUljb25JbnB1dCB9IGZyb20gJy4vcGllY2UtaWNvbi1pbnB1dCc7XG5cbmV4cG9ydCBjbGFzcyBQaWVjZUljb25JbnB1dE1hbmFnZXIge1xuICAgIHByaXZhdGUgX2RlZmF1bHRJY29uczogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3BpZWNlSWNvbklucHV0OiBQaWVjZUljb25JbnB1dDtcblxuICAgIGdldCBwaWVjZUljb25JbnB1dCgpOiBQaWVjZUljb25JbnB1dCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9waWVjZUljb25JbnB1dDtcbiAgICB9XG5cbiAgICBzZXQgcGllY2VJY29uSW5wdXQodmFsdWU6IFBpZWNlSWNvbklucHV0KSB7XG4gICAgICAgIHRoaXMuX3BpZWNlSWNvbklucHV0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGRlZmF1bHRJY29ucygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRJY29ucztcbiAgICB9XG5cbiAgICBzZXQgZGVmYXVsdEljb25zKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRJY29ucyA9IHZhbHVlO1xuICAgIH1cblxuICAgIGlzRGVmYXVsdEljb25zKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5waWVjZUljb25JbnB1dCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMucGllY2VJY29uSW5wdXQgPT09IG51bGxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRQaWVjZUljb24ocGllY2U6IFBpZWNlKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGlzV2hpdGUgPSBwaWVjZS5jb2xvciA9PT0gQ29sb3IuV0hJVEU7XG4gICAgICAgIHN3aXRjaCAocGllY2UuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgQ29pbjpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNXaGl0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucGllY2VJY29uSW5wdXQud2hpdGVDb2luVXJsXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5waWVjZUljb25JbnB1dC5ibGFja0NvaW5Vcmw7XG4gICAgICAgICAgICBjYXNlIEtpbmc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzV2hpdGVcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnBpZWNlSWNvbklucHV0LndoaXRlS2luZ1VybFxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMucGllY2VJY29uSW5wdXQuYmxhY2tLaW5nVXJsO1xuICAgICAgICAgICAgY2FzZSBRdWVlbjpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNXaGl0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucGllY2VJY29uSW5wdXQud2hpdGVRdWVlblVybFxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMucGllY2VJY29uSW5wdXQuYmxhY2tRdWVlblVybDtcbiAgICAgICAgICAgIGNhc2UgUm9vazpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNXaGl0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucGllY2VJY29uSW5wdXQud2hpdGVSb29rVXJsXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5waWVjZUljb25JbnB1dC5ibGFja1Jvb2tVcmw7XG4gICAgICAgICAgICBjYXNlIEJpc2hvcDpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNXaGl0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucGllY2VJY29uSW5wdXQud2hpdGVCaXNob3BVcmxcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnBpZWNlSWNvbklucHV0LmJsYWNrQmlzaG9wVXJsO1xuICAgICAgICAgICAgY2FzZSBLbmlnaHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzV2hpdGVcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnBpZWNlSWNvbklucHV0LndoaXRlS25pZ2h0VXJsXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5waWVjZUljb25JbnB1dC5ibGFja0tuaWdodFVybDtcbiAgICAgICAgICAgIGNhc2UgUGF3bjpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNXaGl0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucGllY2VJY29uSW5wdXQud2hpdGVQYXduVXJsXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5waWVjZUljb25JbnB1dC5ibGFja1Bhd25Vcmw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkRGVmYXVsdERhdGEoKSB7XG4gICAgICAgIHRoaXMucGllY2VJY29uSW5wdXQgPSB7XG4gICAgICAgICAgICBibGFja0NvaW5Vcmw6ICcnLFxuICAgICAgICAgICAgYmxhY2tCaXNob3BVcmw6ICcnLFxuICAgICAgICAgICAgYmxhY2tLaW5nVXJsOiAnJyxcbiAgICAgICAgICAgIGJsYWNrS25pZ2h0VXJsOiAnJyxcbiAgICAgICAgICAgIGJsYWNrUXVlZW5Vcmw6ICcnLFxuICAgICAgICAgICAgYmxhY2tSb29rVXJsOiAnJyxcbiAgICAgICAgICAgIHdoaXRlQ29pblVybDogJycsXG4gICAgICAgICAgICB3aGl0ZUJpc2hvcFVybDogJycsXG4gICAgICAgICAgICB3aGl0ZUtpbmdVcmw6ICcnLFxuICAgICAgICAgICAgd2hpdGVLbmlnaHRVcmw6ICcnLFxuICAgICAgICAgICAgd2hpdGVQYXduVXJsOiAnJyxcbiAgICAgICAgICAgIHdoaXRlUXVlZW5Vcmw6ICcnLFxuICAgICAgICAgICAgd2hpdGVSb29rVXJsOiAnJyxcbiAgICAgICAgICAgIGJsYWNrUGF3blVybDogJ2EnLFxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==