import { Bishop } from '../../models/pieces/bishop';
import { Color } from '../../models/pieces/color';
import { King } from '../../models/pieces/king';
import { Knight } from '../../models/pieces/knight';
import { Pawn } from '../../models/pieces/pawn';
import { Point } from '../../models/pieces/point';
import { Queen } from '../../models/pieces/queen';
import { Rook } from '../../models/pieces/rook';
import { ColorInput, PieceTypeInput } from '../../utils/inputs/piece-type-input';
import { UnicodeConstants } from '../../utils/unicode-constants';
export class PieceFactory {
    static create(indexes, pieceTypeInput, colorInput, board) {
        let piece;
        let color = colorInput === ColorInput.LIGHT
            ? Color.WHITE
            : Color.BLACK;
        switch (pieceTypeInput) {
            case PieceTypeInput.QUEEN:
                piece = new Queen(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, board);
                break;
            case PieceTypeInput.KING:
                piece = new King(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING, board);
                break;
            case PieceTypeInput.KNIGHT:
                piece = new Knight(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, board);
                break;
            case PieceTypeInput.BISHOP:
                piece = new Bishop(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, board);
                break;
            case PieceTypeInput.ROOK:
                piece = new Rook(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, board);
                break;
            case PieceTypeInput.PAWN:
                piece = new Pawn(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN, board);
                break;
        }
        return piece;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllY2UtZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvbGliL2VuZ2luZS91dGlscy9waWVjZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFaEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUNILFVBQVUsRUFDVixjQUFjLEVBQ2pCLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFakUsTUFBTSxPQUFPLFlBQVk7SUFFckIsTUFBTSxDQUFDLE1BQU0sQ0FDVCxPQUF3QixFQUN4QixjQUE4QixFQUM5QixVQUFzQixFQUN0QixLQUFZO1FBRVosSUFBSSxLQUFLLENBQUM7UUFDVixJQUFJLEtBQUssR0FBRyxVQUFVLEtBQUssVUFBVSxDQUFDLEtBQUs7WUFDdkMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLO1lBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFFbEIsUUFBUSxjQUFjLEVBQUU7WUFDcEIsS0FBSyxjQUFjLENBQUMsS0FBSztnQkFDckIsS0FBSyxHQUFHLElBQUksS0FBSyxDQUNiLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUNuRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDcEIsS0FBSyxHQUFHLElBQUksSUFBSSxDQUNaLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUNqRixLQUFLLENBQ1IsQ0FBQztnQkFFRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsTUFBTTtnQkFDdEIsS0FBSyxHQUFHLElBQUksTUFBTSxDQUNkLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUNyRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsTUFBTTtnQkFDdEIsS0FBSyxHQUFHLElBQUksTUFBTSxDQUNkLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUNyRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDcEIsS0FBSyxHQUFHLElBQUksSUFBSSxDQUNaLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUNqRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDcEIsS0FBSyxHQUFHLElBQUksSUFBSSxDQUNaLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUNqRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2FyZCB9IGZyb20gJy4uLy4uL21vZGVscy9ib2FyZCc7XG5pbXBvcnQgeyBNb3ZlVHJhbnNsYXRpb24gfSBmcm9tICcuLi8uLi9tb2RlbHMvbW92ZS10cmFuc2xhdGlvbic7XG5pbXBvcnQgeyBCaXNob3AgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL2Jpc2hvcCc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvY29sb3InO1xuaW1wb3J0IHsgS2luZyB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMva2luZyc7XG5pbXBvcnQgeyBLbmlnaHQgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL2tuaWdodCc7XG5pbXBvcnQgeyBQYXduIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9wYXduJztcbmltcG9ydCB7IFBpZWNlIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9waWVjZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcG9pbnQnO1xuaW1wb3J0IHsgUXVlZW4gfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3F1ZWVuJztcbmltcG9ydCB7IFJvb2sgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3Jvb2snO1xuaW1wb3J0IHtcbiAgICBDb2xvcklucHV0LFxuICAgIFBpZWNlVHlwZUlucHV0XG59IGZyb20gJy4uLy4uL3V0aWxzL2lucHV0cy9waWVjZS10eXBlLWlucHV0JztcbmltcG9ydCB7IFVuaWNvZGVDb25zdGFudHMgfSBmcm9tICcuLi8uLi91dGlscy91bmljb2RlLWNvbnN0YW50cyc7XG5cbmV4cG9ydCBjbGFzcyBQaWVjZUZhY3Rvcnkge1xuXG4gICAgc3RhdGljIGNyZWF0ZShcbiAgICAgICAgaW5kZXhlczogTW92ZVRyYW5zbGF0aW9uLFxuICAgICAgICBwaWVjZVR5cGVJbnB1dDogUGllY2VUeXBlSW5wdXQsXG4gICAgICAgIGNvbG9ySW5wdXQ6IENvbG9ySW5wdXQsXG4gICAgICAgIGJvYXJkOiBCb2FyZFxuICAgICk6IFBpZWNlIHtcbiAgICAgICAgbGV0IHBpZWNlO1xuICAgICAgICBsZXQgY29sb3IgPSBjb2xvcklucHV0ID09PSBDb2xvcklucHV0LkxJR0hUXG4gICAgICAgICAgICA/IENvbG9yLldISVRFXG4gICAgICAgICAgICA6IENvbG9yLkJMQUNLO1xuXG4gICAgICAgIHN3aXRjaCAocGllY2VUeXBlSW5wdXQpIHtcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuUVVFRU46XG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgUXVlZW4oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChpbmRleGVzLnlBeGlzLCBpbmRleGVzLnhBeGlzKSxcbiAgICAgICAgICAgICAgICAgICAgY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID09PSBDb2xvci5XSElURSA/IFVuaWNvZGVDb25zdGFudHMuV0hJVEVfUVVFRU4gOiBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1FVRUVOLFxuICAgICAgICAgICAgICAgICAgICBib2FyZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBpZWNlVHlwZUlucHV0LktJTkc6XG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgS2luZyhcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPT09IENvbG9yLldISVRFID8gVW5pY29kZUNvbnN0YW50cy5XSElURV9LSU5HIDogVW5pY29kZUNvbnN0YW50cy5CTEFDS19LSU5HLFxuICAgICAgICAgICAgICAgICAgICBib2FyZFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuS05JR0hUOlxuICAgICAgICAgICAgICAgIHBpZWNlID0gbmV3IEtuaWdodChcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPT09IENvbG9yLldISVRFID8gVW5pY29kZUNvbnN0YW50cy5XSElURV9LTklHSFQgOiBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX0tOSUdIVCxcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQaWVjZVR5cGVJbnB1dC5CSVNIT1A6XG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgQmlzaG9wKFxuICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnQoaW5kZXhlcy55QXhpcywgaW5kZXhlcy54QXhpcyksXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX0JJU0hPUCA6IFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfQklTSE9QLFxuICAgICAgICAgICAgICAgICAgICBib2FyZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBpZWNlVHlwZUlucHV0LlJPT0s6XG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgUm9vayhcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPT09IENvbG9yLldISVRFID8gVW5pY29kZUNvbnN0YW50cy5XSElURV9ST09LIDogVW5pY29kZUNvbnN0YW50cy5CTEFDS19ST09LLFxuICAgICAgICAgICAgICAgICAgICBib2FyZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBpZWNlVHlwZUlucHV0LlBBV046XG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgUGF3bihcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPT09IENvbG9yLldISVRFID8gVW5pY29kZUNvbnN0YW50cy5XSElURV9QQVdOIDogVW5pY29kZUNvbnN0YW50cy5CTEFDS19QQVdOLFxuICAgICAgICAgICAgICAgICAgICBib2FyZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGllY2U7XG4gICAgfVxufVxuIl19