import { HistoryMoveProvider } from '../history-move-provider/history-move-provider';
import { King } from '../models/pieces/king';
import { Pawn } from '../models/pieces/pawn';
import { Rook } from '../models/pieces/rook';
import { Constants } from '../utils/constants';
import { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';
import { CoordsProvider } from './coords/coords-provider';
import { DragEndStrategy } from './drag/end/drag-end-strategy';
import { DragStartStrategy } from './drag/start/drag-start-strategy';
import { ColorStrategy } from './drawing-tools/colors/color-strategy';
import { DrawProvider } from './drawing-tools/draw-provider';
import { DefaultPgnProcessor } from './pgn/default-pgn-processor';
export class AbstractEngineFacade {
    constructor(board) {
        this.dragStartStrategy = new DragStartStrategy();
        this.dragEndStrategy = new DragEndStrategy();
        this.pgnProcessor = new DefaultPgnProcessor();
        this.colorStrategy = new ColorStrategy();
        this.coords = new CoordsProvider();
        this.heightAndWidth = Constants.DEFAULT_SIZE;
        this.freeMode = false;
        this.drawProvider = new DrawProvider();
        this.pieceIconManager = new PieceIconInputManager();
        this.moveHistoryProvider = new HistoryMoveProvider();
        this.disabling = false;
        this.board = board;
    }
    checkIfPawnFirstMove(piece) {
        if (piece instanceof Pawn) {
            piece.isMovedAlready = true;
        }
    }
    checkIfRookMoved(piece) {
        if (piece instanceof Rook) {
            piece.isMovedAlready = true;
        }
    }
    checkIfKingMoved(piece) {
        if (piece instanceof King) {
            piece.isMovedAlready = true;
        }
    }
    getMoveHistory() {
        return this.moveHistoryProvider.getAll();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZW5naW5lLWZhY2FkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvbGliL2VuZ2luZS9hYnN0cmFjdC1lbmdpbmUtZmFjYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBRXJGLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHN0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUdqRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDN0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHbEUsTUFBTSxPQUFnQixvQkFBb0I7SUF3QnRDLFlBQXNCLEtBQVk7UUF2QjNCLHNCQUFpQixHQUFzQixJQUFJLGlCQUFpQixFQUFFLENBQUM7UUFDL0Qsb0JBQWUsR0FBb0IsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUN6RCxpQkFBWSxHQUF5QixJQUFJLG1CQUFtQixFQUFFLENBQUM7UUFDNUQsa0JBQWEsR0FBa0IsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUV0RCxXQUFNLEdBQW1CLElBQUksY0FBYyxFQUFFLENBQUM7UUFDOUMsbUJBQWMsR0FBVyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBRWhELGFBQVEsR0FBRyxLQUFLLENBQUM7UUFRakIsaUJBQVksR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNoRCxxQkFBZ0IsR0FDbkIsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQ3pCLHdCQUFtQixHQUF3QixJQUFJLG1CQUFtQixFQUFFLENBQUM7UUFFckUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUdyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBNEJNLG9CQUFvQixDQUFDLEtBQVk7UUFDcEMsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEtBQVk7UUFDaEMsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEtBQVk7UUFDaEMsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVNLGNBQWM7UUFDakIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDN0MsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGllY2VQcm9tb3Rpb25Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4uL3BpZWNlLXByb21vdGlvbi9waWVjZS1wcm9tb3Rpb24tbW9kYWwvcGllY2UtcHJvbW90aW9uLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIaXN0b3J5TW92ZSB9IGZyb20gJy4uL2hpc3RvcnktbW92ZS1wcm92aWRlci9oaXN0b3J5LW1vdmUnO1xuaW1wb3J0IHsgSGlzdG9yeU1vdmVQcm92aWRlciB9IGZyb20gJy4uL2hpc3RvcnktbW92ZS1wcm92aWRlci9oaXN0b3J5LW1vdmUtcHJvdmlkZXInO1xuaW1wb3J0IHsgQm9hcmQgfSBmcm9tICcuLi9tb2RlbHMvYm9hcmQnO1xuaW1wb3J0IHsgS2luZyB9IGZyb20gJy4uL21vZGVscy9waWVjZXMva2luZyc7XG5pbXBvcnQgeyBQYXduIH0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9wYXduJztcbmltcG9ydCB7IFBpZWNlIH0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9waWVjZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uL21vZGVscy9waWVjZXMvcG9pbnQnO1xuaW1wb3J0IHsgUm9vayB9IGZyb20gJy4uL21vZGVscy9waWVjZXMvcm9vayc7XG5pbXBvcnQgeyBDb2luIH0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9jb2luJztcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBQaWVjZUljb25JbnB1dE1hbmFnZXIgfSBmcm9tICcuLi91dGlscy9pbnB1dHMvcGllY2UtaWNvbi1pbnB1dC1tYW5hZ2VyJztcbmltcG9ydCB7IENvbG9ySW5wdXQsIFBpZWNlVHlwZUlucHV0IH0gZnJvbSAnLi4vdXRpbHMvaW5wdXRzL3BpZWNlLXR5cGUtaW5wdXQnO1xuaW1wb3J0IHsgQm9hcmRMb2FkZXIgfSBmcm9tICcuL2JvYXJkLXN0YXRlLXByb3ZpZGVyL2JvYXJkLWxvYWRlci9ib2FyZC1sb2FkZXInO1xuaW1wb3J0IHsgQ29vcmRzUHJvdmlkZXIgfSBmcm9tICcuL2Nvb3Jkcy9jb29yZHMtcHJvdmlkZXInO1xuaW1wb3J0IHsgRHJhZ0VuZFN0cmF0ZWd5IH0gZnJvbSAnLi9kcmFnL2VuZC9kcmFnLWVuZC1zdHJhdGVneSc7XG5pbXBvcnQgeyBEcmFnU3RhcnRTdHJhdGVneSB9IGZyb20gJy4vZHJhZy9zdGFydC9kcmFnLXN0YXJ0LXN0cmF0ZWd5JztcbmltcG9ydCB7IENvbG9yU3RyYXRlZ3kgfSBmcm9tICcuL2RyYXdpbmctdG9vbHMvY29sb3JzL2NvbG9yLXN0cmF0ZWd5JztcbmltcG9ydCB7IERyYXdQcm92aWRlciB9IGZyb20gJy4vZHJhd2luZy10b29scy9kcmF3LXByb3ZpZGVyJztcbmltcG9ydCB7IERlZmF1bHRQZ25Qcm9jZXNzb3IgfSBmcm9tICcuL3Bnbi9kZWZhdWx0LXBnbi1wcm9jZXNzb3InO1xuaW1wb3J0IHsgQWJzdHJhY3RQZ25Qcm9jZXNzb3IgfSBmcm9tICcuL3Bnbi9hYnN0cmFjdC1wZ24tcHJvY2Vzc29yJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RW5naW5lRmFjYWRlIHtcbiAgICBwdWJsaWMgZHJhZ1N0YXJ0U3RyYXRlZ3k6IERyYWdTdGFydFN0cmF0ZWd5ID0gbmV3IERyYWdTdGFydFN0cmF0ZWd5KCk7XG4gICAgcHVibGljIGRyYWdFbmRTdHJhdGVneTogRHJhZ0VuZFN0cmF0ZWd5ID0gbmV3IERyYWdFbmRTdHJhdGVneSgpO1xuICAgIHB1YmxpYyBwZ25Qcm9jZXNzb3I6IEFic3RyYWN0UGduUHJvY2Vzc29yID0gbmV3IERlZmF1bHRQZ25Qcm9jZXNzb3IoKTtcbiAgICBwcm90ZWN0ZWQgY29sb3JTdHJhdGVneTogQ29sb3JTdHJhdGVneSA9IG5ldyBDb2xvclN0cmF0ZWd5KCk7XG5cbiAgICBwdWJsaWMgY29vcmRzOiBDb29yZHNQcm92aWRlciA9IG5ldyBDb29yZHNQcm92aWRlcigpO1xuICAgIHB1YmxpYyBoZWlnaHRBbmRXaWR0aDogbnVtYmVyID0gQ29uc3RhbnRzLkRFRkFVTFRfU0laRTtcblxuICAgIHB1YmxpYyBmcmVlTW9kZSA9IGZhbHNlO1xuICAgIHB1YmxpYyBkcmFnRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGRyYXdEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgbGlnaHREaXNhYmxlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgZGFya0Rpc2FibGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBib2FyZDogQm9hcmQ7XG4gICAgcHVibGljIG1vZGFsOiBQaWVjZVByb21vdGlvbk1vZGFsQ29tcG9uZW50O1xuICAgIHB1YmxpYyBib2FyZExvYWRlcjogQm9hcmRMb2FkZXI7XG4gICAgcHVibGljIGRyYXdQcm92aWRlcjogRHJhd1Byb3ZpZGVyID0gbmV3IERyYXdQcm92aWRlcigpO1xuICAgIHB1YmxpYyBwaWVjZUljb25NYW5hZ2VyOiBQaWVjZUljb25JbnB1dE1hbmFnZXIgPVxuICAgICAgICBuZXcgUGllY2VJY29uSW5wdXRNYW5hZ2VyKCk7XG4gICAgcHVibGljIG1vdmVIaXN0b3J5UHJvdmlkZXI6IEhpc3RvcnlNb3ZlUHJvdmlkZXIgPSBuZXcgSGlzdG9yeU1vdmVQcm92aWRlcigpO1xuICAgIHB1YmxpYyBtb3ZlRG9uZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZGlzYWJsaW5nID0gZmFsc2U7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoYm9hcmQ6IEJvYXJkKSB7XG4gICAgICAgIHRoaXMuYm9hcmQgPSBib2FyZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVzZXQoKTogdm9pZDtcblxuICAgIHB1YmxpYyBhYnN0cmFjdCB1bmRvKCk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgbW92ZShjb29yZHM6IHN0cmluZyk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgYWRkUGllY2UoXG4gICAgICAgIHBpZWNlVHlwZUlucHV0OiBQaWVjZVR5cGVJbnB1dCxcbiAgICAgICAgY29sb3JJbnB1dDogQ29sb3JJbnB1dCxcbiAgICAgICAgY29vcmRzOiBzdHJpbmcsXG4gICAgKTogdm9pZDtcblxuICAgIHB1YmxpYyBhYnN0cmFjdCBvbk1vdXNlVXAoXG4gICAgICAgIGV2ZW50OiBNb3VzZUV2ZW50LFxuICAgICAgICBwb2ludENsaWNrZWQ6IFBvaW50LFxuICAgICAgICBsZWZ0OiBudW1iZXIsXG4gICAgICAgIHRvcDogbnVtYmVyLFxuICAgICk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3Qgb25Nb3VzZURvd24oXG4gICAgICAgIGV2ZW50OiBNb3VzZUV2ZW50LFxuICAgICAgICBwb2ludENsaWNrZWQ6IFBvaW50LFxuICAgICAgICBsZWZ0PzogbnVtYmVyLFxuICAgICAgICB0b3A/OiBudW1iZXIsXG4gICAgKTogdm9pZDtcblxuICAgIHB1YmxpYyBjaGVja0lmUGF3bkZpcnN0TW92ZShwaWVjZTogUGllY2UpIHtcbiAgICAgICAgaWYgKHBpZWNlIGluc3RhbmNlb2YgUGF3bikge1xuICAgICAgICAgICAgcGllY2UuaXNNb3ZlZEFscmVhZHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNoZWNrSWZSb29rTW92ZWQocGllY2U6IFBpZWNlKSB7XG4gICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIFJvb2spIHtcbiAgICAgICAgICAgIHBpZWNlLmlzTW92ZWRBbHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjaGVja0lmS2luZ01vdmVkKHBpZWNlOiBQaWVjZSkge1xuICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBLaW5nKSB7XG4gICAgICAgICAgICBwaWVjZS5pc01vdmVkQWxyZWFkeSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TW92ZUhpc3RvcnkoKTogSGlzdG9yeU1vdmVbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdmVIaXN0b3J5UHJvdmlkZXIuZ2V0QWxsKCk7XG4gICAgfVxufVxuIl19