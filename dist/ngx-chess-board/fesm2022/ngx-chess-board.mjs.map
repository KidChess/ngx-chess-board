{"version":3,"file":"ngx-chess-board.mjs","sources":["../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/color.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/piece.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/point.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/rook.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/king.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/bishop.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/knight.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/pawn.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/queen.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/coin.ts","../../../projects/ngx-chess-board/src/lib/utils/unicode-constants.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/fen-loader/default-fen-processor.ts","../../../projects/ngx-chess-board/src/lib/models/move-translation.ts","../../../projects/ngx-chess-board/src/lib/utils/move-utils.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/default-pieces-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/pgn-loader/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/notation-processor-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-point.ts","../../../projects/ngx-chess-board/src/lib/engine/click/click-utils.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move-provider.ts","../../../projects/ngx-chess-board/src/lib/utils/constants.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-icon-input-manager.ts","../../../projects/ngx-chess-board/src/lib/engine/coords/coords-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/animation-drag-end-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/drag-end-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/animation-drag-start-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/drag-start-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/default-color-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/color-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/abstract-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/abstract-engine-facade.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/board-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/arrow.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/circle.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/piece-abstract-decorator.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/available-move-decorator.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-resolver.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-type-input.ts","../../../projects/ngx-chess-board/src/lib/engine/utils/piece-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/engine-facade.ts","../../../projects/ngx-chess-board/src/lib/models/board.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.html","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.ts","../../../projects/ngx-chess-board/src/lib/service/ngx-chess-board.service.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.ts","../../../projects/ngx-chess-board/src/public-api.ts","../../../projects/ngx-chess-board/src/ngx-chess-board.ts"],"sourcesContent":["export class HistoryMove {\n    move: string;\n    piece: string;\n    color: string;\n    x: boolean;\n    check: boolean;\n    stalemate: boolean;\n    mate: boolean;\n\n    constructor(move: string, piece: string, color: string, captured: boolean) {\n        this.move = move;\n        this.piece = piece;\n        this.color = color;\n        this.x = captured;\n    }\n\n    setGameStates(check: boolean, stalemate: boolean, mate: boolean): void {\n        this.check = check;\n        this.stalemate = stalemate;\n        this.mate = mate;\n    }\n\n}\n","export enum Color {\n    WHITE,\n    BLACK,\n}\n","import { AbstractPiece } from '../../engine/piece-decorator/abstract-piece';\nimport { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Point } from './point';\n\nexport abstract class Piece implements AbstractPiece {\n    point: Point;\n    color: Color;\n    constant: PieceConstant;\n    checkPoints: Point[] = [];\n    relValue: number;\n    board: Board;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        relValue: number,\n        board: Board\n    ) {\n        this.color = color;\n        this.constant = constant;\n        this.point = point;\n        this.relValue = relValue;\n        this.board = board;\n    }\n\n    abstract getPossibleMoves(): Point[];\n\n    abstract getPossibleCaptures(): Point[];\n\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\n}\n","export class Point {\n    row: number;\n    col: number;\n\n    constructor(row: number, col: number) {\n        this.row = row;\n        this.col = col;\n    }\n\n    isEqual(that: Point) {\n        return that && this.row === that.row && this.col === that.col;\n    }\n\n    hasCoordsEqual(row: number, col: number) {\n        return row && col && this.row === row && this.col === col;\n    }\n\n    isInRange(): boolean {\n        return this.row >= 0 && this.row <= 7 && this.col >= 0 && this.col <= 7;\n    }\n\n    clone() {\n        return new Point(this.row, this.col);\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { King } from './king';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Rook extends Piece {\n    isMovedAlready = false;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 5, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                break;\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    col,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, col));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, col)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    col,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, col));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, col)) {\n                    break;\n                }\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(row, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(row, j)) {\n                    break;\n                }\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                if (!(this.board.getPieceByField instanceof King)) {\n                    possiblePoints.push(new Point(i, col));\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                if (!(this.board.getPieceByField instanceof King)) {\n                    possiblePoints.push(new Point(i, col));\n                    break;\n                }\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                if (!(this.board.getPieceByField instanceof King)) {\n                    possiblePoints.push(new Point(row, j));\n                    break;\n                }\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                if (!(this.board.getPieceByField instanceof King)) {\n                    possiblePoints.push(new Point(row, j));\n                    break;\n                }\n            }\n        }\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Piece } from './piece';\nimport { Point } from './point';\nimport { Rook } from './rook';\n\nexport class King extends Piece {\n    castledAlready = false;\n    shortCastled = false;\n    longCastled = false;\n    isMovedAlready;\n    isCastling = false;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 0, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n        // lewo\n        if (\n            this.board.isFieldEmpty(row, col - 1) &&\n            !this.board.isFieldUnderAttack(\n                row,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row, col - 1));\n        }\n\n        // prawo\n        if (\n            this.board.isFieldEmpty(row, col + 1) &&\n            !this.board.isFieldUnderAttack(\n                row,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row, col + 1));\n        }\n\n        // dol\n        if (\n            this.board.isFieldEmpty(row + 1, col) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col));\n        }\n\n        // gora\n        if (\n            this.board.isFieldEmpty(row - 1, col) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col));\n        }\n\n        // lewo gora\n        if (\n            this.board.isFieldEmpty(row - 1, col - 1) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col - 1));\n        }\n        // prawo gora\n        if (\n            this.board.isFieldEmpty(row - 1, col + 1) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col + 1));\n        }\n\n        // lewo dol\n        if (\n            this.board.isFieldEmpty(row + 1, col - 1) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col - 1));\n        }\n        // prawo dol\n        if (\n            this.board.isFieldEmpty(row + 1, col + 1) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col + 1));\n        }\n\n        if (!this.isMovedAlready) {\n            let longCastlePossible = true;\n            for (let i = col - 1; i > 0; --i) {\n                if (\n                    !this.board.isFieldEmpty(row, i) ||\n                    this.board.isFieldUnderAttack(\n                        row,\n                        i,\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                    )\n                ) {\n                    longCastlePossible = false;\n                    break;\n                }\n            }\n\n            if (longCastlePossible && !this.board.isKingInCheck(\n                this.color,\n                this.board.pieces\n            ) && this.board.getPieceByField(row, 0)) {\n                const leftRook = this.board.getPieceByField(row, 0);\n                if (leftRook instanceof Rook) {\n                    if (!leftRook.isMovedAlready) {\n                        possiblePoints.push(new Point(row, col - 2));\n                    }\n                }\n            }\n\n            let shortCastlePossible = true;\n            for (let i = col + 1; i < 7; ++i) {\n                if (\n                    !this.board.isFieldEmpty(row, i) ||\n                    this.board.isFieldUnderAttack(\n                        row,\n                        i,\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                    )\n                ) {\n                    shortCastlePossible = false;\n                    break;\n                }\n            }\n\n            if (shortCastlePossible && !this.board.isKingInCheck(\n                this.color,\n                this.board.pieces\n            ) && this.board.getPieceByField(row, 7)) {\n                const rightRook = this.board.getPieceByField(row, 7);\n                if (rightRook instanceof Rook) {\n                    if (!rightRook.isMovedAlready) {\n                        possiblePoints.push(new Point(row, col + 2));\n                    }\n                }\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // lewo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row, col - 1));\n        }\n\n        // prawo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row, col + 1));\n        }\n\n        // dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col));\n        }\n\n        // gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col));\n        }\n\n        // lewo gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col - 1));\n        }\n        // prawo gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col + 1));\n        }\n\n        // lewo dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col - 1));\n        }\n        // prawo dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col + 1));\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // lewo\n        possiblePoints.push(new Point(row, col - 1));\n\n        // prawo\n        possiblePoints.push(new Point(row, col + 1));\n\n        // dol\n        possiblePoints.push(new Point(row + 1, col));\n\n        // gora\n        possiblePoints.push(new Point(row - 1, col));\n\n        // lewo gora\n        possiblePoints.push(new Point(row - 1, col - 1));\n\n        // prawo gora\n        possiblePoints.push(new Point(row - 1, col + 1));\n\n        // lewo dol\n        possiblePoints.push(new Point(row + 1, col - 1));\n\n        // prawo dol\n        possiblePoints.push(new Point(row + 1, col + 1));\n\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { King } from './king';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Bishop extends Piece {\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 3, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures() {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Knight extends Piece {\n    isMovedAlready = false;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 3, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // gora -> lewo\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\n            possiblePoints.push(new Point(row - 2, col - 1));\n        }\n\n        // gora -> prawo\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\n            possiblePoints.push(new Point(row - 2, col + 1));\n        }\n\n        // lewo -> gora\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\n            possiblePoints.push(new Point(row - 1, col - 2));\n        }\n\n        // prawo -> gora\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\n            possiblePoints.push(new Point(row - 1, col + 2));\n        }\n\n        // lewo -> dol\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\n            possiblePoints.push(new Point(row + 1, col - 2));\n        }\n\n        // prawo -> dol\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\n            possiblePoints.push(new Point(row + 1, col + 2));\n        }\n\n        // dol -> lewo\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\n            possiblePoints.push(new Point(row + 2, col - 1));\n        }\n\n        // dol -> prawo\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\n            possiblePoints.push(new Point(row + 2, col + 1));\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // gora -> lewo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 2,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 2, col - 1));\n        }\n\n        // gora -> prawo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 2,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 2, col + 1));\n        }\n\n        // lewo -> gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col - 2,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col - 2));\n        }\n\n        // prawo -> gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col + 2,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col + 2));\n        }\n\n        // lewo -> dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col - 2,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col - 2));\n        }\n\n        // prawo -> dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col + 2,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col + 2));\n        }\n\n        // dol -> lewo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 2,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 2, col - 1));\n        }\n\n        // dol -> prawo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 2,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 2, col + 1));\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // gora -> lewo\n        possiblePoints.push(new Point(row - 2, col - 1));\n\n        // gora -> prawo\n        possiblePoints.push(new Point(row - 2, col + 1));\n\n        // lewo -> gora\n        possiblePoints.push(new Point(row - 1, col - 2));\n\n        // prawo -> gora\n        possiblePoints.push(new Point(row - 1, col + 2));\n\n        // lewo -> dol\n        possiblePoints.push(new Point(row + 1, col - 2));\n\n        // prawo -> dol\n        possiblePoints.push(new Point(row + 1, col + 2));\n\n        // dol -> lewo\n        possiblePoints.push(new Point(row + 2, col - 1));\n\n        // dol -> prawo\n        possiblePoints.push(new Point(row + 2, col + 1));\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Pawn extends Piece {\n    isMovedAlready = false;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 1, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n        const row = this.point.row;\n        const col = this.point.col;\n        if (\n            (!this.board.reverted && this.color === Color.WHITE) ||\n            (this.board.reverted && this.color === Color.BLACK)\n        ) {\n            if (this.board.isFieldEmpty(row - 1, col)) {\n                possiblePoints.push(new Point(row - 1, col));\n\n                if (\n                    !this.isMovedAlready &&\n                    this.board.isFieldEmpty(row - 2, col)\n                ) {\n                    possiblePoints.push(new Point(row - 2, col));\n                }\n            }\n        } else {\n            if (\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\n                    row + 1,\n                    col\n                )\n            ) {\n                possiblePoints.push(new Point(row + 1, col));\n\n                if (\n                    !this.isMovedAlready &&\n                    this.board.isFieldEmpty(row + 2, col)\n                ) {\n                    possiblePoints.push(new Point(row + 2, col));\n                }\n            }\n        }\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n        const row = this.point.row;\n        const col = this.point.col;\n\n        if (\n            (!this.board.reverted && this.color === Color.WHITE) ||\n            (this.board.reverted && this.color === Color.BLACK)\n        ) {\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row - 1,\n                    col - 1,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row - 1, col - 1));\n            }\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row - 1,\n                    col + 1,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row - 1, col + 1));\n            }\n        } else {\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row + 1,\n                    col - 1,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row + 1, col - 1));\n            }\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row + 1,\n                    col + 1,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row + 1, col + 1));\n            }\n        }\n\n        if (\n            this.board.enPassantPoint &&\n            this.board.enPassantPiece.color ===\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\n        ) {\n            if (\n                row === this.board.enPassantPiece.point.row &&\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\n            ) {\n                possiblePoints.push(this.board.enPassantPoint);\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n        const row = this.point.row;\n        const col = this.point.col;\n\n        if (\n            (!this.board.reverted && this.color === Color.WHITE) ||\n            (this.board.reverted && this.color === Color.BLACK)\n        ) {\n            possiblePoints.push(new Point(row - 1, col - 1));\n\n            possiblePoints.push(new Point(row - 1, col + 1));\n        } else {\n            possiblePoints.push(new Point(row + 1, col - 1));\n\n            possiblePoints.push(new Point(row + 1, col + 1));\n        }\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { King } from './king';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Queen extends Piece {\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 9, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                break;\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    col,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, col));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, col)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    col,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, col));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, col)) {\n                    break;\n                }\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(row, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(row, j)) {\n                    break;\n                }\n            }\n        }\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\n                    possiblePoints.push(new Point(i, col));\n                }\n                break;\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\n                    possiblePoints.push(new Point(i, col));\n                }\n                break;\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\n                    possiblePoints.push(new Point(row, j));\n                }\n                break;\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\n                    possiblePoints.push(new Point(row, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Coin extends Piece {\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board,\n    ) {\n        super(point, color, constant, 1, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n        return possiblePoints;\n    }\n}\n","export interface PieceConstant {\n    name: string;\n    icon: string;\n}\n\nexport const UnicodeConstants = {\n    WHITE_COIN: { name: 'Coin', icon: '&#x1F4B0;' },\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\n\n    BLACK_COIN: { name: 'Coin', icon: '&#x1F4B0' },\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\n};\n","import { Board } from '../../../../../models/board';\nimport { Bishop } from '../../../../../models/pieces/bishop';\nimport { Color } from '../../../../../models/pieces/color';\nimport { King } from '../../../../../models/pieces/king';\nimport { Knight } from '../../../../../models/pieces/knight';\nimport { Pawn } from '../../../../../models/pieces/pawn';\nimport { Point } from '../../../../../models/pieces/point';\nimport { Queen } from '../../../../../models/pieces/queen';\nimport { Rook } from '../../../../../models/pieces/rook';\nimport { Coin } from '../../../../../models/pieces/coin';\nimport { UnicodeConstants } from '../../../../../utils/unicode-constants';\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\nimport { NotationProcessor } from '../notation-processor';\n\nexport class DefaultFenProcessor implements NotationProcessor {\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\n        let fen = notation;\n        if (notation) {\n            engineFacade.board.reverted = false;\n            engineFacade.board.pieces = [];\n            const split = fen.split('/');\n            for (let i = 0; i < 8; ++i) {\n                let pointer = 0;\n                for (let j = 0; j < split[i].split(' ')[0].length; ++j) {\n                    const chunk = split[i].charAt(j);\n                    if (chunk.match(/[0-9]/)) {\n                        pointer += Number(chunk);\n                    } else {\n                        switch (chunk) {\n                            case 'c':\n                                engineFacade.board.pieces.push(\n                                    new Coin(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_COIN,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'r':\n                                engineFacade.board.pieces.push(\n                                    new Rook(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_ROOK,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'n':\n                                engineFacade.board.pieces.push(\n                                    new Knight(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_KNIGHT,\n                                        engineFacade.board,\n                                    ),\n                                );\n\n                                break;\n                            case 'b':\n                                engineFacade.board.pieces.push(\n                                    new Bishop(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_BISHOP,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'q':\n                                engineFacade.board.pieces.push(\n                                    new Queen(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_QUEEN,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'k':\n                                engineFacade.board.pieces.push(\n                                    new King(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_KING,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'p': {\n                                const pawn = new Pawn(\n                                    new Point(i, pointer),\n                                    Color.BLACK,\n                                    UnicodeConstants.BLACK_PAWN,\n                                    engineFacade.board,\n                                );\n                                if (\n                                    (pawn.color === Color.BLACK &&\n                                        pawn.point.row !== 1) ||\n                                    (pawn.color === Color.WHITE &&\n                                        pawn.point.row !== 6)\n                                ) {\n                                    pawn.isMovedAlready = true;\n                                }\n                                engineFacade.board.pieces.push(pawn);\n                                break;\n                            }\n                            case 'R':\n                                engineFacade.board.pieces.push(\n                                    new Rook(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_ROOK,\n                                        engineFacade.board,\n                                    ),\n                                );\n\n                                break;\n                            case 'N':\n                                engineFacade.board.pieces.push(\n                                    new Knight(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_KNIGHT,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n\n                            case 'B':\n                                engineFacade.board.pieces.push(\n                                    new Bishop(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_BISHOP,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n\n                            case 'Q':\n                                engineFacade.board.pieces.push(\n                                    new Queen(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_QUEEN,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n\n                            case 'K':\n                                engineFacade.board.pieces.push(\n                                    new King(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_KING,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n\n                            case 'P': {\n                                const pawn = new Pawn(\n                                    new Point(i, pointer),\n                                    Color.WHITE,\n                                    UnicodeConstants.WHITE_PAWN,\n                                    engineFacade.board,\n                                );\n                                if (\n                                    (pawn.color === Color.BLACK &&\n                                        pawn.point.row !== 1) ||\n                                    (pawn.color === Color.WHITE &&\n                                        pawn.point.row !== 6)\n                                ) {\n                                    pawn.isMovedAlready = true;\n                                }\n                                engineFacade.board.pieces.push(pawn);\n                                break;\n                            }\n                        }\n                        ++pointer;\n                    }\n                }\n            }\n\n            this.setCurrentPlayer(engineFacade.board, fen);\n            this.setCastles(engineFacade.board, fen);\n            this.setEnPassant(fen);\n            this.setFullMoveCount(fen);\n            engineFacade.board.fen = fen;\n        } else {\n            throw Error('Incorrect FEN provided');\n        }\n    }\n\n    private setCurrentPlayer(board: Board, fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            board.currentWhitePlayer = split[1] === 'w';\n        }\n    }\n\n    private setCastles(board: Board, fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            const castleChunk = split[2];\n\n            if (!castleChunk.includes('K')) {\n                this.setRookAlreadyMoved(board, Color.WHITE, 7);\n            }\n\n            if (!castleChunk.includes('Q')) {\n                this.setRookAlreadyMoved(board, Color.WHITE, 0);\n            }\n\n            if (!castleChunk.includes('k')) {\n                this.setRookAlreadyMoved(board, Color.BLACK, 7);\n            }\n\n            if (!castleChunk.includes('q')) {\n                this.setRookAlreadyMoved(board, Color.BLACK, 0);\n            }\n        }\n    }\n\n    private setFullMoveCount(fen: string) {}\n\n    private setEnPassant(fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            const enPassantPoint = split[3];\n\n            if (enPassantPoint === '-') {\n                return;\n            }\n\n            // if()\n        }\n    }\n\n    private setRookAlreadyMoved(board: Board, color: Color, col: number) {\n        const rook = board.pieces.find(\n            (piece) =>\n                piece.color === color &&\n                piece instanceof Rook &&\n                piece.point.col === col,\n        ) as Rook;\n\n        if (rook) {\n            rook.isMovedAlready = true;\n        }\n    }\n}\n","export class MoveTranslation {\n    private _xAxis: number;\n    private _yAxis: number;\n    private _reverted: boolean;\n\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\n        this._xAxis = xAxis;\n        this._yAxis = yAxis;\n        this._reverted = reverted;\n    }\n\n    get xAxis(): number {\n        return this._xAxis;\n    }\n\n    set xAxis(value: number) {\n        this._xAxis = value;\n    }\n\n    get yAxis(): number {\n        return this._yAxis;\n    }\n\n    set yAxis(value: number) {\n        this._yAxis = value;\n    }\n\n    get reverted(): boolean {\n        return this._reverted;\n    }\n\n    set reverted(value: boolean) {\n        this._reverted = value;\n    }\n}\n","import { Board } from '../models/board';\nimport { Bishop } from '../models/pieces/bishop';\nimport { Color } from '../models/pieces/color';\nimport { King } from '../models/pieces/king';\nimport { Knight } from '../models/pieces/knight';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { MoveTranslation } from '../models/move-translation';\nimport { Queen } from '../models/pieces/queen';\nimport { Rook } from '../models/pieces/rook';\n\nexport class MoveUtils {\n    public static willMoveCauseCheck(\n        currentColor: Color,\n        row: number,\n        col: number,\n        destRow: number,\n        destCol: number,\n        board: Board\n    ) {\n        const srcPiece = board.getPieceByField(row, col);\n        const destPiece = board.getPieceByField(destRow, destCol);\n\n        if (srcPiece) {\n            srcPiece.point.row = destRow;\n            srcPiece.point.col = destCol;\n        }\n\n        if (destPiece) {\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\n        }\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\n\n        if (srcPiece) {\n            srcPiece.point.col = col;\n            srcPiece.point.row = row;\n        }\n\n        if (destPiece) {\n            board.pieces.push(destPiece);\n        }\n\n        return isBound;\n    }\n\n    public static format(\n        sourcePoint: Point,\n        destPoint: Point,\n        reverted: boolean\n    ) {\n        if (reverted) {\n            const sourceX = 104 - sourcePoint.col;\n            const destX = 104 - destPoint.col;\n            return (\n                String.fromCharCode(sourceX) +\n                (sourcePoint.row + 1) +\n                String.fromCharCode(destX) +\n                (destPoint.row + 1)\n            );\n        } else {\n            const incrementX = 97;\n            return (\n                String.fromCharCode(sourcePoint.col + incrementX) +\n                (Math.abs(sourcePoint.row - 7) + 1) +\n                String.fromCharCode(destPoint.col + incrementX) +\n                (Math.abs(destPoint.row - 7) + 1)\n            );\n        }\n    }\n\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\n        let xAxis: number;\n        let yAxis: number;\n        if (reverted) {\n            xAxis = 104 - coords.charCodeAt(0);\n            yAxis = +coords.charAt(1) - 1;\n        } else {\n            xAxis = coords.charCodeAt(0) - 97;\n            yAxis = Math.abs(+coords.charAt(1) - 8);\n        }\n\n        return new MoveTranslation(xAxis, yAxis, reverted);\n    }\n\n    public static findPieceByPossibleMovesContaining(\n        coords: string,\n        board: Board,\n        color: Color\n    ): Piece[] {\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\n        let foundPieces = [];\n\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\n            for (let point of piece.getPossibleMoves()) {\n                if (!MoveUtils.willMoveCauseCheck(\n                    piece.color,\n                    piece.point.row,\n                    piece.point.col,\n                    indexes.yAxis,\n                    indexes.xAxis,\n                    board\n                ) && point.isEqual(destPoint)) {\n                    foundPieces.push(piece);\n                }\n            }\n        }\n        return foundPieces;\n    }\n\n    public static findPieceByPossibleCapturesContaining(\n        coords: string,\n        board: Board,\n        color: Color\n    ): Piece[] {\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\n        let foundPieces = [];\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\n            for (let point of piece.getPossibleCaptures()) {\n                if (!MoveUtils.willMoveCauseCheck(\n                    piece.color,\n                    piece.point.row,\n                    piece.point.col,\n                    indexes.yAxis,\n                    indexes.xAxis,\n                    board\n                ) && point.isEqual(destPoint)) {\n                    foundPieces.push(piece);\n                }\n            }\n        }\n\n        return foundPieces;\n    }\n\n    public static formatSingle(point: Point, reverted: boolean): string {\n        if (reverted) {\n            const sourceX = 104 - point.col;\n            return (\n                String.fromCharCode(sourceX) +\n                (point.row + 1)\n            );\n        } else {\n            const incrementX = 97;\n            return (\n                String.fromCharCode(point.col + incrementX) +\n                (Math.abs(point.row - 7) + 1)\n            );\n        }\n    }\n\n    public static getFirstLetterPiece(piece: Piece): string {\n        if (piece instanceof Pawn) {\n            return 'P';\n        } else {\n            if (piece instanceof Knight) {\n                return 'N';\n            } else {\n                if (piece instanceof Bishop) {\n                    return 'B';\n                } else {\n                    if (piece instanceof Rook) {\n                        return 'R';\n                    } else {\n                        if (piece instanceof King) {\n                            return 'K';\n                        } else {\n                            if (piece instanceof Queen) {\n                                return 'Q';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return '';\n    }\n\n    static reverse(board: Board, row: number) {\n        return board.reverted\n            ? row + 1\n            : Math.abs(row - 7) + 1;\n    }\n\n    static formatCol(board: Board, col: number): string {\n        return board.reverted\n            ? String.fromCharCode(104 - col)\n            : String.fromCharCode(97 + col);\n    }\n}\n","import { Board } from '../../../models/board';\nimport { Bishop } from '../../../models/pieces/bishop';\nimport { Color } from '../../../models/pieces/color';\nimport { King } from '../../../models/pieces/king';\nimport { Knight } from '../../../models/pieces/knight';\nimport { Pawn } from '../../../models/pieces/pawn';\nimport { Point } from '../../../models/pieces/point';\nimport { Queen } from '../../../models/pieces/queen';\nimport { Rook } from '../../../models/pieces/rook';\nimport { Coin } from '../../../models/pieces/coin';\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\n\nexport class DefaultPiecesLoader {\n    static loadDefaultPieces(board: Board) {\n        board.pieces = [];\n        // black pawns\n        for (let i = 0; i < 8; ++i) {\n            board.pieces.push(\n                new Pawn(\n                    new Point(1, i),\n                    Color.BLACK,\n                    UnicodeConstants.BLACK_PAWN,\n                    board,\n                ),\n            );\n        }\n        board.pieces.push(\n            new Rook(\n                new Point(0, 0),\n                Color.BLACK,\n                UnicodeConstants.BLACK_ROOK,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Knight(\n                new Point(0, 1),\n                Color.BLACK,\n                UnicodeConstants.BLACK_KNIGHT,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Bishop(\n                new Point(0, 2),\n                Color.BLACK,\n                UnicodeConstants.BLACK_BISHOP,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Queen(\n                new Point(0, 3),\n                Color.BLACK,\n                UnicodeConstants.BLACK_QUEEN,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new King(\n                new Point(0, 4),\n                Color.BLACK,\n                UnicodeConstants.BLACK_KING,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Bishop(\n                new Point(0, 5),\n                Color.BLACK,\n                UnicodeConstants.BLACK_BISHOP,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Knight(\n                new Point(0, 6),\n                Color.BLACK,\n                UnicodeConstants.BLACK_KNIGHT,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Rook(\n                new Point(0, 7),\n                Color.BLACK,\n                UnicodeConstants.BLACK_ROOK,\n                board,\n            ),\n        );\n\n        // white pawns\n        for (let i = 0; i < 8; ++i) {\n            board.pieces.push(\n                new Pawn(\n                    new Point(6, i),\n                    Color.WHITE,\n                    UnicodeConstants.WHITE_PAWN,\n                    board,\n                ),\n            );\n        }\n        board.pieces.push(\n            new Rook(\n                new Point(7, 0),\n                Color.WHITE,\n                UnicodeConstants.WHITE_ROOK,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Knight(\n                new Point(7, 1),\n                Color.WHITE,\n                UnicodeConstants.WHITE_KNIGHT,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Bishop(\n                new Point(7, 2),\n                Color.WHITE,\n                UnicodeConstants.WHITE_BISHOP,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Queen(\n                new Point(7, 3),\n                Color.WHITE,\n                UnicodeConstants.WHITE_QUEEN,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new King(\n                new Point(7, 4),\n                Color.WHITE,\n                UnicodeConstants.WHITE_KING,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Bishop(\n                new Point(7, 5),\n                Color.WHITE,\n                UnicodeConstants.WHITE_BISHOP,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Knight(\n                new Point(7, 6),\n                Color.WHITE,\n                UnicodeConstants.WHITE_KNIGHT,\n                board,\n            ),\n        );\n        board.pieces.push(\n            new Rook(\n                new Point(7, 7),\n                Color.WHITE,\n                UnicodeConstants.WHITE_ROOK,\n                board,\n            ),\n        );\n\n        board.calculateFEN();\n    }\n}\n","import { Board } from '../../../../../models/board';\nimport { Bishop } from '../../../../../models/pieces/bishop';\nimport { Color } from '../../../../../models/pieces/color';\nimport { King } from '../../../../../models/pieces/king';\nimport { Knight } from '../../../../../models/pieces/knight';\nimport { Pawn } from '../../../../../models/pieces/pawn';\nimport { Piece } from '../../../../../models/pieces/piece';\nimport { Point } from '../../../../../models/pieces/point';\nimport { Queen } from '../../../../../models/pieces/queen';\nimport { Rook } from '../../../../../models/pieces/rook';\nimport { Coin } from '../../../../../models/pieces/coin';\nimport { MoveUtils } from '../../../../../utils/move-utils';\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\nimport { DefaultPiecesLoader } from '../../default-pieces-loader';\nimport { NotationProcessor } from '../notation-processor';\n\nexport class DefaultPgnProcessor implements NotationProcessor {\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\n        if (notation) {\n            engineFacade.board.reverted = false;\n            engineFacade.board.pieces = [];\n            engineFacade.reset();\n            DefaultPiecesLoader.loadDefaultPieces(engineFacade.board);\n            let moves = this.extractMoves(notation);\n            let counter = -1;\n            for (let move of moves) {\n                ++counter;\n                move = move.replace(/[+#]/g, '');\n                let promotionIndex = '';\n\n                if (move.includes('=')) {\n                    promotionIndex = this.resolvePromotion(\n                        move.substring(move.length - 1),\n                    );\n                    move = move.substring(0, move.length - 2);\n                }\n\n                let color =\n                    counter === 0 || counter % 2 === 0\n                        ? Color.WHITE\n                        : Color.BLACK;\n\n                if (/^[a-z]\\d$/g.test(move)) {\n                    // zwykly ruch na wolne pole e4\n                    let piece = MoveUtils.findPieceByPossibleMovesContaining(\n                        move,\n                        engineFacade.board,\n                        color,\n                    ).find((piece) => piece instanceof Pawn);\n\n                    // en passant check\n                    if (!piece) {\n                        piece = MoveUtils.findPieceByPossibleCapturesContaining(\n                            move,\n                            engineFacade.board,\n                            color,\n                        ).find((piece) => piece instanceof Pawn);\n                    }\n\n                    // if piece is found for sure\n                    if (piece) {\n                        engineFacade.move(\n                            MoveUtils.formatSingle(piece.point, false) +\n                                move +\n                                promotionIndex,\n                        );\n                    }\n                } else {\n                    if (/^[A-Z][a-h]\\d$/g.test(move)) {\n                        // jezeli ma wielka litere, czyli trzeba odszukac ktora figura Nf3\n                        let pieces =\n                            MoveUtils.findPieceByPossibleMovesContaining(\n                                move.substring(1),\n                                engineFacade.board,\n                                color,\n                            );\n                        let piece = pieces.find((piece) =>\n                            this.resolvePieceByFirstChar(move.charAt(0), piece),\n                        );\n                        if (piece) {\n                            engineFacade.move(\n                                MoveUtils.formatSingle(piece.point, false) +\n                                    move.substring(1) +\n                                    promotionIndex,\n                            );\n                        } else {\n                        }\n                    } else {\n                        if ('O-O' === move) {\n                            engineFacade.move(\n                                color === Color.WHITE ? 'e1g1' : 'e8g8',\n                            );\n                        } else {\n                            if (/^[a-z]x[a-z]\\d$/g.test(move)) {\n                                //exd5\n                                let pieces =\n                                    MoveUtils.findPieceByPossibleCapturesContaining(\n                                        move.substring(move.indexOf('x') + 1),\n                                        engineFacade.board,\n                                        color,\n                                    ).filter((piece) => piece instanceof Pawn);\n\n                                let piece;\n                                if (pieces.length > 1) {\n                                    piece = this.resolveByCol(\n                                        pieces,\n                                        move.substring(0, 1),\n                                    );\n                                } else {\n                                    piece = pieces[0];\n                                }\n\n                                if (piece) {\n                                    engineFacade.move(\n                                        MoveUtils.formatSingle(\n                                            piece.point,\n                                            false,\n                                        ) +\n                                            move.substring(\n                                                move.indexOf('x') + 1,\n                                            ) +\n                                            promotionIndex,\n                                    );\n                                } else {\n                                }\n                            } else {\n                                if (/^[A-Z]x[a-z]\\d$/g.test(move)) {\n                                    let piece =\n                                        MoveUtils.findPieceByPossibleCapturesContaining(\n                                            move.substring(\n                                                move.indexOf('x') + 1,\n                                            ),\n                                            engineFacade.board,\n                                            color,\n                                        ).find((piece) =>\n                                            this.resolvePieceByFirstChar(\n                                                move.substring(0, 1),\n                                                piece,\n                                            ),\n                                        );\n                                    if (piece) {\n                                        engineFacade.move(\n                                            MoveUtils.formatSingle(\n                                                piece.point,\n                                                false,\n                                            ) +\n                                                move.substring(\n                                                    move.indexOf('x') + 1,\n                                                ) +\n                                                promotionIndex,\n                                        );\n                                    } else {\n                                    }\n                                } else {\n                                    if (move === 'O-O-O') {\n                                        engineFacade.move(\n                                            color === Color.WHITE\n                                                ? 'e1c1'\n                                                : 'e8c8',\n                                        );\n                                    } else {\n                                        if (/^[A-Z]\\dx[a-z]\\d$/g.test(move)) {\n                                            //Ngxe4 sytuacja 2 skoczkow pion bicie\n                                            let pieces =\n                                                MoveUtils.findPieceByPossibleCapturesContaining(\n                                                    move.substring(\n                                                        move.indexOf('x') + 1,\n                                                    ),\n                                                    engineFacade.board,\n                                                    color,\n                                                ).filter((piece) =>\n                                                    this.resolvePieceByFirstChar(\n                                                        move.charAt(0),\n                                                        piece,\n                                                    ),\n                                                );\n\n                                            let piece = this.resolveByRow(\n                                                pieces,\n                                                move.substring(1, 2),\n                                            );\n\n                                            if (piece) {\n                                                engineFacade.move(\n                                                    MoveUtils.formatSingle(\n                                                        piece.point,\n                                                        false,\n                                                    ) +\n                                                        move.substring(\n                                                            move.indexOf('x') +\n                                                                1,\n                                                        ) +\n                                                        promotionIndex,\n                                                );\n                                            }\n                                        } else {\n                                            if (\n                                                /^[A-Z][a-z][a-z]\\d$/g.test(\n                                                    move,\n                                                )\n                                            ) {\n                                                // dwie wieze bez bicia Rac1 pion\n                                                let pieces =\n                                                    MoveUtils.findPieceByPossibleMovesContaining(\n                                                        move.substring(2, 4),\n                                                        engineFacade.board,\n                                                        color,\n                                                    ).filter((piece) =>\n                                                        this.resolvePieceByFirstChar(\n                                                            move.charAt(0),\n                                                            piece,\n                                                        ),\n                                                    );\n\n                                                let piece = this.resolveByCol(\n                                                    pieces,\n                                                    move.substring(1, 2),\n                                                );\n\n                                                if (piece) {\n                                                    engineFacade.move(\n                                                        MoveUtils.formatSingle(\n                                                            piece.point,\n                                                            false,\n                                                        ) +\n                                                            move.substring(\n                                                                2,\n                                                                4,\n                                                            ) +\n                                                            promotionIndex,\n                                                    );\n                                                }\n                                            } else {\n                                                if (\n                                                    /^[A-Z][a-z]x[a-z]\\d$/g.test(\n                                                        move,\n                                                    )\n                                                ) {\n                                                    let pieces =\n                                                        MoveUtils.findPieceByPossibleCapturesContaining(\n                                                            move.substring(\n                                                                move.indexOf(\n                                                                    'x',\n                                                                ) + 1,\n                                                            ),\n                                                            engineFacade.board,\n                                                            color,\n                                                        ).filter((piece) =>\n                                                            this.resolvePieceByFirstChar(\n                                                                move.charAt(0),\n                                                                piece,\n                                                            ),\n                                                        );\n\n                                                    let piece =\n                                                        this.resolveByCol(\n                                                            pieces,\n                                                            move.substring(\n                                                                1,\n                                                                2,\n                                                            ),\n                                                        );\n\n                                                    if (piece) {\n                                                        engineFacade.move(\n                                                            MoveUtils.formatSingle(\n                                                                piece.point,\n                                                                false,\n                                                            ) +\n                                                                move.substring(\n                                                                    move.indexOf(\n                                                                        'x',\n                                                                    ) + 1,\n                                                                ) +\n                                                                promotionIndex,\n                                                        );\n                                                    }\n                                                } else {\n                                                    this.processR1f2(\n                                                        move,\n                                                        engineFacade,\n                                                        color,\n                                                        promotionIndex,\n                                                    );\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private processR1f2(move, engineFacade, color, promotionIndex) {\n        if (/^[A-Z]\\d[a-z]\\d$/g.test(move)) {\n            // R1f2\n            let pieces = MoveUtils.findPieceByPossibleMovesContaining(\n                move.substring(2, 4),\n                engineFacade.board,\n                color,\n            ).filter((piece) =>\n                this.resolvePieceByFirstChar(move.charAt(0), piece),\n            );\n\n            let piece = this.resolveByRow(pieces, move.substring(1, 2));\n\n            if (piece) {\n                engineFacade.move(\n                    MoveUtils.formatSingle(piece.point, false) +\n                        move.substring(2, 4) +\n                        promotionIndex,\n                );\n            }\n        }\n    }\n\n    protected extractMoves(notation: string) {\n        return notation\n            .substring(notation.lastIndexOf(']') + 1)\n            .replace(/[0-9]+\\./g, '')\n            .replace(/\\s+/g, ' ')\n            .replace(/{[^}]*}/g, '')\n            .trim()\n            .split(' ')\n            .filter((s) => s);\n    }\n\n    protected movePiece(piece: Piece, board: Board, move: string) {\n        let indexes = MoveUtils.translateCoordsToIndex(move, board.reverted);\n        piece.point.col = indexes.xAxis;\n        piece.point.row = indexes.yAxis;\n    }\n\n    hasUpperCase(move: string) {\n        return /[A-Z]/.test(move);\n    }\n\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\n        let piecesFirstChar = '';\n        if (piece instanceof King) {\n            piecesFirstChar = 'K';\n        } else {\n            if (piece instanceof Queen) {\n                piecesFirstChar = 'Q';\n            } else {\n                if (piece instanceof Rook) {\n                    piecesFirstChar = 'R';\n                } else {\n                    if (piece instanceof Bishop) {\n                        piecesFirstChar = 'B';\n                    } else {\n                        if (piece instanceof Knight) {\n                            piecesFirstChar = 'N';\n                        } else {\n                            if (piece instanceof Pawn) {\n                                piecesFirstChar = 'P';\n                            } else {\n                                if (piece instanceof Coin) {\n                                    piecesFirstChar = 'C';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return move === piecesFirstChar;\n    }\n\n    private isShortCastle(move: string) {\n        return move === 'O-O';\n    }\n\n    private removePiece(coords: string, board: Board) {\n        let indexes = MoveUtils.translateCoordsToIndex(coords, board.reverted);\n\n        board.pieces = board.pieces.filter(\n            (e) => !e.point.isEqual(new Point(indexes.yAxis, indexes.xAxis)),\n        );\n    }\n\n    private isLongCastle(move: string) {\n        return move === 'O-O-O';\n    }\n\n    private resolveByCol(pieces: Piece[], char: string): Piece {\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\n        return firstPieceFormat.substring(0, 1) === char\n            ? pieces[0]\n            : pieces[1];\n    }\n\n    private resolveByRow(pieces: Piece[], char: string) {\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\n        return firstPieceFormat.substring(1, 2) === char\n            ? pieces[0]\n            : pieces[1];\n    }\n\n    private replacePromotion(move: string) {\n        return move\n            .replace('=Q', '1')\n            .replace('=R', '2')\n            .replace('=B', '3')\n            .replace('=K', '4');\n    }\n\n    private resolvePromotion(promotionChar: string) {\n        switch (promotionChar) {\n            case 'Q':\n                return '1';\n            case 'R':\n                return '2';\n            case 'B':\n                return '3';\n            case 'N':\n                return '4';\n        }\n        return '';\n    }\n}\n","import { NotationProcessor } from './notation-processor';\nimport {\n    DefaultFenProcessor,\n} from './fen-loader/default-fen-processor';\nimport { DefaultPgnProcessor } from './pgn-loader/default-pgn-processor';\n\nexport class NotationProcessorFactory {\n\n    static getProcessor(type: NotationType): NotationProcessor {\n        switch (type) {\n            case NotationType.FEN:\n                return new DefaultFenProcessor();\n\n            case NotationType.PGN:\n                return new DefaultPgnProcessor();\n\n        }\n    }\n\n    static getDefaultProcessor(): NotationProcessor {\n        return new DefaultFenProcessor();\n    }\n\n}\n\nexport enum NotationType {\n    FEN = 1,\n    PGN = 2\n}\n","export class DrawPoint {\n    x: number;\n    y: number;\n    color: string;\n\n    constructor(x: number, y: number, color: string) {\n        this.x = x + 0.5;\n        this.y = y + 0.5;\n        this.color = color;\n    }\n\n    isEqual(that: DrawPoint) {\n        return that && that.x === this.x && this.y === that.y;\n    }\n}\n","import { Point } from '../../models/pieces/point';\nimport { ColorStrategy } from '../drawing-tools/colors/color-strategy';\nimport { DrawPoint } from '../drawing-tools/draw-point';\n\nexport class ClickUtils {\n\n    static getClickPoint(\n        event: any,\n        top: number,\n        height: number,\n        left: number,\n        width: number\n    ) {\n        return new Point(\n            Math.floor((event.y - top) / (height / 8)),\n            Math.floor((event.x - left) / (width / 8)\n            )\n        );\n    }\n\n    static getDrawingPoint(\n        tileSize: number,\n        colorStrategy: ColorStrategy,\n        x: number,\n        y: number,\n        ctrl: boolean,\n        alt: boolean,\n        shift: boolean,\n        xAxis: number,\n        yAxis: number\n    ) {\n        const squareSize = tileSize / 8;\n        const xx = Math.floor(\n            (x - xAxis) /\n            squareSize\n        );\n        const yy = Math.floor(\n            (y - yAxis) /\n            squareSize\n        );\n\n        let color = colorStrategy.resolve(ctrl, shift, alt);\n\n        return new DrawPoint(\n            Math.floor(xx * squareSize + squareSize / 2),\n            Math.floor(yy * squareSize + squareSize / 2),\n            color\n        );\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { HistoryMove } from './history-move';\n\nexport class HistoryMoveProvider {\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\n\n    get historyMoves(): HistoryMove[] {\n        return this.historyMovesSubject$.value;\n    }\n\n    set historyMoves(states: HistoryMove[]) {\n        this.historyMovesSubject$.next(states);\n    }\n\n    addMove(historyMove: HistoryMove) {\n        this.historyMoves = [...this.historyMoves, historyMove];\n    }\n\n    pop(): HistoryMove {\n        const lastHistoryMove = this.getLastMove();\n        this.historyMoves = this.historyMoves.filter(\n            (state) => state !== lastHistoryMove\n        );\n        return lastHistoryMove;\n    }\n\n    getAll() {\n        return this.historyMoves;\n    }\n\n    clear() {\n        this.historyMoves = [];\n    }\n\n    getLastMove() {\n        return this.historyMoves[this.getLastMoveIndex()];\n    }\n\n    getLastMoveIndex() {\n        return this.historyMoves.length - 1;\n    }\n}\n","export class Constants {\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\n\n    static readonly DEFAULT_SIZE = 500;\n    static readonly MIN_BOARD_SIZE = 100;\n    static readonly MAX_BOARD_SIZE = 4000;\n\n    static readonly DEFAULT_SOURCE_POINT_COLOR = 'rgba(146, 111, 26, 0.79)';\n    static readonly DEFAULT_DESTINATION_POINT_COLOR = '#b28e1a';\n    static readonly DEFAULT_LEGAL_MOVE_POINT_COLOR = 'radial-gradient(#13262F 15%, transparent 20%);';\n\n}\n","import { Bishop } from '../../models/pieces/bishop';\nimport { Color } from '../../models/pieces/color';\nimport { King } from '../../models/pieces/king';\nimport { Knight } from '../../models/pieces/knight';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Queen } from '../../models/pieces/queen';\nimport { Rook } from '../../models/pieces/rook';\nimport { Coin } from '../../models/pieces/coin';\nimport { PieceIconInput } from './piece-icon-input';\n\nexport class PieceIconInputManager {\n    private _defaultIcons: boolean = false;\n    private _pieceIconInput: PieceIconInput;\n\n    get pieceIconInput(): PieceIconInput {\n        return this._pieceIconInput;\n    }\n\n    set pieceIconInput(value: PieceIconInput) {\n        this._pieceIconInput = value;\n    }\n\n    get defaultIcons(): boolean {\n        return this._defaultIcons;\n    }\n\n    set defaultIcons(value: boolean) {\n        this._defaultIcons = value;\n    }\n\n    isDefaultIcons(): boolean {\n        return (\n            this.pieceIconInput === undefined || this.pieceIconInput === null\n        );\n    }\n\n    getPieceIcon(piece: Piece): string {\n        let isWhite = piece.color === Color.WHITE;\n        switch (piece.constructor) {\n            case Coin:\n                return isWhite\n                    ? this.pieceIconInput.whiteCoinUrl\n                    : this.pieceIconInput.blackCoinUrl;\n            case King:\n                return isWhite\n                    ? this.pieceIconInput.whiteKingUrl\n                    : this.pieceIconInput.blackKingUrl;\n            case Queen:\n                return isWhite\n                    ? this.pieceIconInput.whiteQueenUrl\n                    : this.pieceIconInput.blackQueenUrl;\n            case Rook:\n                return isWhite\n                    ? this.pieceIconInput.whiteRookUrl\n                    : this.pieceIconInput.blackRookUrl;\n            case Bishop:\n                return isWhite\n                    ? this.pieceIconInput.whiteBishopUrl\n                    : this.pieceIconInput.blackBishopUrl;\n            case Knight:\n                return isWhite\n                    ? this.pieceIconInput.whiteKnightUrl\n                    : this.pieceIconInput.blackKnightUrl;\n            case Pawn:\n                return isWhite\n                    ? this.pieceIconInput.whitePawnUrl\n                    : this.pieceIconInput.blackPawnUrl;\n        }\n    }\n\n    loadDefaultData() {\n        this.pieceIconInput = {\n            blackCoinUrl: '',\n            blackBishopUrl: '',\n            blackKingUrl: '',\n            blackKnightUrl: '',\n            blackQueenUrl: '',\n            blackRookUrl: '',\n            whiteCoinUrl: '',\n            whiteBishopUrl: '',\n            whiteKingUrl: '',\n            whiteKnightUrl: '',\n            whitePawnUrl: '',\n            whiteQueenUrl: '',\n            whiteRookUrl: '',\n            blackPawnUrl: 'a',\n        };\n    }\n}\n","export class CoordsProvider {\n    private readonly defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\n    private readonly defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\n\n    private currentXCoords: string[] = [...this.defaultXCoords];\n    private currentYCoords: number[] = [...this.defaultYCoords];\n\n    get xCoords(): string[] {\n        return this.currentXCoords;\n    }\n\n    get yCoords(): number[] {\n        return this.currentYCoords;\n    }\n\n    reverse() {\n        this.currentXCoords = this.currentXCoords.reverse();\n        this.currentYCoords = this.currentYCoords.reverse();\n    }\n\n    reset() {\n        this.init();\n    }\n\n    private init() {\n        this.currentXCoords = [...this.defaultXCoords];\n        this.currentYCoords = [...this.defaultYCoords];\n    }\n}\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DragEndProcessor } from './drag-end-processor';\n\nexport class AnimationDragEndProcessor implements DragEndProcessor {\n\n    dragEnded(event: CdkDragEnd, disabling: boolean, startTrans: string) {\n        if (!disabling) {\n            if (startTrans) {\n                event.source._dragRef.getRootElement().style.transform = startTrans;\n            }\n        }\n    }\n\n}\n","import { CdkDragEnd } from '@angular/cdk/drag-drop';\nimport { AnimationDragEndProcessor } from './animation-drag-end-processor';\nimport { DefaultDragEndProcessor } from './default-drag-end-processor';\nimport { DragEndProcessor } from './drag-end-processor';\n\nexport class DragEndStrategy {\n\n    private dragEndProcessor: DragEndProcessor;\n\n    constructor() {\n        this.dragEndProcessor = new AnimationDragEndProcessor();\n    }\n\n    public process(event: CdkDragEnd, disabling: boolean, startTrans: string): void {\n        this.dragEndProcessor.dragEnded(event, disabling, startTrans);\n    }\n\n    setDragEndProcessor(processor: DragEndProcessor) {\n        this.dragEndProcessor = processor;\n    }\n\n}\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DragStartProcessor } from './drag-start-processor';\n\nexport class AnimationDragStartProcessor implements DragStartProcessor {\n\n    dragStarted(event: CdkDragStart) {\n        const style = event.source.getRootElement().style;\n        style.zIndex = '1000';\n        style.position = 'absolute';\n    }\n\n}\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\nimport { AnimationDragStartProcessor } from './animation-drag-start-processor';\nimport { DefaultDragStartProcessor } from './default-drag-start-processor';\nimport { DragStartProcessor } from './drag-start-processor';\n\nexport class DragStartStrategy {\n\n    private dragStartProcessor: DragStartProcessor;\n\n    constructor() {\n        this.dragStartProcessor = new AnimationDragStartProcessor();\n    }\n\n    public process(event: CdkDragStart): void {\n        this.dragStartProcessor.dragStarted(event);\n    }\n\n    setDragStartProcessor(processor: DragStartProcessor) {\n        this.dragStartProcessor = processor;\n    }\n\n}\n","import { ColorProcessor } from './color-processor';\n\nexport class DefaultColorProcessor implements ColorProcessor{\n\n    resolve(ctrl: any, shift: any, alt: any): string{\n        let color = 'green';\n\n        if (ctrl || shift) {\n            color = 'red';\n        }\n        if (alt) {\n            color = 'blue';\n        }\n        if ((shift || ctrl) && alt) {\n            color = 'orange';\n        }\n\n        return color;\n    }\n\n}\n","import { ColorProcessor } from './color-processor';\nimport { DefaultColorProcessor } from './default-color-processor';\n\nexport class ColorStrategy {\n\n    colorProcessor: ColorProcessor;\n\n    constructor() {\n        this.colorProcessor = new DefaultColorProcessor();\n    }\n\n    resolve(ctrl: any, shift: any, alt: any) {\n        return this.colorProcessor.resolve(ctrl, shift, alt);\n    }\n\n    setColorProcessor(colorProcessor: ColorProcessor) {\n        this.colorProcessor = colorProcessor;\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Arrow } from './shapes/arrow';\nimport { Circle } from './shapes/circle';\n\nexport class DrawProvider {\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\n\n    public arrows$ = this.arrowsSubject$.asObservable();\n    public circles$ = this.circlesSubject$.asObservable();\n\n    private get circles(): Circle[] {\n        return this.circlesSubject$.value;\n    }\n\n    private set circles(circles: Circle[]) {\n        this.circlesSubject$.next(circles);\n    }\n\n    private get arrows(): Arrow[] {\n        return this.arrowsSubject$.value;\n    }\n\n    private set arrows(arrows: Arrow[]) {\n        this.arrowsSubject$.next(arrows);\n    }\n\n    addCircle(circle: Circle) {\n        this.circles = [...this.circles, circle];\n    }\n\n    reomveCircle(removeCircle: Circle) {\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\n    }\n\n    addArrow(arrow: Arrow) {\n        this.arrows = [...this.arrows, arrow];\n    }\n\n    removeArrow(removeArrow: Arrow) {\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\n    }\n\n    containsCircle(checkCircle: Circle) {\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\n    }\n\n    containsArrow(checkArrow: Arrow) {\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\n    }\n\n    clear() {\n        this.arrows = [];\n        this.circles = [];\n    }\n}\n","import { Board } from '../../models/board';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\n\nexport abstract class AbstractPgnProcessor {\n\n    protected pgn = [];\n    protected currentIndex = 0.5;\n\n    public abstract process(\n        board: Board,\n        sourcePiece: Piece,\n        destPoint: Point,\n        destPiece?: Piece\n    ): void;\n\n    public getPGN() {\n        return this.pgn.join(' ');\n    }\n\n    protected getLast() {\n        return this.pgn[this.pgn.length - 1];\n    }\n\n    protected appendToLast(str: string) {\n        this.pgn[this.pgn.length - 1] = this.getLast() + str;\n    }\n\n    processChecks(checkmate: boolean, check: boolean, stalemate: boolean) {\n        if (checkmate) {\n            this.appendToLast('#');\n        } else {\n            if (check) {\n                this.appendToLast('+');\n            }\n        }\n    }\n\n    reset() {\n        this.pgn = [];\n        this.currentIndex = 0.5;\n    }\n\n    addPromotionChoice(promotion) {\n        switch (promotion) {\n            case 1:\n                this.appendToLast('=Q');\n                break;\n            case 2:\n                this.appendToLast('=R');\n                break;\n            case 3:\n                this.appendToLast('=B');\n                break;\n            case 4:\n                this.appendToLast('=N');\n                break;\n        }\n    }\n\n    removeLast() {\n        this.pgn.pop();\n        this.currentIndex -= 0.5;\n    }\n\n}\n","import { Board } from '../../models/board';\nimport { King } from '../../models/pieces/king';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\nimport { MoveUtils } from '../../utils/move-utils';\nimport { AbstractPgnProcessor } from './abstract-pgn-processor';\n\nexport class DefaultPgnProcessor extends AbstractPgnProcessor {\n\n    public process(\n        board: Board,\n        sourcePiece: Piece,\n        destPoint: Point,\n        destPiece?: Piece\n    ): void {\n        this.currentIndex += 0.5;\n        let currentMove = '';\n        if(this.currentIndex % Math.floor(this.currentIndex) === 0) {\n            currentMove = this.currentIndex + '. ';\n        }\n        let possibleCaptures = [];\n        let possibleMoves = [];\n\n        if (destPiece) {\n            possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(\n                MoveUtils.formatSingle(destPoint, board.reverted),\n                board,\n                sourcePiece.color\n            ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n        }\n        possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(\n            MoveUtils.formatSingle(destPoint, board.reverted),\n            board,\n            sourcePiece.color\n        ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n\n        if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {\n            currentMove += MoveUtils.formatSingle(destPoint, board.reverted);\n        } else {\n            if (sourcePiece instanceof Pawn && destPiece) {\n                currentMove += (MoveUtils.formatSingle(\n                    sourcePiece.point,\n                    board.reverted\n                ).substring(0, 1) + 'x' + MoveUtils.formatSingle(\n                    destPoint,\n                    board.reverted\n                ));\n            } else {\n                if (sourcePiece instanceof King && (Math.abs(sourcePiece.point.col - destPoint.col) === 2)) {\n                    if (board.reverted) {\n                        currentMove += (destPoint.col < 2\n                            ? 'O-O'\n                            : 'O-O-O');\n                    } else {\n                        currentMove += destPoint.col < 3\n                            ? 'O-O-O'\n                            : 'O-O';\n                    }\n                } else {\n                    if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) {     // Nf3\n                        currentMove += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(\n                            destPoint,\n                            board.reverted\n                        );\n                    } else {\n                        if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) {    // Nbd7\n                            if (this.isEqualByCol(\n                                possibleMoves[0],\n                                possibleMoves[1]\n                            )) {\n                                currentMove +=  MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + MoveUtils.reverse(\n                                    board,\n                                    sourcePiece.point.row\n                                ) + MoveUtils.formatSingle(\n                                    destPoint,\n                                    board.reverted\n                                );\n                            } else {\n                                currentMove += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + MoveUtils.formatCol(\n                                    board,\n                                    sourcePiece.point.col\n                                ) + MoveUtils.formatSingle(\n                                    destPoint,\n                                    board.reverted\n                                );\n                            }\n                        } else {\n                            if (possibleCaptures.length > 1) {\n                                if ((this.isEqualByCol(\n                                    possibleCaptures[0],\n                                    possibleCaptures[1]\n                                ))) {\n                                    currentMove += MoveUtils.getFirstLetterPiece(\n                                        sourcePiece) + MoveUtils.reverse(\n                                        board,\n                                        sourcePiece.point.row\n                                    ) + 'x' + MoveUtils.formatSingle(\n                                        destPoint,\n                                        board.reverted\n                                    );\n                                } else {\n                                    currentMove += MoveUtils.getFirstLetterPiece(\n                                        sourcePiece) + MoveUtils.formatCol(\n                                        board,\n                                        sourcePiece.point.col\n                                    ) + 'x' + MoveUtils.formatSingle(\n                                        destPoint,\n                                        board.reverted\n                                    );\n                                }\n                            } else {\n                                currentMove += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + 'x' + MoveUtils.formatSingle(\n                                    destPoint, board.reverted\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.pgn.push(currentMove);\n    }\n\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\n        return MoveUtils.getFirstLetterPiece(piece) === move;\n    }\n\n    private isEqualByCol(aPiece: Piece, bPiece: Piece) {\n        return aPiece.point.col === bPiece.point.col;\n    }\n\n}\n","import { PiecePromotionModalComponent } from '../piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { HistoryMove } from '../history-move-provider/history-move';\nimport { HistoryMoveProvider } from '../history-move-provider/history-move-provider';\nimport { Board } from '../models/board';\nimport { King } from '../models/pieces/king';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { Rook } from '../models/pieces/rook';\nimport { Coin } from '../models/pieces/coin';\nimport { Constants } from '../utils/constants';\nimport { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\nimport { CoordsProvider } from './coords/coords-provider';\nimport { DragEndStrategy } from './drag/end/drag-end-strategy';\nimport { DragStartStrategy } from './drag/start/drag-start-strategy';\nimport { ColorStrategy } from './drawing-tools/colors/color-strategy';\nimport { DrawProvider } from './drawing-tools/draw-provider';\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\nimport { AbstractPgnProcessor } from './pgn/abstract-pgn-processor';\n\nexport abstract class AbstractEngineFacade {\n    public dragStartStrategy: DragStartStrategy = new DragStartStrategy();\n    public dragEndStrategy: DragEndStrategy = new DragEndStrategy();\n    public pgnProcessor: AbstractPgnProcessor = new DefaultPgnProcessor();\n    protected colorStrategy: ColorStrategy = new ColorStrategy();\n\n    public coords: CoordsProvider = new CoordsProvider();\n    public heightAndWidth: number = Constants.DEFAULT_SIZE;\n\n    public freeMode = false;\n    public dragDisabled: boolean;\n    public drawDisabled: boolean;\n    public lightDisabled: boolean;\n    public darkDisabled: boolean;\n    public board: Board;\n    public modal: PiecePromotionModalComponent;\n    public boardLoader: BoardLoader;\n    public drawProvider: DrawProvider = new DrawProvider();\n    public pieceIconManager: PieceIconInputManager =\n        new PieceIconInputManager();\n    public moveHistoryProvider: HistoryMoveProvider = new HistoryMoveProvider();\n    public moveDone: boolean;\n    public disabling = false;\n\n    protected constructor(board: Board) {\n        this.board = board;\n    }\n\n    public abstract reset(): void;\n\n    public abstract undo(): void;\n\n    public abstract move(coords: string): void;\n\n    public abstract addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string,\n    ): void;\n\n    public abstract onMouseUp(\n        event: MouseEvent,\n        pointClicked: Point,\n        left: number,\n        top: number,\n    ): void;\n\n    public abstract onMouseDown(\n        event: MouseEvent,\n        pointClicked: Point,\n        left?: number,\n        top?: number,\n    ): void;\n\n    public checkIfPawnFirstMove(piece: Piece) {\n        if (piece instanceof Pawn) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public checkIfRookMoved(piece: Piece) {\n        if (piece instanceof Rook) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public checkIfKingMoved(piece: Piece) {\n        if (piece instanceof King) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public getMoveHistory(): HistoryMove[] {\n        return this.moveHistoryProvider.getAll();\n    }\n}\n","import { Board } from '../../../models/board';\nimport { Bishop } from '../../../models/pieces/bishop';\nimport { Color } from '../../../models/pieces/color';\nimport { King } from '../../../models/pieces/king';\nimport { Knight } from '../../../models/pieces/knight';\nimport { Pawn } from '../../../models/pieces/pawn';\nimport { Point } from '../../../models/pieces/point';\nimport { Queen } from '../../../models/pieces/queen';\nimport { Rook } from '../../../models/pieces/rook';\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\nimport { Coin } from '../../../models/pieces/coin';\nimport { AbstractEngineFacade } from '../../abstract-engine-facade';\nimport { DefaultPiecesLoader } from './default-pieces-loader';\nimport { NotationProcessor } from './notation-processors/notation-processor';\nimport { NotationProcessorFactory } from './notation-processors/notation-processor-factory';\n\nexport class BoardLoader {\n    private engineFacade: AbstractEngineFacade;\n    private notationProcessor: NotationProcessor;\n\n    constructor(\n        engineFacade: AbstractEngineFacade,\n        notationProcessor?: NotationProcessor,\n    ) {\n        this.engineFacade = engineFacade;\n\n        if (notationProcessor) {\n            this.notationProcessor = notationProcessor;\n        } else {\n            this.notationProcessor =\n                NotationProcessorFactory.getDefaultProcessor();\n        }\n    }\n\n    addPieces() {\n        DefaultPiecesLoader.loadDefaultPieces(this.engineFacade.board);\n    }\n\n    loadFEN(fen: string) {\n        this.notationProcessor.process(fen, this.engineFacade);\n    }\n\n    loadPGN(pgn: string) {\n        this.notationProcessor.process(pgn, this.engineFacade);\n    }\n\n    setEngineFacade(engineFacade: AbstractEngineFacade) {\n        this.engineFacade = engineFacade;\n    }\n\n    setNotationProcessor(notationProcessor: NotationProcessor) {\n        this.notationProcessor = notationProcessor;\n    }\n}\n","import { Board } from '../../../models/board';\n\nexport class BoardState {\n\n    board: Board;\n\n    constructor(board: Board) {\n        this.board = board;\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { BoardState } from './board-state';\n\nexport class BoardStateProvider {\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\n\n    get states(): BoardState[] {\n        return this.statesSubject$.value;\n    }\n\n    set states(states: BoardState[]) {\n        this.statesSubject$.next(states);\n    }\n\n    addMove(state: BoardState) {\n        this.states = [...this.states, state];\n    }\n\n    getStates(): BoardState[] {\n        return this.states;\n    }\n\n    pop(): BoardState {\n        const lastState = this.getLastState();\n        this.states = this.states.filter((state) => state !== lastState);\n        return lastState;\n    }\n\n    isEmpty() {\n        return this.states.length === 0;\n    }\n\n    clear() {\n        this.states = [];\n    }\n\n    getLastState() {\n        return this.states[this.getLastStateIndex()];\n    }\n\n    getLastStateIndex(): number {\n        return this.states.length - 1;\n    }\n}\n","import { DrawPoint } from '../draw-point';\n\nexport class Arrow {\n    start: DrawPoint;\n    end: DrawPoint;\n\n    isEqual(arrow: Arrow) {\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\n    }\n}\n","import { DrawPoint } from '../draw-point';\n\nexport class Circle {\n    drawPoint: DrawPoint;\n\n    isEqual(circle: Circle) {\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\n    }\n}\n","import { Point } from '../../models/pieces/point';\nimport { AbstractPiece } from './abstract-piece';\n\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\n\n    piece: AbstractPiece;\n\n    protected constructor(piece: AbstractPiece) {\n        this.piece = piece;\n    }\n\n    abstract getPossibleCaptures(): Point[];\n\n    abstract getPossibleMoves(): Point[];\n\n}\n","import { Board } from '../../models/board';\nimport { Color } from '../../models/pieces/color';\nimport { Point } from '../../models/pieces/point';\nimport { MoveUtils } from '../../utils/move-utils';\nimport { AbstractPiece } from './abstract-piece';\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\n\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\n    private pointClicked: Point;\n    private color: Color;\n    private board: Board;\n\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\n        super(piece);\n        this.pointClicked = pointClicked;\n        this.color = color;\n        this.board = board;\n    }\n\n    getPossibleCaptures(): Point[] {\n        return this.piece\n            .getPossibleCaptures()\n            .filter(\n                (point) =>\n                    !MoveUtils.willMoveCauseCheck(\n                        this.color,\n                        this.pointClicked.row,\n                        this.pointClicked.col,\n                        point.row,\n                        point.col,\n                        this.board\n                    )\n            );\n    }\n\n    getPossibleMoves(): Point[] {\n        return this.piece\n            .getPossibleMoves()\n            .filter(\n                (point) =>\n                    !MoveUtils.willMoveCauseCheck(\n                        this.color,\n                        this.pointClicked.row,\n                        this.pointClicked.col,\n                        point.row,\n                        point.col,\n                        this.board\n                    )\n            );\n    }\n}\n","import { Board } from '../models/board';\nimport { Bishop } from '../models/pieces/bishop';\nimport { Color } from '../models/pieces/color';\nimport { Knight } from '../models/pieces/knight';\nimport { Piece } from '../models/pieces/piece';\nimport { Queen } from '../models/pieces/queen';\nimport { Rook } from '../models/pieces/rook';\nimport { UnicodeConstants } from '../utils/unicode-constants';\n\nexport class PiecePromotionResolver {\n\n    static resolvePromotionChoice(board: Board, piece: Piece, index: number) {\n        const isWhite = piece.color === Color.WHITE;\n        switch (index) {\n            case 1:\n                board.pieces.push(\n                    new Queen(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_QUEEN\n                            : UnicodeConstants.BLACK_QUEEN,\n                        board\n                    )\n                );\n                break;\n            case 2:\n                board.pieces.push(\n                    new Rook(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_ROOK\n                            : UnicodeConstants.BLACK_ROOK,\n                        board\n                    )\n                );\n                break;\n            case 3:\n                board.pieces.push(\n                    new Bishop(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_BISHOP\n                            : UnicodeConstants.BLACK_BISHOP,\n                        board\n                    )\n                );\n                break;\n            case 4:\n                board.pieces.push(\n                    new Knight(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_KNIGHT\n                            : UnicodeConstants.BLACK_KNIGHT,\n                        board\n                    )\n                );\n                break;\n        }\n    }\n\n}\n","export enum PieceTypeInput {\n    KING = 1,\n    QUEEN = 2,\n    BISHOP = 3,\n    KNIGHT = 4,\n    ROOK = 5,\n    PAWN = 6,\n    COIN = 7,\n}\n\nexport enum ColorInput {\n    LIGHT = 1,\n    DARK = 2,\n}\n","import { Board } from '../../models/board';\nimport { MoveTranslation } from '../../models/move-translation';\nimport { Bishop } from '../../models/pieces/bishop';\nimport { Coin } from '../../models/pieces/coin';\nimport { Color } from '../../models/pieces/color';\nimport { King } from '../../models/pieces/king';\nimport { Knight } from '../../models/pieces/knight';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\nimport { Queen } from '../../models/pieces/queen';\nimport { Rook } from '../../models/pieces/rook';\nimport {\n    ColorInput,\n    PieceTypeInput,\n} from '../../utils/inputs/piece-type-input';\nimport { UnicodeConstants } from '../../utils/unicode-constants';\n\nexport class PieceFactory {\n    static create(\n        indexes: MoveTranslation,\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        board: Board,\n    ): Piece {\n        let piece;\n        let color = colorInput === ColorInput.LIGHT ? Color.WHITE : Color.BLACK;\n\n        switch (pieceTypeInput) {\n            case PieceTypeInput.QUEEN:\n                piece = new Queen(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE\n                        ? UnicodeConstants.WHITE_QUEEN\n                        : UnicodeConstants.BLACK_QUEEN,\n                    board,\n                );\n                break;\n            case PieceTypeInput.KING:\n                piece = new King(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE\n                        ? UnicodeConstants.WHITE_KING\n                        : UnicodeConstants.BLACK_KING,\n                    board,\n                );\n\n                break;\n            case PieceTypeInput.KNIGHT:\n                piece = new Knight(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE\n                        ? UnicodeConstants.WHITE_KNIGHT\n                        : UnicodeConstants.BLACK_KNIGHT,\n                    board,\n                );\n                break;\n            case PieceTypeInput.BISHOP:\n                piece = new Bishop(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE\n                        ? UnicodeConstants.WHITE_BISHOP\n                        : UnicodeConstants.BLACK_BISHOP,\n                    board,\n                );\n                break;\n            case PieceTypeInput.ROOK:\n                piece = new Rook(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE\n                        ? UnicodeConstants.WHITE_ROOK\n                        : UnicodeConstants.BLACK_ROOK,\n                    board,\n                );\n                break;\n            case PieceTypeInput.PAWN:\n                piece = new Pawn(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE\n                        ? UnicodeConstants.WHITE_PAWN\n                        : UnicodeConstants.BLACK_PAWN,\n                    board,\n                );\n                break;\n            case PieceTypeInput.COIN:\n                piece = new Coin(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE\n                        ? UnicodeConstants.WHITE_COIN\n                        : UnicodeConstants.BLACK_COIN,\n                    board,\n                );\n                break;\n        }\n\n        return piece;\n    }\n}\n","import { EventEmitter } from '@angular/core';\nimport { HistoryMove } from '../history-move-provider/history-move';\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\nimport { AbstractEngineFacade } from './abstract-engine-facade';\n\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\nimport { BoardState } from './board-state-provider/board-state/board-state';\nimport { BoardStateProvider } from './board-state-provider/board-state/board-state-provider';\nimport { MoveStateProvider } from './board-state-provider/board-state/move-state-provider';\nimport { ClickUtils } from './click/click-utils';\nimport { Arrow } from './drawing-tools/shapes/arrow';\nimport { Circle } from './drawing-tools/shapes/circle';\nimport { DrawPoint } from './drawing-tools/draw-point';\nimport { DrawProvider } from './drawing-tools/draw-provider';\nimport { Board } from '../models/board';\nimport { Color } from '../models/pieces/color';\nimport { King } from '../models/pieces/king';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { Coin } from '../models/pieces/coin';\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\nimport { PiecePromotionResolver } from '../piece-promotion/piece-promotion-resolver';\nimport { MoveUtils } from '../utils/move-utils';\nimport { MoveChange } from './outputs/move-change/move-change';\nimport { PieceFactory } from './utils/piece-factory';\n\nexport class EngineFacade extends AbstractEngineFacade {\n    _selected = false;\n    drawPoint: DrawPoint;\n    drawProvider: DrawProvider = new DrawProvider();\n    boardStateProvider: BoardStateProvider;\n    moveStateProvider: MoveStateProvider;\n    moveChange: EventEmitter<MoveChange>;\n\n    private historyMoveCandidate: HistoryMove;\n\n    constructor(board: Board, moveChange: EventEmitter<MoveChange>) {\n        super(board);\n        this.moveChange = moveChange;\n        this.boardLoader = new BoardLoader(this);\n        this.boardLoader.addPieces();\n        this.boardStateProvider = new BoardStateProvider();\n    }\n\n    public reset(): void {\n        this.boardStateProvider.clear();\n        this.moveHistoryProvider.clear();\n        this.boardLoader.addPieces();\n        this.board.reset();\n        this.coords.reset();\n        this.drawProvider.clear();\n        this.pgnProcessor.reset();\n    }\n\n    public undo(): void {\n        if (!this.boardStateProvider.isEmpty()) {\n            const lastBoard = this.boardStateProvider.pop().board;\n            if (this.board.reverted) {\n                lastBoard.reverse();\n            }\n            this.board = lastBoard;\n            this.board.possibleCaptures = [];\n            this.board.possibleMoves = [];\n            this.board.activePiece = null;\n            this.moveHistoryProvider.pop();\n            this.board.calculateFEN();\n            this.pgnProcessor.removeLast();\n        }\n    }\n\n    saveMoveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.moveStateProvider.addMove(new BoardState(clone));\n    }\n\n    public move(coords: string) {\n        if (coords) {\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(0, 2),\n                this.board.reverted,\n            );\n\n            const destIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(2, 4),\n                this.board.reverted,\n            );\n\n            const srcPiece = this.board.getPieceByPoint(\n                sourceIndexes.yAxis,\n                sourceIndexes.xAxis,\n            );\n\n            if (srcPiece) {\n                if (\n                    (this.board.currentWhitePlayer &&\n                        srcPiece.color === Color.BLACK) ||\n                    (!this.board.currentWhitePlayer &&\n                        srcPiece.color === Color.WHITE)\n                ) {\n                    return;\n                }\n\n                this.prepareActivePiece(srcPiece, srcPiece.point);\n\n                if (\n                    this.board.isPointInPossibleMoves(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\n                    ) ||\n                    this.board.isPointInPossibleCaptures(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\n                    )\n                ) {\n                    this.saveClone();\n                    this.movePiece(\n                        srcPiece,\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\n                        coords.length === 5 ? +coords.substring(4, 5) : 0,\n                    );\n\n                    this.board.lastMoveSrc = new Point(\n                        sourceIndexes.yAxis,\n                        sourceIndexes.xAxis,\n                    );\n                    this.board.lastMoveDest = new Point(\n                        destIndexes.yAxis,\n                        destIndexes.xAxis,\n                    );\n\n                    this.disableSelection();\n                } else {\n                    this.disableSelection();\n                }\n            }\n        }\n    }\n\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\n        this.board.activePiece = pieceClicked;\n        this._selected = true;\n        this.board.possibleCaptures = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this.board,\n        ).getPossibleCaptures();\n        this.board.possibleMoves = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this.board,\n        ).getPossibleMoves();\n    }\n\n    onPieceClicked(pieceClicked, pointClicked) {\n        if (\n            (this.board.currentWhitePlayer &&\n                pieceClicked.color === Color.BLACK) ||\n            (!this.board.currentWhitePlayer &&\n                pieceClicked.color === Color.WHITE)\n        ) {\n            return;\n        }\n\n        this.prepareActivePiece(pieceClicked, pointClicked);\n    }\n\n    public handleClickEvent(pointClicked: Point, isMouseDown: boolean) {\n        let moving = false;\n        if (\n            (this.board.isPointInPossibleMoves(pointClicked) ||\n                this.board.isPointInPossibleCaptures(pointClicked) ||\n                this.freeMode) &&\n            pointClicked.isInRange()\n        ) {\n            this.saveClone();\n            this.board.lastMoveSrc = new Point(\n                this.board.activePiece.point.row,\n                this.board.activePiece.point.col,\n            );\n            this.board.lastMoveDest = pointClicked.clone();\n            this.movePiece(this.board.activePiece, pointClicked);\n\n            if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\n                moving = true;\n            }\n        }\n\n        if (isMouseDown || moving) {\n            this.disableSelection();\n        }\n        this.disableSelection();\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col,\n        );\n        if (pieceClicked && !moving) {\n            this.onFreeMode(pieceClicked);\n            this.onPieceClicked(pieceClicked, pointClicked);\n        }\n    }\n\n    onMouseDown(\n        event: MouseEvent,\n        pointClicked: Point,\n        left?: number,\n        top?: number,\n    ) {\n        this.moveDone = false;\n        if (event.button !== 0) {\n            this.drawPoint = ClickUtils.getDrawingPoint(\n                this.heightAndWidth,\n                this.colorStrategy,\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left,\n                top,\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (\n            this.board.activePiece &&\n            pointClicked.isEqual(this.board.activePiece.point)\n        ) {\n            this.disabling = true;\n            return;\n        }\n\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col,\n        );\n\n        if (this.freeMode) {\n            if (pieceClicked) {\n                if (event.ctrlKey) {\n                    this.board.pieces = this.board.pieces.filter(\n                        (e) => e !== pieceClicked,\n                    );\n                    return;\n                }\n                this.board.currentWhitePlayer =\n                    pieceClicked.color === Color.WHITE;\n            }\n        }\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, true);\n        } else {\n            if (pieceClicked) {\n                this.onFreeMode(pieceClicked);\n                this.onPieceClicked(pieceClicked, pointClicked);\n            }\n        }\n    }\n\n    onMouseUp(\n        event: MouseEvent,\n        pointClicked: Point,\n        left: number,\n        top: number,\n    ) {\n        this.moveDone = false;\n        if (event.button !== 0 && !this.drawDisabled) {\n            this.addDrawPoint(\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left,\n                top,\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (this.dragDisabled) {\n            return;\n        }\n\n        if (\n            this.board.activePiece &&\n            pointClicked.isEqual(this.board.activePiece.point) &&\n            this.disabling\n        ) {\n            this.disableSelection();\n            this.disabling = false;\n            return;\n        }\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col,\n        );\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, false);\n            //   this.possibleMoves = activePiece.getPossibleMoves();\n        }\n    }\n\n    saveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.boardStateProvider.addMove(new BoardState(clone));\n    }\n\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\n        const destPiece = this.board.pieces.find(\n            (piece) =>\n                piece.point.col === newPoint.col &&\n                piece.point.row === newPoint.row,\n        );\n\n        this.pgnProcessor.process(this.board, toMovePiece, newPoint, destPiece);\n\n        if (destPiece && toMovePiece.color !== destPiece.color) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== destPiece,\n            );\n        } else {\n            if (destPiece && toMovePiece.color === destPiece.color) {\n                return;\n            }\n        }\n\n        this.historyMoveCandidate = new HistoryMove(\n            MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted),\n            toMovePiece.constant.name,\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\n            !!destPiece,\n        );\n        this.moveHistoryProvider.addMove(this.historyMoveCandidate);\n\n        if (toMovePiece instanceof King) {\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\n            if (squaresMoved > 1) {\n                if (newPoint.col < 3) {\n                    const leftRook = this.board.getPieceByField(\n                        toMovePiece.point.row,\n                        0,\n                    );\n                    if (!this.freeMode) {\n                        leftRook.point.col = this.board.reverted ? 2 : 3;\n                    }\n                } else {\n                    const rightRook = this.board.getPieceByField(\n                        toMovePiece.point.row,\n                        7,\n                    );\n                    if (!this.freeMode) {\n                        rightRook.point.col = this.board.reverted ? 4 : 5;\n                    }\n                }\n            }\n        }\n\n        if (toMovePiece instanceof Pawn) {\n            this.board.checkIfPawnTakesEnPassant(newPoint);\n            this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\n        } else {\n            this.board.enPassantPoint = null;\n            this.board.enPassantPiece = null;\n        }\n\n        toMovePiece.point = newPoint;\n        this.increaseFullMoveCount();\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\n\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\n            this.afterMoveActions();\n        }\n    }\n\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\n        if (!(toPromotePiece instanceof Pawn)) {\n            return;\n        }\n\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== toPromotePiece,\n            );\n\n            // When we make move manually, we pass promotion index already, so we don't need\n            // to acquire it from promote dialog\n            if (!promotionIndex) {\n                this.openPromoteDialog(toPromotePiece);\n            } else {\n                PiecePromotionResolver.resolvePromotionChoice(\n                    this.board,\n                    toPromotePiece,\n                    promotionIndex,\n                );\n                this.afterMoveActions(promotionIndex);\n            }\n\n            return true;\n        }\n    }\n\n    afterMoveActions(promotionIndex?: number) {\n        this.checkIfPawnFirstMove(this.board.activePiece);\n        this.checkIfRookMoved(this.board.activePiece);\n        this.checkIfKingMoved(this.board.activePiece);\n\n        this.board.blackKingChecked = this.board.isKingInCheck(\n            Color.BLACK,\n            this.board.pieces,\n        );\n        this.board.whiteKingChecked = this.board.isKingInCheck(\n            Color.WHITE,\n            this.board.pieces,\n        );\n        const check =\n            this.board.blackKingChecked || this.board.whiteKingChecked;\n        const checkmate =\n            this.checkForPossibleMoves(Color.BLACK) ||\n            this.checkForPossibleMoves(Color.WHITE);\n        const stalemate =\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\n\n        this.historyMoveCandidate.setGameStates(check, stalemate, checkmate);\n        this.pgnProcessor.processChecks(checkmate, check, stalemate);\n        this.pgnProcessor.addPromotionChoice(promotionIndex);\n\n        this.disabling = false;\n        this.board.calculateFEN();\n\n        const lastMove = this.moveHistoryProvider.getLastMove();\n        if (lastMove && promotionIndex) {\n            lastMove.move += promotionIndex;\n        }\n\n        this.moveChange.emit({\n            ...lastMove,\n            check,\n            checkmate,\n            stalemate,\n            fen: this.board.fen,\n            pgn: {\n                pgn: this.pgnProcessor.getPGN(),\n            },\n            freeMode: this.freeMode,\n        });\n\n        this.moveDone = true;\n    }\n\n    checkForPat(color: Color) {\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\n            return this.checkForPossibleMoves(color);\n        } else {\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\n                return this.checkForPossibleMoves(color);\n            }\n        }\n    }\n\n    openPromoteDialog(piece: Piece) {\n        if (piece.color === this.board.activePiece.color) {\n            this.modal.open((index) => {\n                PiecePromotionResolver.resolvePromotionChoice(\n                    this.board,\n                    piece,\n                    index,\n                );\n                this.afterMoveActions(index);\n            });\n        }\n    }\n\n    checkForPossibleMoves(color: Color): boolean {\n        return !this.board.pieces\n            .filter((piece) => piece.color === color)\n            .some(\n                (piece) =>\n                    piece\n                        .getPossibleMoves()\n                        .some(\n                            (move) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    move.row,\n                                    move.col,\n                                    this.board,\n                                ),\n                        ) ||\n                    piece\n                        .getPossibleCaptures()\n                        .some(\n                            (capture) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    capture.row,\n                                    capture.col,\n                                    this.board,\n                                ),\n                        ),\n            );\n    }\n\n    disableSelection() {\n        this._selected = false;\n        this.board.possibleCaptures = [];\n        this.board.activePiece = null;\n        this.board.possibleMoves = [];\n    }\n\n    /**\n     * Processes logic to allow freeMode based logic processing\n     */\n    onFreeMode(pieceClicked) {\n        if (\n            !this.freeMode ||\n            pieceClicked === undefined ||\n            pieceClicked === null\n        ) {\n            return;\n        }\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\n    }\n\n    isPieceDisabled(pieceClicked: Piece) {\n        if (pieceClicked && pieceClicked.point) {\n            const foundCapture = this.board.possibleCaptures.find(\n                (capture) =>\n                    capture.col === pieceClicked.point.col &&\n                    capture.row === pieceClicked.point.row,\n            );\n\n            if (foundCapture) {\n                return false;\n            }\n        }\n        return (\n            pieceClicked &&\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\n        );\n    }\n\n    addDrawPoint(\n        x: number,\n        y: number,\n        crtl: boolean,\n        alt: boolean,\n        shift: boolean,\n        left: number,\n        top: number,\n    ) {\n        const upPoint = ClickUtils.getDrawingPoint(\n            this.heightAndWidth,\n            this.colorStrategy,\n            x,\n            y,\n            crtl,\n            alt,\n            shift,\n            left,\n            top,\n        );\n\n        if (this.drawPoint.isEqual(upPoint)) {\n            const circle = new Circle();\n            circle.drawPoint = upPoint;\n            if (!this.drawProvider.containsCircle(circle)) {\n                this.drawProvider.addCircle(circle);\n            } else {\n                this.drawProvider.reomveCircle(circle);\n            }\n        } else {\n            const arrow = new Arrow();\n            arrow.start = this.drawPoint;\n            arrow.end = upPoint;\n\n            if (!this.drawProvider.containsArrow(arrow)) {\n                this.drawProvider.addArrow(arrow);\n            } else {\n                this.drawProvider.removeArrow(arrow);\n            }\n        }\n    }\n\n    increaseFullMoveCount() {\n        if (!this.board.currentWhitePlayer) {\n            ++this.board.fullMoveCount;\n        }\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string,\n    ) {\n        if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\n            let indexes = MoveUtils.translateCoordsToIndex(\n                coords,\n                this.board.reverted,\n            );\n            let existing = this.board.getPieceByPoint(\n                indexes.yAxis,\n                indexes.xAxis,\n            );\n            if (existing) {\n                this.board.pieces = this.board.pieces.filter(\n                    (e) => e !== existing,\n                );\n            }\n            let createdPiece = PieceFactory.create(\n                indexes,\n                pieceTypeInput,\n                colorInput,\n                this.board,\n            );\n            this.saveClone();\n            this.board.pieces.push(createdPiece);\n            this.afterMoveActions();\n        }\n    }\n}\n","import { cloneDeep } from 'lodash';\nimport { Bishop } from './pieces/bishop';\nimport { Coin } from './pieces/coin';\nimport { Color } from './pieces/color';\nimport { King } from './pieces/king';\nimport { Knight } from './pieces/knight';\nimport { Pawn } from './pieces/pawn';\nimport { Piece } from './pieces/piece';\nimport { Point } from './pieces/point';\nimport { Queen } from './pieces/queen';\nimport { Rook } from './pieces/rook';\n\nexport class Board {\n    board: number[][] = [];\n    pieces: Piece[] = [];\n\n    enPassantPoint: Point = null;\n    enPassantPiece: Piece = null;\n    lastMoveSrc: Point = null;\n    lastMoveDest: Point = null;\n    activePiece: Piece;\n\n    blackKingChecked: boolean;\n    possibleCaptures: any[] = [];\n    possibleMoves: Point[] = [];\n    whiteKingChecked: boolean;\n\n    currentWhitePlayer = true;\n    reverted = false;\n    fullMoveCount = 1;\n    fen: string;\n\n    constructor() {\n        for (let i = 0; i < 8; ++i) {\n            this.board[i] = [];\n            for (let j = 0; j < 8; ++j) {\n                this.board[i][j] = 0;\n            }\n        }\n    }\n\n    isXYInPossibleMoves(row: number, col: number): boolean {\n        return this.possibleMoves.some(\n            (move) => move.row === row && move.col === col,\n        );\n    }\n\n    isXYInPossibleCaptures(row: number, col: number): boolean {\n        return this.possibleCaptures.some(\n            (capture) => capture.row === row && capture.col === col,\n        );\n    }\n\n    isXYInSourceMove(i: number, j: number) {\n        return (\n            this.lastMoveSrc &&\n            this.lastMoveSrc.row === i &&\n            this.lastMoveSrc.col === j\n        );\n    }\n\n    isXYInDestMove(i: number, j: number) {\n        return (\n            this.lastMoveDest &&\n            this.lastMoveDest.row === i &&\n            this.lastMoveDest.col === j\n        );\n    }\n\n    isXYInActiveMove(i: number, j: number) {\n        return (\n            this.activePiece &&\n            this.activePiece.point.row === i &&\n            this.activePiece.point.col === j\n        );\n    }\n\n    isPointInPossibleMoves(point: Point): boolean {\n        return this.possibleMoves.some(\n            (move) => move.row === point.row && move.col === point.col,\n        );\n    }\n\n    isPointInPossibleCaptures(point: Point): boolean {\n        return this.possibleCaptures.some(\n            (capture) => capture.row === point.row && capture.col === point.col,\n        );\n    }\n\n    reset() {\n        this.lastMoveDest = null;\n        this.lastMoveSrc = null;\n        this.whiteKingChecked = false;\n        this.blackKingChecked = false;\n        this.possibleCaptures = [];\n        this.possibleMoves = [];\n        this.activePiece = null;\n        this.reverted = false;\n        this.currentWhitePlayer = true;\n        this.enPassantPoint = null;\n        this.enPassantPiece = null;\n        this.fullMoveCount = 1;\n        this.calculateFEN();\n    }\n\n    reverse() {\n        this.reverted = !this.reverted;\n        this.activePiece = null;\n        this.possibleMoves = [];\n        this.possibleCaptures = [];\n\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\n\n        this.reversePoint(this.lastMoveSrc);\n        this.reversePoint(this.lastMoveDest);\n\n        if (this.enPassantPoint && this.enPassantPiece) {\n            this.reversePoint(this.enPassantPoint);\n        }\n    }\n\n    clone(): Board {\n        return cloneDeep(this);\n    }\n\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return this.pieces.some(\n            (piece) =>\n                piece.point.col === col &&\n                piece.point.row === row &&\n                piece.color === enemyColor,\n        );\n    }\n\n    isFieldEmpty(row: number, col: number): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return !this.pieces.some(\n            (piece) => piece.point.col === col && piece.point.row === row,\n        );\n    }\n\n    isFieldUnderAttack(row: number, col: number, color: Color) {\n        return this.pieces\n            .filter((piece) => piece.color === color)\n            .some((piece) =>\n                piece\n                    .getCoveredFields()\n                    .some((field) => field.col === col && field.row === row),\n            );\n    }\n\n    getPieceByField(row: number, col: number): Piece {\n        if (this.isFieldEmpty(row, col)) {\n            //   throw new Error('Piece not found');\n            return undefined;\n        }\n\n        return this.pieces.find(\n            (piece) => piece.point.col === col && piece.point.row === row,\n        );\n    }\n\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\n        const king = pieces.find(\n            (piece) => piece.color === color && piece instanceof King,\n        );\n\n        if (king) {\n            return pieces.some(\n                (piece) =>\n                    piece\n                        .getPossibleCaptures()\n                        .some(\n                            (point) =>\n                                point.col === king.point.col &&\n                                point.row === king.point.row,\n                        ) && piece.color !== color,\n            );\n        }\n        return false;\n    }\n\n    getKingByColor(color: Color): King {\n        return this.pieces.find(\n            (piece) => piece instanceof King && piece.color === color,\n        ) as King;\n    }\n\n    getCastleFENString(color: Color) {\n        const king = this.getKingByColor(color);\n\n        if (!king || king.isMovedAlready) {\n            return '';\n        }\n\n        let fen = '';\n        const leftRook = this.getPieceByField(king.point.row, 0);\n        const rightRook = this.getPieceByField(king.point.row, 7);\n\n        if (rightRook instanceof Rook && rightRook.color === color) {\n            if (!rightRook.isMovedAlready) {\n                fen += this.reverted ? 'q' : 'k';\n            }\n        }\n\n        if (leftRook instanceof Rook && leftRook.color === color) {\n            if (!leftRook.isMovedAlready) {\n                fen += this.reverted ? 'k' : 'q';\n            }\n        }\n\n        fen = fen.split('').sort().join('');\n        return color === Color.BLACK ? fen : fen.toUpperCase();\n    }\n\n    getEnPassantFENString() {\n        if (this.enPassantPoint) {\n            if (this.reverted) {\n                return (\n                    String.fromCharCode(104 - this.enPassantPoint.col) +\n                    (this.enPassantPoint.row + 1)\n                );\n            } else {\n                return (\n                    String.fromCharCode(97 + this.enPassantPoint.col) +\n                    (Math.abs(this.enPassantPoint.row - 7) + 1)\n                );\n            }\n        } else {\n            return '-';\n        }\n    }\n\n    calculateFEN() {\n        let fen = '';\n        for (let i = 0; i < 8; ++i) {\n            let emptyFields = 0;\n            for (let j = 0; j < 8; ++j) {\n                const foundPiece = this.pieces.find(\n                    (piece) => piece.point.col === j && piece.point.row === i,\n                );\n                if (foundPiece) {\n                    if (emptyFields > 0) {\n                        fen += emptyFields;\n                        emptyFields = 0;\n                    }\n\n                    if (foundPiece instanceof Rook) {\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\n                    } else {\n                        if (foundPiece instanceof Knight) {\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\n                        } else {\n                            if (foundPiece instanceof Bishop) {\n                                fen +=\n                                    foundPiece.color === Color.BLACK\n                                        ? 'b'\n                                        : 'B';\n                            } else {\n                                if (foundPiece instanceof Queen) {\n                                    fen +=\n                                        foundPiece.color === Color.BLACK\n                                            ? 'q'\n                                            : 'Q';\n                                } else {\n                                    if (foundPiece instanceof King) {\n                                        fen +=\n                                            foundPiece.color === Color.BLACK\n                                                ? 'k'\n                                                : 'K';\n                                    } else {\n                                        if (foundPiece instanceof Pawn) {\n                                            fen +=\n                                                foundPiece.color === Color.BLACK\n                                                    ? 'p'\n                                                    : 'P';\n                                        } else {\n                                            if (foundPiece instanceof Coin) {\n                                                fen +=\n                                                    foundPiece.color ===\n                                                    Color.BLACK\n                                                        ? 'c'\n                                                        : 'C';\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    ++emptyFields;\n                }\n            }\n\n            if (emptyFields > 0) {\n                fen += emptyFields;\n            }\n\n            fen += '/';\n        }\n\n        fen = fen.substr(0, fen.length - 1);\n\n        if (this.reverted) {\n            fen = fen.split('').reverse().join('');\n        }\n\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\n        if (!concatedEnPassant) {\n            concatedEnPassant = '-';\n        }\n\n        fen += ' ' + concatedEnPassant;\n        fen += ' ' + this.getEnPassantFENString();\n        fen += ' ' + 0;\n        fen += ' ' + this.fullMoveCount;\n        this.fen = fen;\n    }\n\n    isXYInPointSelection(i: number, j: number) {\n        return false;\n    }\n\n    private reversePoint(point: Point) {\n        if (point) {\n            point.row = Math.abs(point.row - 7);\n            point.col = Math.abs(point.col - 7);\n        }\n    }\n\n    public getPieceByPoint(row: number, col: number): Piece {\n        row = Math.floor(row);\n        col = Math.floor(col);\n        return this.pieces.find(\n            (piece) => piece.point.col === col && piece.point.row === row,\n        );\n    }\n\n    public checkIfPawnTakesEnPassant(newPoint: Point) {\n        if (newPoint.isEqual(this.enPassantPoint)) {\n            this.pieces = this.pieces.filter(\n                (piece) => piece !== this.enPassantPiece,\n            );\n            this.enPassantPoint = null;\n            this.enPassantPiece = null;\n        }\n    }\n\n    public checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\n            this.enPassantPiece = piece;\n            this.enPassantPoint = new Point(\n                (piece.point.row + newPoint.row) / 2,\n                piece.point.col,\n            );\n        } else {\n            this.enPassantPoint = null;\n            this.enPassantPiece = null;\n        }\n    }\n\n    isKingChecked(piece: Piece) {\n        if (piece instanceof King) {\n            return piece.color === Color.WHITE\n                ? this.whiteKingChecked\n                : this.blackKingChecked;\n        }\n    }\n\n    getCurrentPlayerColor(): number {\n        return this.currentWhitePlayer ? Color.WHITE : Color.BLACK;\n    }\n}\n","<div #myModal class=\"container\">\n    <div class=\"wrapper\">\n        <div class=\"content\">\n            <div class=\"piece-wrapper\" *ngIf=\"pieceIconInput\">\n                <div class=\"piece\" (click)=\"changeSelection(1)\">\n                    <img [src]=\"getPieceIcon('queen')\" alt=\"Queen\">\n                </div>\n                <div class=\"piece\" (click)=\"changeSelection(2)\">\n                    <img [src]=\"getPieceIcon('rook')\" alt=\"Rook\">\n                </div>\n                <div class=\"piece\" (click)=\"changeSelection(3)\">\n                    <img [src]=\"getPieceIcon('bishop')\" alt=\"Bishop\">\n                </div>\n                <div class=\"piece\" (click)=\"changeSelection(4)\">\n                    <img [src]=\"getPieceIcon('knight')\" alt=\"Knight\">\n                </div>\n            </div>\n            <div class=\"piece-wrapper\" *ngIf=\"!pieceIconInput\">\n                <div class=\"piece\" (click)=\"changeSelection(1)\">&#x265B;</div>\n                <div class=\"piece\" (click)=\"changeSelection(2)\">&#x265C;</div>\n                <div class=\"piece\" (click)=\"changeSelection(3)\">&#x265D;</div>\n                <div class=\"piece\" (click)=\"changeSelection(4)\">&#x265E;</div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { PieceIconInput } from '../../utils/inputs/piece-icon-input';\n\n@Component({\n    selector: 'app-piece-promotion-modal',\n    templateUrl: './piece-promotion-modal.component.html',\n    styleUrls: ['./piece-promotion-modal.component.scss'],\n    standalone: true,\n    imports: [CommonModule, DragDropModule], // Add it to imports\n})\nexport class PiecePromotionModalComponent {\n    @ViewChild('myModal', { static: false }) modal: ElementRef;\n\n    @Input()\n    pieceIconInput: PieceIconInput;\n\n    @Input()\n    color = 'white';\n\n    opened = false;\n    private onCloseCallback: (index: number) => void;\n\n    open(closeCallback: (index: number) => void) {\n        this.opened = true;\n        this.onCloseCallback = closeCallback;\n        this.modal.nativeElement.style.display = 'block';\n    }\n\n    changeSelection(index: number) {\n        this.modal.nativeElement.style.display = 'none';\n        this.opened = false;\n        this.onCloseCallback(index);\n    }\n\n    getPieceIcon(piece: string): string {\n        let coloredPiece = '';\n        switch (piece.toLowerCase()) {\n            case 'queen':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteQueenUrl\n                        : this.pieceIconInput.blackQueenUrl;\n                break;\n            case 'rook':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteRookUrl\n                        : this.pieceIconInput.blackRookUrl;\n                break;\n            case 'bishop':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteBishopUrl\n                        : this.pieceIconInput.blackBishopUrl;\n                break;\n            case 'knight':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteKnightUrl\n                        : this.pieceIconInput.blackKnightUrl;\n                break;\n            case 'coin':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteCoinUrl\n                        : this.pieceIconInput.blackCoinUrl;\n                break;\n        }\n\n        return coloredPiece;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class NgxChessBoardService {\n    private componentMethodCallSource = new Subject<any>();\n\n    componentMethodCalled$ = this.componentMethodCallSource.asObservable();\n\n    reset() {\n        this.componentMethodCallSource.next();\n    }\n}\n","<div\n    id=\"board\"\n    [style.height.px]=\"engineFacade.heightAndWidth\"\n    [style.width.px]=\"engineFacade.heightAndWidth\"\n    (pointerdown)=\"!modal.opened && onMouseDown($event)\"\n    (pointerup)=\"!modal.opened && onMouseUp($event)\"\n    #boardRef\n>\n    <div id=\"drag\">\n        <div\n            [cdkDragDisabled]=\"engineFacade.dragDisabled\"\n            (cdkDragEnded)=\"dragEnded($event)\"\n            (cdkDragMoved)=\"dragMoved($event)\"\n            (cdkDragStarted)=\"dragStart($event)\"\n            class=\"single-piece\" [innerHTML]=\"engineFacade.pieceIconManager.isDefaultIcons() ? piece.constant.icon : ''\"\n            [ngStyle]=\"engineFacade.pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(piece)\"\n            [style.transform]=\"'translate3d(' + piece.point.col * pieceSize + 'px, ' + piece.point.row * pieceSize + 'px,0px)'\"\n            [style.max-height]=\"pieceSize + 'px'\"\n            [style.font-size]=\"pieceSize * 0.8 + 'px'\"\n            [style.width]=\"pieceSize + 'px'\"\n            [style.height]=\"pieceSize + 'px'\"\n            cdkDrag\n            *ngFor=\"let piece of engineFacade.board.pieces; let i = index\"\n        >\n        </div>\n        <div\n            class=\"board-row\"\n            *ngFor=\"let row of engineFacade.board.board; let i = index\"\n        >\n            <div\n                class=\"board-col\"\n                [class.current-selection]=\"showActivePiece && engineFacade.board.isXYInActiveMove(i,j)\"\n                [class.king-check]=\" engineFacade.board.isKingChecked(engineFacade.board.getPieceByPoint(i,j))\"\n                [class.point-circle]=\"engineFacade.board.isXYInPointSelection(i, j)\"\n                [class.possible-capture]=\"showPossibleCaptures && engineFacade.board.isXYInPossibleCaptures(i, j)\"\n                [class.possible-point]=\"engineFacade.board.isXYInPossibleMoves(i, j) && showLegalMoves\"\n                [style.background-color]=\"getTileBackgroundColor(i, j)\"\n                *ngFor=\"let col of row; let j = index\"\n            >\n                <span\n                    class=\"yCoord\"\n                    [style.color]=\"(i % 2 === 0) ? lightTileColor : darkTileColor\"\n                    [style.font-size.px]=\"pieceSize / 4\"\n                    *ngIf=\"showCoords && j === 7\"\n                >\n                    {{engineFacade.coords.yCoords[i]}}\n                </span>\n                <span\n                    class=\"xCoord\"\n                    [style.color]=\"(j % 2 === 0) ? lightTileColor : darkTileColor\"\n                    [style.font-size.px]=\"pieceSize / 4\"\n                    *ngIf=\"showCoords && i === 7\"\n                >\n                    {{engineFacade.coords.xCoords[j]}}\n                </span>\n                <div\n                    *ngIf=\"engineFacade.board.getPieceByPoint(i, j) as piece\"\n                    style=\"height:100%; width:100%\"\n                >\n                    <div\n                        [ngClass]=\"'piece'\"\n                        [style.font-size]=\"pieceSize + 'px'\"\n\n                    >\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <svg\n        [attr.height]=\"engineFacade.heightAndWidth\"\n        [attr.width]=\"engineFacade.heightAndWidth\"\n        style=\"position:absolute; top:0; pointer-events: none\"\n    >\n        <defs *ngFor=\"let color of ['red', 'green', 'blue', 'orange']\">\n            <marker\n                [id]=\"color + 'Arrow'\"\n                markerHeight=\"13\"\n                markerWidth=\"13\"\n                orient=\"auto\"\n                refX=\"9\"\n                refY=\"6\"\n            >\n                <path\n                    [style.fill]=\"color\"\n                    d=\"M2,2 L2,11 L10,6 L2,2\"\n                ></path>\n            </marker>\n        </defs>\n        <line\n            class=\"arrow\"\n            [attr.marker-end]=\"'url(#' + arrow.end.color + 'Arrow)'\"\n            [attr.stroke]=\"arrow.end.color\"\n            [attr.x1]=\"arrow.start.x\"\n            [attr.x2]=\"arrow.end.x\"\n            [attr.y1]=\"arrow.start.y\"\n            [attr.y2]=\"arrow.end.y\"\n            *ngFor=\"let arrow of engineFacade.drawProvider.arrows$ | async\"\n        ></line>\n        <circle\n            [attr.cx]=\"circle.drawPoint.x\"\n            [attr.cy]=\"circle.drawPoint.y\"\n            [attr.r]=\"engineFacade.heightAndWidth / 18\"\n            [attr.stroke]=\"circle.drawPoint.color\"\n            *ngFor=\"let circle of engineFacade.drawProvider.circles$ | async\"\n            fill-opacity=\"0.0\"\n            stroke-width=\"2\"\n        ></circle>\n    </svg>\n    <app-piece-promotion-modal #modal\n                               [pieceIconInput]=\"engineFacade.pieceIconManager.pieceIconInput\"\n                               [color]=\"engineFacade.board.getCurrentPlayerColor() ? 'white' : 'black'\"></app-piece-promotion-modal>\n</div>\n","import {\n    CdkDragEnd,\n    CdkDragMove,\n    CdkDragStart,\n    DragDropModule,\n} from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { AbstractEngineFacade } from './engine/abstract-engine-facade';\nimport { BoardLoader } from './engine/board-state-provider/board-loader/board-loader';\nimport {\n    NotationProcessorFactory,\n    NotationType,\n} from './engine/board-state-provider/board-loader/notation-processors/notation-processor-factory';\nimport { ClickUtils } from './engine/click/click-utils';\nimport { EngineFacade } from './engine/engine-facade';\nimport { MoveChange } from './engine/outputs/move-change/move-change';\nimport { HistoryMove } from './history-move-provider/history-move';\nimport { Board } from './models/board';\nimport { Piece } from './models/pieces/piece';\nimport { NgxChessBoardView } from './ngx-chess-board-view';\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\nimport { Constants } from './utils/constants';\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\nimport { ColorInput, PieceTypeInput } from './utils/inputs/piece-type-input';\n\n@Component({\n    selector: 'ngx-chess-board',\n    templateUrl: './ngx-chess-board.component.html',\n    styleUrls: ['./ngx-chess-board.component.scss'],\n    standalone: true,\n    imports: [CommonModule, DragDropModule, PiecePromotionModalComponent], // Ensure CommonModule and DragDropModule are imported\n})\nexport class NgxChessBoardComponent\n    implements OnInit, OnChanges, NgxChessBoardView, AfterViewInit\n{\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\n    @Input() showCoords = true;\n    @Input() sourcePointColor: string = Constants.DEFAULT_SOURCE_POINT_COLOR;\n    @Input() destinationPointColor: string =\n        Constants.DEFAULT_DESTINATION_POINT_COLOR;\n    @Input() legalMovesPointColor: string =\n        Constants.DEFAULT_LEGAL_MOVE_POINT_COLOR;\n    @Input() showLastMove = true;\n    @Input() showLegalMoves = true;\n    @Input() showActivePiece = true;\n    @Input() showPossibleCaptures = true;\n    /**\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\n     */\n    @Output() moveChange = new EventEmitter<MoveChange>();\n    @Output() checkmate = new EventEmitter<void>();\n    @Output() stalemate = new EventEmitter<void>();\n\n    @ViewChild('boardRef')\n    boardRef: ElementRef;\n    @ViewChild('modal')\n    modal: PiecePromotionModalComponent;\n\n    pieceSize: number;\n    selected = false;\n    boardLoader: BoardLoader;\n    pieceIconManager: PieceIconInputManager;\n    isDragging = false;\n    startTransition = '';\n\n    engineFacade: AbstractEngineFacade;\n\n    constructor(private ngxChessBoardService: NgxChessBoardService) {\n        this.engineFacade = new EngineFacade(new Board(), this.moveChange);\n    }\n\n    @Input('size')\n    public set size(size: number) {\n        if (\n            size &&\n            size >= Constants.MIN_BOARD_SIZE &&\n            size <= Constants.MAX_BOARD_SIZE\n        ) {\n            this.engineFacade.heightAndWidth = size;\n        } else {\n            this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\n        }\n        this.engineFacade.drawProvider.clear();\n        this.calculatePieceSize();\n    }\n\n    @Input('freeMode')\n    public set freeMode(freeMode: boolean) {\n        this.engineFacade.freeMode = freeMode;\n    }\n\n    @Input('dragDisabled')\n    public set dragDisabled(dragDisabled: boolean) {\n        this.engineFacade.dragDisabled = dragDisabled;\n    }\n\n    @Input('drawDisabled')\n    public set drawDisabled(drawDisabled: boolean) {\n        this.engineFacade.drawDisabled = drawDisabled;\n    }\n\n    @Input('pieceIcons')\n    public set pieceIcons(pieceIcons: PieceIconInput) {\n        this.engineFacade.pieceIconManager.pieceIconInput = pieceIcons;\n    }\n\n    @Input('lightDisabled')\n    public set lightDisabled(lightDisabled: boolean) {\n        this.engineFacade.lightDisabled = lightDisabled;\n    }\n\n    @Input('darkDisabled')\n    public set darkDisabled(darkDisabled: boolean) {\n        this.engineFacade.darkDisabled = darkDisabled;\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onRightClick(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (\n            (changes.lightDisabled &&\n                this.lightDisabled &&\n                this.engineFacade.board.currentWhitePlayer) ||\n            (changes.darkDisabled &&\n                this.darkDisabled &&\n                !this.engineFacade.board.currentWhitePlayer)\n        ) {\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n        }\n    }\n\n    ngOnInit() {\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\n            this.engineFacade.reset();\n        });\n    }\n\n    ngAfterViewInit(): void {\n        this.engineFacade.modal = this.modal;\n        this.calculatePieceSize();\n    }\n\n    onMouseUp(event: MouseEvent) {\n        this.engineFacade.onMouseUp(\n            event,\n            this.getClickPoint(event),\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().top,\n        );\n    }\n\n    reverse(): void {\n        this.selected = false;\n        this.engineFacade.board.reverse();\n        this.engineFacade.coords.reverse();\n    }\n\n    updateBoard(board: Board) {\n        this.engineFacade.board = board;\n        this.boardLoader.setEngineFacade(this.engineFacade);\n        this.engineFacade.board.possibleCaptures = [];\n        this.engineFacade.board.possibleMoves = [];\n    }\n\n    setFEN(fen: string): void {\n        try {\n            this.engineFacade.boardLoader.setNotationProcessor(\n                NotationProcessorFactory.getProcessor(NotationType.FEN),\n            );\n            this.engineFacade.boardLoader.loadFEN(fen);\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n            this.engineFacade.coords.reset();\n        } catch (exception) {\n            this.engineFacade.boardLoader.addPieces();\n        }\n    }\n\n    setPGN(pgn: string): void {\n        try {\n            this.engineFacade.pgnProcessor.reset();\n            this.engineFacade.boardLoader.setNotationProcessor(\n                NotationProcessorFactory.getProcessor(NotationType.PGN),\n            );\n            this.engineFacade.boardLoader.loadPGN(pgn);\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n            this.engineFacade.coords.reset();\n        } catch (exception) {\n            console.log(exception);\n            this.engineFacade.boardLoader.addPieces();\n        }\n    }\n\n    getFEN(): string {\n        return this.engineFacade.board.fen;\n    }\n\n    dragEnded(event: CdkDragEnd): void {\n        this.isDragging = false;\n        this.engineFacade.dragEndStrategy.process(\n            event,\n            this.engineFacade.moveDone,\n            this.startTransition,\n        );\n    }\n\n    dragStart(event: CdkDragStart): void {\n        this.isDragging = true;\n        let trans = event.source.getRootElement().style.transform.split(') ');\n        //   this.startTrans= trans;\n        this.startTransition = trans.length === 2 ? trans[1] : trans[0];\n        this.engineFacade.dragStartStrategy.process(event);\n    }\n\n    onMouseDown(event: MouseEvent) {\n        this.engineFacade.onMouseDown(\n            event,\n            this.getClickPoint(event),\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().top,\n        );\n    }\n\n    getClickPoint(event) {\n        return ClickUtils.getClickPoint(\n            event,\n            this.boardRef.nativeElement.getBoundingClientRect().top,\n            this.boardRef.nativeElement.getBoundingClientRect().height,\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().width,\n        );\n    }\n\n    private calculatePieceSize() {\n        this.pieceSize = this.engineFacade.heightAndWidth / 8;\n    }\n\n    getCustomPieceIcons(piece: Piece) {\n        return JSON.parse(\n            `{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(\n                piece,\n            )}')\"}`,\n        );\n    }\n\n    move(coords: string): void {\n        this.engineFacade.move(coords);\n    }\n\n    getMoveHistory(): HistoryMove[] {\n        return this.engineFacade.getMoveHistory();\n    }\n\n    reset(): void {\n        this.engineFacade.reset();\n    }\n\n    undo(): void {\n        this.engineFacade.undo();\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string,\n    ) {\n        this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\n    }\n\n    getPGN() {\n        return this.engineFacade.pgnProcessor.getPGN();\n    }\n\n    dragMoved($event: CdkDragMove<any>) {\n        let x =\n            $event.pointerPosition.x -\n            $event.source.getRootElement().parentElement.getBoundingClientRect()\n                .left -\n            this.pieceSize / 2;\n        let y =\n            $event.pointerPosition.y -\n            $event.source.getRootElement().parentElement.getBoundingClientRect()\n                .top -\n            this.pieceSize / 2;\n        $event.source.getRootElement().style.transform =\n            'translate3d(' + x + 'px, ' + y + 'px,0px)';\n    }\n\n    getTileBackgroundColor(i, j): string {\n        let color =\n            (i + j) % 2 === 0 ? this.lightTileColor : this.darkTileColor;\n\n        if (this.showLastMove) {\n            if (this.engineFacade.board.isXYInSourceMove(i, j)) {\n                color = this.sourcePointColor;\n            }\n\n            if (this.engineFacade.board.isXYInDestMove(i, j)) {\n                color = this.destinationPointColor;\n            }\n        }\n\n        return color;\n    }\n}\n","/*\n * Public API Surface of ngx-chess-board\n */\n\nexport * from './lib/history-move-provider/history-move';\nexport * from './lib/utils/inputs/piece-icon-input';\n\nexport * from './lib/ngx-chess-board.component';\nexport * from './lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\n\nexport * from './lib/ngx-chess-board-view';\nexport * from './lib/service/ngx-chess-board.service';\nexport * from './lib/service/ngx-chess-board.service';\nexport * from './lib/engine/outputs/move-change/move-change';\n\n/*\n * Public API Surface of im-grid\n */\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["DefaultPgnProcessor","i1.NgxChessBoardService"],"mappings":"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"}