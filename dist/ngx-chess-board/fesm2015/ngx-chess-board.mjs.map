{"version":3,"file":"ngx-chess-board.mjs","sources":["../../../projects/ngx-chess-board/src/lib/models/pieces/color.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/piece.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/point.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/rook.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/king.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/bishop.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/knight.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/pawn.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/queen.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/coin.ts","../../../projects/ngx-chess-board/src/lib/utils/unicode-constants.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/fen-loader/default-fen-processor.ts","../../../projects/ngx-chess-board/src/lib/models/move-translation.ts","../../../projects/ngx-chess-board/src/lib/utils/move-utils.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/default-pieces-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/pgn-loader/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/notation-processor-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-point.ts","../../../projects/ngx-chess-board/src/lib/engine/click/click-utils.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move-provider.ts","../../../projects/ngx-chess-board/src/lib/utils/constants.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-icon-input-manager.ts","../../../projects/ngx-chess-board/src/lib/engine/coords/coords-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/animation-drag-end-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/drag-end-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/animation-drag-start-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/drag-start-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/default-color-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/color-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/abstract-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/abstract-engine-facade.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/board-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/arrow.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/circle.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/piece-abstract-decorator.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/available-move-decorator.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-resolver.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-type-input.ts","../../../projects/ngx-chess-board/src/lib/engine/utils/piece-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/engine-facade.ts","../../../projects/ngx-chess-board/src/lib/models/board.ts","../../../projects/ngx-chess-board/src/lib/service/ngx-chess-board.service.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.html","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.module.ts","../../../projects/ngx-chess-board/src/public-api.ts","../../../projects/ngx-chess-board/src/ngx-chess-board.ts"],"sourcesContent":["export enum Color {\n    WHITE,\n    BLACK,\n}\n","import { AbstractPiece } from '../../engine/piece-decorator/abstract-piece';\nimport { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Point } from './point';\n\nexport abstract class Piece implements AbstractPiece {\n    point: Point;\n    color: Color;\n    constant: PieceConstant;\n    checkPoints: Point[] = [];\n    relValue: number;\n    board: Board;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        relValue: number,\n        board: Board\n    ) {\n        this.color = color;\n        this.constant = constant;\n        this.point = point;\n        this.relValue = relValue;\n        this.board = board;\n    }\n\n    abstract getPossibleMoves(): Point[];\n\n    abstract getPossibleCaptures(): Point[];\n\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\n}\n","export class Point {\n    row: number;\n    col: number;\n\n    constructor(row: number, col: number) {\n        this.row = row;\n        this.col = col;\n    }\n\n    isEqual(that: Point) {\n        return that && this.row === that.row && this.col === that.col;\n    }\n\n    hasCoordsEqual(row: number, col: number) {\n        return row && col && this.row === row && this.col === col;\n    }\n\n    isInRange(): boolean {\n        return this.row >= 0 && this.row <= 7 && this.col >= 0 && this.col <= 7;\n    }\n\n    clone() {\n        return new Point(this.row, this.col);\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { King } from './king';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Rook extends Piece {\n    isMovedAlready = false;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 5, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                break;\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    col,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, col));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, col)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    col,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, col));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, col)) {\n                    break;\n                }\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(row, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(row, j)) {\n                    break;\n                }\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                if (!(this.board.getPieceByField instanceof King)) {\n                    possiblePoints.push(new Point(i, col));\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                if (!(this.board.getPieceByField instanceof King)) {\n                    possiblePoints.push(new Point(i, col));\n                    break;\n                }\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                if (!(this.board.getPieceByField instanceof King)) {\n                    possiblePoints.push(new Point(row, j));\n                    break;\n                }\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                if (!(this.board.getPieceByField instanceof King)) {\n                    possiblePoints.push(new Point(row, j));\n                    break;\n                }\n            }\n        }\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Piece } from './piece';\nimport { Point } from './point';\nimport { Rook } from './rook';\n\nexport class King extends Piece {\n    castledAlready = false;\n    shortCastled = false;\n    longCastled = false;\n    isMovedAlready;\n    isCastling = false;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 0, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n        // lewo\n        if (\n            this.board.isFieldEmpty(row, col - 1) &&\n            !this.board.isFieldUnderAttack(\n                row,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row, col - 1));\n        }\n\n        // prawo\n        if (\n            this.board.isFieldEmpty(row, col + 1) &&\n            !this.board.isFieldUnderAttack(\n                row,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row, col + 1));\n        }\n\n        // dol\n        if (\n            this.board.isFieldEmpty(row + 1, col) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col));\n        }\n\n        // gora\n        if (\n            this.board.isFieldEmpty(row - 1, col) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col));\n        }\n\n        // lewo gora\n        if (\n            this.board.isFieldEmpty(row - 1, col - 1) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col - 1));\n        }\n        // prawo gora\n        if (\n            this.board.isFieldEmpty(row - 1, col + 1) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col + 1));\n        }\n\n        // lewo dol\n        if (\n            this.board.isFieldEmpty(row + 1, col - 1) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col - 1));\n        }\n        // prawo dol\n        if (\n            this.board.isFieldEmpty(row + 1, col + 1) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col + 1));\n        }\n\n        if (!this.isMovedAlready) {\n            let longCastlePossible = true;\n            for (let i = col - 1; i > 0; --i) {\n                if (\n                    !this.board.isFieldEmpty(row, i) ||\n                    this.board.isFieldUnderAttack(\n                        row,\n                        i,\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                    )\n                ) {\n                    longCastlePossible = false;\n                    break;\n                }\n            }\n\n            if (longCastlePossible && !this.board.isKingInCheck(\n                this.color,\n                this.board.pieces\n            ) && this.board.getPieceByField(row, 0)) {\n                const leftRook = this.board.getPieceByField(row, 0);\n                if (leftRook instanceof Rook) {\n                    if (!leftRook.isMovedAlready) {\n                        possiblePoints.push(new Point(row, col - 2));\n                    }\n                }\n            }\n\n            let shortCastlePossible = true;\n            for (let i = col + 1; i < 7; ++i) {\n                if (\n                    !this.board.isFieldEmpty(row, i) ||\n                    this.board.isFieldUnderAttack(\n                        row,\n                        i,\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                    )\n                ) {\n                    shortCastlePossible = false;\n                    break;\n                }\n            }\n\n            if (shortCastlePossible && !this.board.isKingInCheck(\n                this.color,\n                this.board.pieces\n            ) && this.board.getPieceByField(row, 7)) {\n                const rightRook = this.board.getPieceByField(row, 7);\n                if (rightRook instanceof Rook) {\n                    if (!rightRook.isMovedAlready) {\n                        possiblePoints.push(new Point(row, col + 2));\n                    }\n                }\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // lewo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row, col - 1));\n        }\n\n        // prawo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row, col + 1));\n        }\n\n        // dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col));\n        }\n\n        // gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col));\n        }\n\n        // lewo gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col - 1));\n        }\n        // prawo gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row - 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col + 1));\n        }\n\n        // lewo dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col - 1));\n        }\n        // prawo dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            ) &&\n            !this.board.isFieldUnderAttack(\n                row + 1,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col + 1));\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // lewo\n        possiblePoints.push(new Point(row, col - 1));\n\n        // prawo\n        possiblePoints.push(new Point(row, col + 1));\n\n        // dol\n        possiblePoints.push(new Point(row + 1, col));\n\n        // gora\n        possiblePoints.push(new Point(row - 1, col));\n\n        // lewo gora\n        possiblePoints.push(new Point(row - 1, col - 1));\n\n        // prawo gora\n        possiblePoints.push(new Point(row - 1, col + 1));\n\n        // lewo dol\n        possiblePoints.push(new Point(row + 1, col - 1));\n\n        // prawo dol\n        possiblePoints.push(new Point(row + 1, col + 1));\n\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { King } from './king';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Bishop extends Piece {\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 3, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures() {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Knight extends Piece {\n    isMovedAlready = false;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 3, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // gora -> lewo\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\n            possiblePoints.push(new Point(row - 2, col - 1));\n        }\n\n        // gora -> prawo\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\n            possiblePoints.push(new Point(row - 2, col + 1));\n        }\n\n        // lewo -> gora\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\n            possiblePoints.push(new Point(row - 1, col - 2));\n        }\n\n        // prawo -> gora\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\n            possiblePoints.push(new Point(row - 1, col + 2));\n        }\n\n        // lewo -> dol\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\n            possiblePoints.push(new Point(row + 1, col - 2));\n        }\n\n        // prawo -> dol\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\n            possiblePoints.push(new Point(row + 1, col + 2));\n        }\n\n        // dol -> lewo\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\n            possiblePoints.push(new Point(row + 2, col - 1));\n        }\n\n        // dol -> prawo\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\n            possiblePoints.push(new Point(row + 2, col + 1));\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // gora -> lewo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 2,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 2, col - 1));\n        }\n\n        // gora -> prawo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 2,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 2, col + 1));\n        }\n\n        // lewo -> gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col - 2,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col - 2));\n        }\n\n        // prawo -> gora\n        if (\n            this.board.isFieldTakenByEnemy(\n                row - 1,\n                col + 2,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row - 1, col + 2));\n        }\n\n        // lewo -> dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col - 2,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col - 2));\n        }\n\n        // prawo -> dol\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 1,\n                col + 2,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 1, col + 2));\n        }\n\n        // dol -> lewo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 2,\n                col - 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 2, col - 1));\n        }\n\n        // dol -> prawo\n        if (\n            this.board.isFieldTakenByEnemy(\n                row + 2,\n                col + 1,\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n            )\n        ) {\n            possiblePoints.push(new Point(row + 2, col + 1));\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        // gora -> lewo\n        possiblePoints.push(new Point(row - 2, col - 1));\n\n        // gora -> prawo\n        possiblePoints.push(new Point(row - 2, col + 1));\n\n        // lewo -> gora\n        possiblePoints.push(new Point(row - 1, col - 2));\n\n        // prawo -> gora\n        possiblePoints.push(new Point(row - 1, col + 2));\n\n        // lewo -> dol\n        possiblePoints.push(new Point(row + 1, col - 2));\n\n        // prawo -> dol\n        possiblePoints.push(new Point(row + 1, col + 2));\n\n        // dol -> lewo\n        possiblePoints.push(new Point(row + 2, col - 1));\n\n        // dol -> prawo\n        possiblePoints.push(new Point(row + 2, col + 1));\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Pawn extends Piece {\n    isMovedAlready = false;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 1, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n        const row = this.point.row;\n        const col = this.point.col;\n        if (\n            (!this.board.reverted && this.color === Color.WHITE) ||\n            (this.board.reverted && this.color === Color.BLACK)\n        ) {\n            if (this.board.isFieldEmpty(row - 1, col)) {\n                possiblePoints.push(new Point(row - 1, col));\n\n                if (\n                    !this.isMovedAlready &&\n                    this.board.isFieldEmpty(row - 2, col)\n                ) {\n                    possiblePoints.push(new Point(row - 2, col));\n                }\n            }\n        } else {\n            if (\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\n                    row + 1,\n                    col\n                )\n            ) {\n                possiblePoints.push(new Point(row + 1, col));\n\n                if (\n                    !this.isMovedAlready &&\n                    this.board.isFieldEmpty(row + 2, col)\n                ) {\n                    possiblePoints.push(new Point(row + 2, col));\n                }\n            }\n        }\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n        const row = this.point.row;\n        const col = this.point.col;\n\n        if (\n            (!this.board.reverted && this.color === Color.WHITE) ||\n            (this.board.reverted && this.color === Color.BLACK)\n        ) {\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row - 1,\n                    col - 1,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row - 1, col - 1));\n            }\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row - 1,\n                    col + 1,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row - 1, col + 1));\n            }\n        } else {\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row + 1,\n                    col - 1,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row + 1, col - 1));\n            }\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row + 1,\n                    col + 1,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row + 1, col + 1));\n            }\n        }\n\n        if (\n            this.board.enPassantPoint &&\n            this.board.enPassantPiece.color ===\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\n        ) {\n            if (\n                row === this.board.enPassantPiece.point.row &&\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\n            ) {\n                possiblePoints.push(this.board.enPassantPoint);\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n        const row = this.point.row;\n        const col = this.point.col;\n\n        if (\n            (!this.board.reverted && this.color === Color.WHITE) ||\n            (this.board.reverted && this.color === Color.BLACK)\n        ) {\n            possiblePoints.push(new Point(row - 1, col - 1));\n\n            possiblePoints.push(new Point(row - 1, col + 1));\n        } else {\n            possiblePoints.push(new Point(row + 1, col - 1));\n\n            possiblePoints.push(new Point(row + 1, col + 1));\n        }\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { King } from './king';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Queen extends Piece {\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board\n    ) {\n        super(point, color, constant, 9, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                break;\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                break;\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                break;\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, j)) {\n                    break;\n                }\n            }\n        }\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    col,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, col));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, col)) {\n                    break;\n                }\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (\n                this.board.isFieldTakenByEnemy(\n                    i,\n                    col,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(i, col));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(i, col)) {\n                    break;\n                }\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(row, j)) {\n                    break;\n                }\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (\n                this.board.isFieldTakenByEnemy(\n                    row,\n                    j,\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\n                )\n            ) {\n                possiblePoints.push(new Point(row, j));\n                break;\n            } else {\n                if (!this.board.isFieldEmpty(row, j)) {\n                    break;\n                }\n            }\n        }\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n\n        const row = this.point.row;\n        const col = this.point.col;\n\n        for (let i = row + 1; i < 8; ++i) {\n            // dol\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\n                    possiblePoints.push(new Point(i, col));\n                }\n                break;\n            }\n        }\n\n        for (let i = row - 1; i >= 0; --i) {\n            // gora\n            if (this.board.isFieldEmpty(i, col)) {\n                possiblePoints.push(new Point(i, col));\n            } else {\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\n                    possiblePoints.push(new Point(i, col));\n                }\n                break;\n            }\n        }\n\n        for (let j = col - 1; j >= 0; --j) {\n            // lewo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\n                    possiblePoints.push(new Point(row, j));\n                }\n                break;\n            }\n        }\n\n        for (let j = col + 1; j < 8; ++j) {\n            // prawo\n            if (this.board.isFieldEmpty(row, j)) {\n                possiblePoints.push(new Point(row, j));\n            } else {\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\n                    possiblePoints.push(new Point(row, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            // lewa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n            // prawa gorna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n            // lewa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n            // prawa dolna przekatna\n            if (this.board.isFieldEmpty(i, j)) {\n                possiblePoints.push(new Point(i, j));\n            } else {\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\n                    possiblePoints.push(new Point(i, j));\n                }\n                break;\n            }\n        }\n\n        return possiblePoints;\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Piece } from './piece';\nimport { Point } from './point';\n\nexport class Coin extends Piece {\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        board: Board,\n    ) {\n        super(point, color, constant, 9, board);\n    }\n\n    getPossibleMoves(): Point[] {\n        const possiblePoints = [];\n        return possiblePoints;\n    }\n\n    getPossibleCaptures(): Point[] {\n        const possiblePoints = [];\n        return possiblePoints;\n    }\n\n    getCoveredFields(): Point[] {\n        const possiblePoints = [];\n        return possiblePoints;\n    }\n}\n","export interface PieceConstant {\n    name: string;\n    icon: string;\n}\n\nexport const UnicodeConstants = {\n    WHITE_COIN: { name: 'Coin', icon: '&#x1F4B0;' },\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\n\n    BLACK_COIN: { name: 'Coin', icon: '&#x1F4B0' },\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\n};\n","import { Board } from '../../../../../models/board';\nimport { Bishop } from '../../../../../models/pieces/bishop';\nimport { Color } from '../../../../../models/pieces/color';\nimport { King } from '../../../../../models/pieces/king';\nimport { Knight } from '../../../../../models/pieces/knight';\nimport { Pawn } from '../../../../../models/pieces/pawn';\nimport { Point } from '../../../../../models/pieces/point';\nimport { Queen } from '../../../../../models/pieces/queen';\nimport { Rook } from '../../../../../models/pieces/rook';\nimport { Coin } from '../../../../../models/pieces/coin';\nimport { UnicodeConstants } from '../../../../../utils/unicode-constants';\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\nimport { NotationProcessor } from '../notation-processor';\n\nexport class DefaultFenProcessor implements NotationProcessor {\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\n        let fen = notation;\n        if (notation) {\n            engineFacade.board.reverted = false;\n            engineFacade.board.pieces = [];\n            const split = fen.split('/');\n            for (let i = 0; i < 8; ++i) {\n                let pointer = 0;\n                for (let j = 0; j < split[i].split(' ')[0].length; ++j) {\n                    const chunk = split[i].charAt(j);\n                    if (chunk.match(/[0-9]/)) {\n                        pointer += Number(chunk);\n                    } else {\n                        switch (chunk) {\n                            case 'c':\n                                engineFacade.board.pieces.push(\n                                    new Coin(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_COIN,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'r':\n                                engineFacade.board.pieces.push(\n                                    new Rook(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_ROOK,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'n':\n                                engineFacade.board.pieces.push(\n                                    new Knight(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_KNIGHT,\n                                        engineFacade.board,\n                                    ),\n                                );\n\n                                break;\n                            case 'b':\n                                engineFacade.board.pieces.push(\n                                    new Bishop(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_BISHOP,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'q':\n                                engineFacade.board.pieces.push(\n                                    new Queen(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_QUEEN,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'k':\n                                engineFacade.board.pieces.push(\n                                    new King(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_KING,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n                            case 'p': {\n                                const pawn = new Pawn(\n                                    new Point(i, pointer),\n                                    Color.BLACK,\n                                    UnicodeConstants.BLACK_PAWN,\n                                    engineFacade.board,\n                                );\n                                if (\n                                    (pawn.color === Color.BLACK &&\n                                        pawn.point.row !== 1) ||\n                                    (pawn.color === Color.WHITE &&\n                                        pawn.point.row !== 6)\n                                ) {\n                                    pawn.isMovedAlready = true;\n                                }\n                                engineFacade.board.pieces.push(pawn);\n                                break;\n                            }\n                            case 'R':\n                                engineFacade.board.pieces.push(\n                                    new Rook(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_ROOK,\n                                        engineFacade.board,\n                                    ),\n                                );\n\n                                break;\n                            case 'N':\n                                engineFacade.board.pieces.push(\n                                    new Knight(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_KNIGHT,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n\n                            case 'B':\n                                engineFacade.board.pieces.push(\n                                    new Bishop(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_BISHOP,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n\n                            case 'Q':\n                                engineFacade.board.pieces.push(\n                                    new Queen(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_QUEEN,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n\n                            case 'K':\n                                engineFacade.board.pieces.push(\n                                    new King(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_KING,\n                                        engineFacade.board,\n                                    ),\n                                );\n                                break;\n\n                            case 'P': {\n                                const pawn = new Pawn(\n                                    new Point(i, pointer),\n                                    Color.WHITE,\n                                    UnicodeConstants.WHITE_PAWN,\n                                    engineFacade.board,\n                                );\n                                if (\n                                    (pawn.color === Color.BLACK &&\n                                        pawn.point.row !== 1) ||\n                                    (pawn.color === Color.WHITE &&\n                                        pawn.point.row !== 6)\n                                ) {\n                                    pawn.isMovedAlready = true;\n                                }\n                                engineFacade.board.pieces.push(pawn);\n                                break;\n                            }\n                        }\n                        ++pointer;\n                    }\n                }\n            }\n\n            this.setCurrentPlayer(engineFacade.board, fen);\n            this.setCastles(engineFacade.board, fen);\n            this.setEnPassant(fen);\n            this.setFullMoveCount(fen);\n            engineFacade.board.fen = fen;\n        } else {\n            throw Error('Incorrect FEN provided');\n        }\n    }\n\n    private setCurrentPlayer(board: Board, fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            board.currentWhitePlayer = split[1] === 'w';\n        }\n    }\n\n    private setCastles(board: Board, fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            const castleChunk = split[2];\n\n            if (!castleChunk.includes('K')) {\n                this.setRookAlreadyMoved(board, Color.WHITE, 7);\n            }\n\n            if (!castleChunk.includes('Q')) {\n                this.setRookAlreadyMoved(board, Color.WHITE, 0);\n            }\n\n            if (!castleChunk.includes('k')) {\n                this.setRookAlreadyMoved(board, Color.BLACK, 7);\n            }\n\n            if (!castleChunk.includes('q')) {\n                this.setRookAlreadyMoved(board, Color.BLACK, 0);\n            }\n        }\n    }\n\n    private setFullMoveCount(fen: string) {}\n\n    private setEnPassant(fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            const enPassantPoint = split[3];\n\n            if (enPassantPoint === '-') {\n                return;\n            }\n\n            // if()\n        }\n    }\n\n    private setRookAlreadyMoved(board: Board, color: Color, col: number) {\n        const rook = board.pieces.find(\n            (piece) =>\n                piece.color === color &&\n                piece instanceof Rook &&\n                piece.point.col === col,\n        ) as Rook;\n\n        if (rook) {\n            rook.isMovedAlready = true;\n        }\n    }\n}\n","export class MoveTranslation {\n    private _xAxis: number;\n    private _yAxis: number;\n    private _reverted: boolean;\n\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\n        this._xAxis = xAxis;\n        this._yAxis = yAxis;\n        this._reverted = reverted;\n    }\n\n    get xAxis(): number {\n        return this._xAxis;\n    }\n\n    set xAxis(value: number) {\n        this._xAxis = value;\n    }\n\n    get yAxis(): number {\n        return this._yAxis;\n    }\n\n    set yAxis(value: number) {\n        this._yAxis = value;\n    }\n\n    get reverted(): boolean {\n        return this._reverted;\n    }\n\n    set reverted(value: boolean) {\n        this._reverted = value;\n    }\n}\n","import { Board } from '../models/board';\nimport { Bishop } from '../models/pieces/bishop';\nimport { Color } from '../models/pieces/color';\nimport { King } from '../models/pieces/king';\nimport { Knight } from '../models/pieces/knight';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { MoveTranslation } from '../models/move-translation';\nimport { Queen } from '../models/pieces/queen';\nimport { Rook } from '../models/pieces/rook';\n\nexport class MoveUtils {\n    public static willMoveCauseCheck(\n        currentColor: Color,\n        row: number,\n        col: number,\n        destRow: number,\n        destCol: number,\n        board: Board\n    ) {\n        const srcPiece = board.getPieceByField(row, col);\n        const destPiece = board.getPieceByField(destRow, destCol);\n\n        if (srcPiece) {\n            srcPiece.point.row = destRow;\n            srcPiece.point.col = destCol;\n        }\n\n        if (destPiece) {\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\n        }\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\n\n        if (srcPiece) {\n            srcPiece.point.col = col;\n            srcPiece.point.row = row;\n        }\n\n        if (destPiece) {\n            board.pieces.push(destPiece);\n        }\n\n        return isBound;\n    }\n\n    public static format(\n        sourcePoint: Point,\n        destPoint: Point,\n        reverted: boolean\n    ) {\n        if (reverted) {\n            const sourceX = 104 - sourcePoint.col;\n            const destX = 104 - destPoint.col;\n            return (\n                String.fromCharCode(sourceX) +\n                (sourcePoint.row + 1) +\n                String.fromCharCode(destX) +\n                (destPoint.row + 1)\n            );\n        } else {\n            const incrementX = 97;\n            return (\n                String.fromCharCode(sourcePoint.col + incrementX) +\n                (Math.abs(sourcePoint.row - 7) + 1) +\n                String.fromCharCode(destPoint.col + incrementX) +\n                (Math.abs(destPoint.row - 7) + 1)\n            );\n        }\n    }\n\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\n        let xAxis: number;\n        let yAxis: number;\n        if (reverted) {\n            xAxis = 104 - coords.charCodeAt(0);\n            yAxis = +coords.charAt(1) - 1;\n        } else {\n            xAxis = coords.charCodeAt(0) - 97;\n            yAxis = Math.abs(+coords.charAt(1) - 8);\n        }\n\n        return new MoveTranslation(xAxis, yAxis, reverted);\n    }\n\n    public static findPieceByPossibleMovesContaining(\n        coords: string,\n        board: Board,\n        color: Color\n    ): Piece[] {\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\n        let foundPieces = [];\n\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\n            for (let point of piece.getPossibleMoves()) {\n                if (!MoveUtils.willMoveCauseCheck(\n                    piece.color,\n                    piece.point.row,\n                    piece.point.col,\n                    indexes.yAxis,\n                    indexes.xAxis,\n                    board\n                ) && point.isEqual(destPoint)) {\n                    foundPieces.push(piece);\n                }\n            }\n        }\n        return foundPieces;\n    }\n\n    public static findPieceByPossibleCapturesContaining(\n        coords: string,\n        board: Board,\n        color: Color\n    ): Piece[] {\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\n        let foundPieces = [];\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\n            for (let point of piece.getPossibleCaptures()) {\n                if (!MoveUtils.willMoveCauseCheck(\n                    piece.color,\n                    piece.point.row,\n                    piece.point.col,\n                    indexes.yAxis,\n                    indexes.xAxis,\n                    board\n                ) && point.isEqual(destPoint)) {\n                    foundPieces.push(piece);\n                }\n            }\n        }\n\n        return foundPieces;\n    }\n\n    public static formatSingle(point: Point, reverted: boolean): string {\n        if (reverted) {\n            const sourceX = 104 - point.col;\n            return (\n                String.fromCharCode(sourceX) +\n                (point.row + 1)\n            );\n        } else {\n            const incrementX = 97;\n            return (\n                String.fromCharCode(point.col + incrementX) +\n                (Math.abs(point.row - 7) + 1)\n            );\n        }\n    }\n\n    public static getFirstLetterPiece(piece: Piece): string {\n        if (piece instanceof Pawn) {\n            return 'P';\n        } else {\n            if (piece instanceof Knight) {\n                return 'N';\n            } else {\n                if (piece instanceof Bishop) {\n                    return 'B';\n                } else {\n                    if (piece instanceof Rook) {\n                        return 'R';\n                    } else {\n                        if (piece instanceof King) {\n                            return 'K';\n                        } else {\n                            if (piece instanceof Queen) {\n                                return 'Q';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return '';\n    }\n\n    static reverse(board: Board, row: number) {\n        return board.reverted\n            ? row + 1\n            : Math.abs(row - 7) + 1;\n    }\n\n    static formatCol(board: Board, col: number): string {\n        return board.reverted\n            ? String.fromCharCode(104 - col)\n            : String.fromCharCode(97 + col);\n    }\n}\n","import { Board } from '../../../models/board';\nimport { Bishop } from '../../../models/pieces/bishop';\nimport { Color } from '../../../models/pieces/color';\nimport { King } from '../../../models/pieces/king';\nimport { Knight } from '../../../models/pieces/knight';\nimport { Pawn } from '../../../models/pieces/pawn';\nimport { Point } from '../../../models/pieces/point';\nimport { Queen } from '../../../models/pieces/queen';\nimport { Rook } from '../../../models/pieces/rook';\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\n\nexport class DefaultPiecesLoader {\n\n    static loadDefaultPieces(board: Board) {\n        board.pieces = [];\n        // piony czarne\n        for (let i = 0; i < 8; ++i) {\n            board.pieces.push(new Pawn(\n                new Point(1, i),\n                Color.BLACK,\n                UnicodeConstants.BLACK_PAWN,\n                board\n            ));\n        }\n        board.pieces.push(new Rook(\n            new Point(0, 0),\n            Color.BLACK,\n            UnicodeConstants.BLACK_ROOK,\n            board\n        ));\n        board.pieces.push(new Knight(\n            new Point(0, 1),\n            Color.BLACK,\n            UnicodeConstants.BLACK_KNIGHT,\n            board\n        ));\n        board.pieces.push(new Bishop(\n            new Point(0, 2),\n            Color.BLACK,\n            UnicodeConstants.BLACK_BISHOP,\n            board\n        ));\n        board.pieces.push(new Queen(\n            new Point(0, 3),\n            Color.BLACK,\n            UnicodeConstants.BLACK_QUEEN,\n            board\n        ));\n        board.pieces.push(new King(\n            new Point(0, 4),\n            Color.BLACK,\n            UnicodeConstants.BLACK_KING,\n            board\n        ));\n        board.pieces.push(new Bishop(\n            new Point(0, 5),\n            Color.BLACK,\n            UnicodeConstants.BLACK_BISHOP,\n            board\n        ));\n        board.pieces.push(new Knight(\n            new Point(0, 6),\n            Color.BLACK,\n            UnicodeConstants.BLACK_KNIGHT,\n            board\n        ));\n        board.pieces.push(new Rook(\n            new Point(0, 7),\n            Color.BLACK,\n            UnicodeConstants.BLACK_ROOK,\n            board\n        ));\n\n        // piony biale\n        for (let i = 0; i < 8; ++i) {\n            board.pieces.push(new Pawn(\n                new Point(6, i),\n                Color.WHITE,\n                UnicodeConstants.WHITE_PAWN,\n                board\n            ));\n        }\n        board.pieces.push(new Rook(\n            new Point(7, 0),\n            Color.WHITE,\n            UnicodeConstants.WHITE_ROOK,\n            board\n        ));\n        board.pieces.push(new Knight(\n            new Point(7, 1),\n            Color.WHITE,\n            UnicodeConstants.WHITE_KNIGHT,\n            board\n        ));\n        board.pieces.push(new Bishop(\n            new Point(7, 2),\n            Color.WHITE,\n            UnicodeConstants.WHITE_BISHOP,\n            board\n        ));\n        board.pieces.push(new Queen(\n            new Point(7, 3),\n            Color.WHITE,\n            UnicodeConstants.WHITE_QUEEN,\n            board\n        ));\n        board.pieces.push(new King(\n            new Point(7, 4),\n            Color.WHITE,\n            UnicodeConstants.WHITE_KING,\n            board\n        ));\n        board.pieces.push(new Bishop(\n            new Point(7, 5),\n            Color.WHITE,\n            UnicodeConstants.WHITE_BISHOP,\n            board\n        ));\n        board.pieces.push(new Knight(\n            new Point(7, 6),\n            Color.WHITE,\n            UnicodeConstants.WHITE_KNIGHT,\n            board\n        ));\n        board.pieces.push(new Rook(\n            new Point(7, 7),\n            Color.WHITE,\n            UnicodeConstants.WHITE_ROOK,\n            board\n        ));\n\n        board.calculateFEN();\n\n    }\n\n}\n","import { Board } from '../../../../../models/board';\nimport { Bishop } from '../../../../../models/pieces/bishop';\nimport { Color } from '../../../../../models/pieces/color';\nimport { King } from '../../../../../models/pieces/king';\nimport { Knight } from '../../../../../models/pieces/knight';\nimport { Pawn } from '../../../../../models/pieces/pawn';\nimport { Piece } from '../../../../../models/pieces/piece';\nimport { Point } from '../../../../../models/pieces/point';\nimport { Queen } from '../../../../../models/pieces/queen';\nimport { Rook } from '../../../../../models/pieces/rook';\nimport { Coin } from '../../../../../models/pieces/coin';\nimport { MoveUtils } from '../../../../../utils/move-utils';\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\nimport { DefaultPiecesLoader } from '../../default-pieces-loader';\nimport { NotationProcessor } from '../notation-processor';\n\nexport class DefaultPgnProcessor implements NotationProcessor {\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\n        if (notation) {\n            engineFacade.board.reverted = false;\n            engineFacade.board.pieces = [];\n            engineFacade.reset();\n            DefaultPiecesLoader.loadDefaultPieces(engineFacade.board);\n            let moves = this.extractMoves(notation);\n            let counter = -1;\n            for (let move of moves) {\n                ++counter;\n                move = move.replace(/[+#]/g, '');\n                let promotionIndex = '';\n\n                if (move.includes('=')) {\n                    promotionIndex = this.resolvePromotion(\n                        move.substring(move.length - 1),\n                    );\n                    move = move.substring(0, move.length - 2);\n                }\n\n                let color =\n                    counter === 0 || counter % 2 === 0\n                        ? Color.WHITE\n                        : Color.BLACK;\n\n                if (/^[a-z]\\d$/g.test(move)) {\n                    // zwykly ruch na wolne pole e4\n                    let piece = MoveUtils.findPieceByPossibleMovesContaining(\n                        move,\n                        engineFacade.board,\n                        color,\n                    ).find((piece) => piece instanceof Pawn);\n\n                    // en passant check\n                    if (!piece) {\n                        piece = MoveUtils.findPieceByPossibleCapturesContaining(\n                            move,\n                            engineFacade.board,\n                            color,\n                        ).find((piece) => piece instanceof Pawn);\n                    }\n\n                    // if piece is found for sure\n                    if (piece) {\n                        engineFacade.move(\n                            MoveUtils.formatSingle(piece.point, false) +\n                                move +\n                                promotionIndex,\n                        );\n                    }\n                } else {\n                    if (/^[A-Z][a-h]\\d$/g.test(move)) {\n                        // jezeli ma wielka litere, czyli trzeba odszukac ktora figura Nf3\n                        let pieces =\n                            MoveUtils.findPieceByPossibleMovesContaining(\n                                move.substring(1),\n                                engineFacade.board,\n                                color,\n                            );\n                        let piece = pieces.find((piece) =>\n                            this.resolvePieceByFirstChar(move.charAt(0), piece),\n                        );\n                        if (piece) {\n                            engineFacade.move(\n                                MoveUtils.formatSingle(piece.point, false) +\n                                    move.substring(1) +\n                                    promotionIndex,\n                            );\n                        } else {\n                        }\n                    } else {\n                        if ('O-O' === move) {\n                            engineFacade.move(\n                                color === Color.WHITE ? 'e1g1' : 'e8g8',\n                            );\n                        } else {\n                            if (/^[a-z]x[a-z]\\d$/g.test(move)) {\n                                //exd5\n                                let pieces =\n                                    MoveUtils.findPieceByPossibleCapturesContaining(\n                                        move.substring(move.indexOf('x') + 1),\n                                        engineFacade.board,\n                                        color,\n                                    ).filter((piece) => piece instanceof Pawn);\n\n                                let piece;\n                                if (pieces.length > 1) {\n                                    piece = this.resolveByCol(\n                                        pieces,\n                                        move.substring(0, 1),\n                                    );\n                                } else {\n                                    piece = pieces[0];\n                                }\n\n                                if (piece) {\n                                    engineFacade.move(\n                                        MoveUtils.formatSingle(\n                                            piece.point,\n                                            false,\n                                        ) +\n                                            move.substring(\n                                                move.indexOf('x') + 1,\n                                            ) +\n                                            promotionIndex,\n                                    );\n                                } else {\n                                }\n                            } else {\n                                if (/^[A-Z]x[a-z]\\d$/g.test(move)) {\n                                    let piece =\n                                        MoveUtils.findPieceByPossibleCapturesContaining(\n                                            move.substring(\n                                                move.indexOf('x') + 1,\n                                            ),\n                                            engineFacade.board,\n                                            color,\n                                        ).find((piece) =>\n                                            this.resolvePieceByFirstChar(\n                                                move.substring(0, 1),\n                                                piece,\n                                            ),\n                                        );\n                                    if (piece) {\n                                        engineFacade.move(\n                                            MoveUtils.formatSingle(\n                                                piece.point,\n                                                false,\n                                            ) +\n                                                move.substring(\n                                                    move.indexOf('x') + 1,\n                                                ) +\n                                                promotionIndex,\n                                        );\n                                    } else {\n                                    }\n                                } else {\n                                    if (move === 'O-O-O') {\n                                        engineFacade.move(\n                                            color === Color.WHITE\n                                                ? 'e1c1'\n                                                : 'e8c8',\n                                        );\n                                    } else {\n                                        if (/^[A-Z]\\dx[a-z]\\d$/g.test(move)) {\n                                            //Ngxe4 sytuacja 2 skoczkow pion bicie\n                                            let pieces =\n                                                MoveUtils.findPieceByPossibleCapturesContaining(\n                                                    move.substring(\n                                                        move.indexOf('x') + 1,\n                                                    ),\n                                                    engineFacade.board,\n                                                    color,\n                                                ).filter((piece) =>\n                                                    this.resolvePieceByFirstChar(\n                                                        move.charAt(0),\n                                                        piece,\n                                                    ),\n                                                );\n\n                                            let piece = this.resolveByRow(\n                                                pieces,\n                                                move.substring(1, 2),\n                                            );\n\n                                            if (piece) {\n                                                engineFacade.move(\n                                                    MoveUtils.formatSingle(\n                                                        piece.point,\n                                                        false,\n                                                    ) +\n                                                        move.substring(\n                                                            move.indexOf('x') +\n                                                                1,\n                                                        ) +\n                                                        promotionIndex,\n                                                );\n                                            }\n                                        } else {\n                                            if (\n                                                /^[A-Z][a-z][a-z]\\d$/g.test(\n                                                    move,\n                                                )\n                                            ) {\n                                                // dwie wieze bez bicia Rac1 pion\n                                                let pieces =\n                                                    MoveUtils.findPieceByPossibleMovesContaining(\n                                                        move.substring(2, 4),\n                                                        engineFacade.board,\n                                                        color,\n                                                    ).filter((piece) =>\n                                                        this.resolvePieceByFirstChar(\n                                                            move.charAt(0),\n                                                            piece,\n                                                        ),\n                                                    );\n\n                                                let piece = this.resolveByCol(\n                                                    pieces,\n                                                    move.substring(1, 2),\n                                                );\n\n                                                if (piece) {\n                                                    engineFacade.move(\n                                                        MoveUtils.formatSingle(\n                                                            piece.point,\n                                                            false,\n                                                        ) +\n                                                            move.substring(\n                                                                2,\n                                                                4,\n                                                            ) +\n                                                            promotionIndex,\n                                                    );\n                                                }\n                                            } else {\n                                                if (\n                                                    /^[A-Z][a-z]x[a-z]\\d$/g.test(\n                                                        move,\n                                                    )\n                                                ) {\n                                                    let pieces =\n                                                        MoveUtils.findPieceByPossibleCapturesContaining(\n                                                            move.substring(\n                                                                move.indexOf(\n                                                                    'x',\n                                                                ) + 1,\n                                                            ),\n                                                            engineFacade.board,\n                                                            color,\n                                                        ).filter((piece) =>\n                                                            this.resolvePieceByFirstChar(\n                                                                move.charAt(0),\n                                                                piece,\n                                                            ),\n                                                        );\n\n                                                    let piece =\n                                                        this.resolveByCol(\n                                                            pieces,\n                                                            move.substring(\n                                                                1,\n                                                                2,\n                                                            ),\n                                                        );\n\n                                                    if (piece) {\n                                                        engineFacade.move(\n                                                            MoveUtils.formatSingle(\n                                                                piece.point,\n                                                                false,\n                                                            ) +\n                                                                move.substring(\n                                                                    move.indexOf(\n                                                                        'x',\n                                                                    ) + 1,\n                                                                ) +\n                                                                promotionIndex,\n                                                        );\n                                                    }\n                                                } else {\n                                                    this.processR1f2(\n                                                        move,\n                                                        engineFacade,\n                                                        color,\n                                                        promotionIndex,\n                                                    );\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private processR1f2(move, engineFacade, color, promotionIndex) {\n        if (/^[A-Z]\\d[a-z]\\d$/g.test(move)) {\n            // R1f2\n            let pieces = MoveUtils.findPieceByPossibleMovesContaining(\n                move.substring(2, 4),\n                engineFacade.board,\n                color,\n            ).filter((piece) =>\n                this.resolvePieceByFirstChar(move.charAt(0), piece),\n            );\n\n            let piece = this.resolveByRow(pieces, move.substring(1, 2));\n\n            if (piece) {\n                engineFacade.move(\n                    MoveUtils.formatSingle(piece.point, false) +\n                        move.substring(2, 4) +\n                        promotionIndex,\n                );\n            }\n        }\n    }\n\n    protected extractMoves(notation: string) {\n        return notation\n            .substring(notation.lastIndexOf(']') + 1)\n            .replace(/[0-9]+\\./g, '')\n            .replace(/\\s+/g, ' ')\n            .replace(/{[^}]*}/g, '')\n            .trim()\n            .split(' ')\n            .filter((s) => s);\n    }\n\n    protected movePiece(piece: Piece, board: Board, move: string) {\n        let indexes = MoveUtils.translateCoordsToIndex(move, board.reverted);\n        piece.point.col = indexes.xAxis;\n        piece.point.row = indexes.yAxis;\n    }\n\n    hasUpperCase(move: string) {\n        return /[A-Z]/.test(move);\n    }\n\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\n        let piecesFirstChar = '';\n        if (piece instanceof King) {\n            piecesFirstChar = 'K';\n        } else {\n            if (piece instanceof Queen) {\n                piecesFirstChar = 'Q';\n            } else {\n                if (piece instanceof Rook) {\n                    piecesFirstChar = 'R';\n                } else {\n                    if (piece instanceof Bishop) {\n                        piecesFirstChar = 'B';\n                    } else {\n                        if (piece instanceof Knight) {\n                            piecesFirstChar = 'N';\n                        } else {\n                            if (piece instanceof Pawn) {\n                                piecesFirstChar = 'P';\n                            } else {\n                                if (piece instanceof Coin) {\n                                    piecesFirstChar = 'C';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return move === piecesFirstChar;\n    }\n\n    private isShortCastle(move: string) {\n        return move === 'O-O';\n    }\n\n    private removePiece(coords: string, board: Board) {\n        let indexes = MoveUtils.translateCoordsToIndex(coords, board.reverted);\n\n        board.pieces = board.pieces.filter(\n            (e) => !e.point.isEqual(new Point(indexes.yAxis, indexes.xAxis)),\n        );\n    }\n\n    private isLongCastle(move: string) {\n        return move === 'O-O-O';\n    }\n\n    private resolveByCol(pieces: Piece[], char: string): Piece {\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\n        return firstPieceFormat.substring(0, 1) === char\n            ? pieces[0]\n            : pieces[1];\n    }\n\n    private resolveByRow(pieces: Piece[], char: string) {\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\n        return firstPieceFormat.substring(1, 2) === char\n            ? pieces[0]\n            : pieces[1];\n    }\n\n    private replacePromotion(move: string) {\n        return move\n            .replace('=Q', '1')\n            .replace('=R', '2')\n            .replace('=B', '3')\n            .replace('=K', '4');\n    }\n\n    private resolvePromotion(promotionChar: string) {\n        switch (promotionChar) {\n            case 'Q':\n                return '1';\n            case 'R':\n                return '2';\n            case 'B':\n                return '3';\n            case 'N':\n                return '4';\n        }\n        return '';\n    }\n}\n","import { NotationProcessor } from './notation-processor';\nimport {\n    DefaultFenProcessor,\n} from './fen-loader/default-fen-processor';\nimport { DefaultPgnProcessor } from './pgn-loader/default-pgn-processor';\n\nexport class NotationProcessorFactory {\n\n    static getProcessor(type: NotationType): NotationProcessor {\n        switch (type) {\n            case NotationType.FEN:\n                return new DefaultFenProcessor();\n\n            case NotationType.PGN:\n                return new DefaultPgnProcessor();\n\n        }\n    }\n\n    static getDefaultProcessor(): NotationProcessor {\n        return new DefaultFenProcessor();\n    }\n\n}\n\nexport enum NotationType {\n    FEN = 1,\n    PGN = 2\n}\n","export class DrawPoint {\n    x: number;\n    y: number;\n    color: string;\n\n    constructor(x: number, y: number, color: string) {\n        this.x = x + 0.5;\n        this.y = y + 0.5;\n        this.color = color;\n    }\n\n    isEqual(that: DrawPoint) {\n        return that && that.x === this.x && this.y === that.y;\n    }\n}\n","import { Point } from '../../models/pieces/point';\nimport { ColorStrategy } from '../drawing-tools/colors/color-strategy';\nimport { DrawPoint } from '../drawing-tools/draw-point';\n\nexport class ClickUtils {\n\n    static getClickPoint(\n        event: any,\n        top: number,\n        height: number,\n        left: number,\n        width: number\n    ) {\n        return new Point(\n            Math.floor((event.y - top) / (height / 8)),\n            Math.floor((event.x - left) / (width / 8)\n            )\n        );\n    }\n\n    static getDrawingPoint(\n        tileSize: number,\n        colorStrategy: ColorStrategy,\n        x: number,\n        y: number,\n        ctrl: boolean,\n        alt: boolean,\n        shift: boolean,\n        xAxis: number,\n        yAxis: number\n    ) {\n        const squareSize = tileSize / 8;\n        const xx = Math.floor(\n            (x - xAxis) /\n            squareSize\n        );\n        const yy = Math.floor(\n            (y - yAxis) /\n            squareSize\n        );\n\n        let color = colorStrategy.resolve(ctrl, shift, alt);\n\n        return new DrawPoint(\n            Math.floor(xx * squareSize + squareSize / 2),\n            Math.floor(yy * squareSize + squareSize / 2),\n            color\n        );\n    }\n\n}\n","export class HistoryMove {\n    move: string;\n    piece: string;\n    color: string;\n    x: boolean;\n    check: boolean;\n    stalemate: boolean;\n    mate: boolean;\n\n    constructor(move: string, piece: string, color: string, captured: boolean) {\n        this.move = move;\n        this.piece = piece;\n        this.color = color;\n        this.x = captured;\n    }\n\n    setGameStates(check: boolean, stalemate: boolean, mate: boolean): void {\n        this.check = check;\n        this.stalemate = stalemate;\n        this.mate = mate;\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { HistoryMove } from './history-move';\n\nexport class HistoryMoveProvider {\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\n\n    get historyMoves(): HistoryMove[] {\n        return this.historyMovesSubject$.value;\n    }\n\n    set historyMoves(states: HistoryMove[]) {\n        this.historyMovesSubject$.next(states);\n    }\n\n    addMove(historyMove: HistoryMove) {\n        this.historyMoves = [...this.historyMoves, historyMove];\n    }\n\n    pop(): HistoryMove {\n        const lastHistoryMove = this.getLastMove();\n        this.historyMoves = this.historyMoves.filter(\n            (state) => state !== lastHistoryMove\n        );\n        return lastHistoryMove;\n    }\n\n    getAll() {\n        return this.historyMoves;\n    }\n\n    clear() {\n        this.historyMoves = [];\n    }\n\n    getLastMove() {\n        return this.historyMoves[this.getLastMoveIndex()];\n    }\n\n    getLastMoveIndex() {\n        return this.historyMoves.length - 1;\n    }\n}\n","export class Constants {\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\n\n    static readonly DEFAULT_SIZE = 500;\n    static readonly MIN_BOARD_SIZE = 100;\n    static readonly MAX_BOARD_SIZE = 4000;\n\n    static readonly DEFAULT_SOURCE_POINT_COLOR = 'rgba(146, 111, 26, 0.79)';\n    static readonly DEFAULT_DESTINATION_POINT_COLOR = '#b28e1a';\n    static readonly DEFAULT_LEGAL_MOVE_POINT_COLOR = 'radial-gradient(#13262F 15%, transparent 20%);';\n\n}\n","import { Bishop } from '../../models/pieces/bishop';\nimport { Color } from '../../models/pieces/color';\nimport { King } from '../../models/pieces/king';\nimport { Knight } from '../../models/pieces/knight';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Queen } from '../../models/pieces/queen';\nimport { Rook } from '../../models/pieces/rook';\nimport { Coin } from '../../models/pieces/coin';\nimport { PieceIconInput } from './piece-icon-input';\n\nexport class PieceIconInputManager {\n    private _defaultIcons: boolean = false;\n    private _pieceIconInput: PieceIconInput;\n\n    get pieceIconInput(): PieceIconInput {\n        return this._pieceIconInput;\n    }\n\n    set pieceIconInput(value: PieceIconInput) {\n        this._pieceIconInput = value;\n    }\n\n    get defaultIcons(): boolean {\n        return this._defaultIcons;\n    }\n\n    set defaultIcons(value: boolean) {\n        this._defaultIcons = value;\n    }\n\n    isDefaultIcons(): boolean {\n        return (\n            this.pieceIconInput === undefined || this.pieceIconInput === null\n        );\n    }\n\n    getPieceIcon(piece: Piece): string {\n        let isWhite = piece.color === Color.WHITE;\n        switch (piece.constructor) {\n            case Coin:\n                return isWhite\n                    ? this.pieceIconInput.whiteCoinUrl\n                    : this.pieceIconInput.blackCoinUrl;\n            case King:\n                return isWhite\n                    ? this.pieceIconInput.whiteKingUrl\n                    : this.pieceIconInput.blackKingUrl;\n            case Queen:\n                return isWhite\n                    ? this.pieceIconInput.whiteQueenUrl\n                    : this.pieceIconInput.blackQueenUrl;\n            case Rook:\n                return isWhite\n                    ? this.pieceIconInput.whiteRookUrl\n                    : this.pieceIconInput.blackRookUrl;\n            case Bishop:\n                return isWhite\n                    ? this.pieceIconInput.whiteBishopUrl\n                    : this.pieceIconInput.blackBishopUrl;\n            case Knight:\n                return isWhite\n                    ? this.pieceIconInput.whiteKnightUrl\n                    : this.pieceIconInput.blackKnightUrl;\n            case Pawn:\n                return isWhite\n                    ? this.pieceIconInput.whitePawnUrl\n                    : this.pieceIconInput.blackPawnUrl;\n        }\n    }\n\n    loadDefaultData() {\n        this.pieceIconInput = {\n            blackCoinUrl: '',\n            blackBishopUrl: '',\n            blackKingUrl: '',\n            blackKnightUrl: '',\n            blackQueenUrl: '',\n            blackRookUrl: '',\n            whiteCoinUrl: '',\n            whiteBishopUrl: '',\n            whiteKingUrl: '',\n            whiteKnightUrl: '',\n            whitePawnUrl: '',\n            whiteQueenUrl: '',\n            whiteRookUrl: '',\n            blackPawnUrl: 'a',\n        };\n    }\n}\n","export class CoordsProvider {\n    private readonly defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\n    private readonly defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\n\n    private currentXCoords: string[] = [...this.defaultXCoords];\n    private currentYCoords: number[] = [...this.defaultYCoords];\n\n    get xCoords(): string[] {\n        return this.currentXCoords;\n    }\n\n    get yCoords(): number[] {\n        return this.currentYCoords;\n    }\n\n    reverse() {\n        this.currentXCoords = this.currentXCoords.reverse();\n        this.currentYCoords = this.currentYCoords.reverse();\n    }\n\n    reset() {\n        this.init();\n    }\n\n    private init() {\n        this.currentXCoords = [...this.defaultXCoords];\n        this.currentYCoords = [...this.defaultYCoords];\n    }\n}\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DragEndProcessor } from './drag-end-processor';\n\nexport class AnimationDragEndProcessor implements DragEndProcessor {\n\n    dragEnded(event: CdkDragEnd, disabling: boolean, startTrans: string) {\n        if (!disabling) {\n            if (startTrans) {\n                event.source._dragRef.getRootElement().style.transform = startTrans;\n            }\n        }\n    }\n\n}\n","import { CdkDragEnd } from '@angular/cdk/drag-drop';\nimport { AnimationDragEndProcessor } from './animation-drag-end-processor';\nimport { DefaultDragEndProcessor } from './default-drag-end-processor';\nimport { DragEndProcessor } from './drag-end-processor';\n\nexport class DragEndStrategy {\n\n    private dragEndProcessor: DragEndProcessor;\n\n    constructor() {\n        this.dragEndProcessor = new AnimationDragEndProcessor();\n    }\n\n    public process(event: CdkDragEnd, disabling: boolean, startTrans: string): void {\n        this.dragEndProcessor.dragEnded(event, disabling, startTrans);\n    }\n\n    setDragEndProcessor(processor: DragEndProcessor) {\n        this.dragEndProcessor = processor;\n    }\n\n}\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DragStartProcessor } from './drag-start-processor';\n\nexport class AnimationDragStartProcessor implements DragStartProcessor {\n\n    dragStarted(event: CdkDragStart) {\n        const style = event.source.getRootElement().style;\n        style.zIndex = '1000';\n        style.position = 'absolute';\n    }\n\n}\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\nimport { AnimationDragStartProcessor } from './animation-drag-start-processor';\nimport { DefaultDragStartProcessor } from './default-drag-start-processor';\nimport { DragStartProcessor } from './drag-start-processor';\n\nexport class DragStartStrategy {\n\n    private dragStartProcessor: DragStartProcessor;\n\n    constructor() {\n        this.dragStartProcessor = new AnimationDragStartProcessor();\n    }\n\n    public process(event: CdkDragStart): void {\n        this.dragStartProcessor.dragStarted(event);\n    }\n\n    setDragStartProcessor(processor: DragStartProcessor) {\n        this.dragStartProcessor = processor;\n    }\n\n}\n","import { ColorProcessor } from './color-processor';\n\nexport class DefaultColorProcessor implements ColorProcessor{\n\n    resolve(ctrl: any, shift: any, alt: any): string{\n        let color = 'green';\n\n        if (ctrl || shift) {\n            color = 'red';\n        }\n        if (alt) {\n            color = 'blue';\n        }\n        if ((shift || ctrl) && alt) {\n            color = 'orange';\n        }\n\n        return color;\n    }\n\n}\n","import { ColorProcessor } from './color-processor';\nimport { DefaultColorProcessor } from './default-color-processor';\n\nexport class ColorStrategy {\n\n    colorProcessor: ColorProcessor;\n\n    constructor() {\n        this.colorProcessor = new DefaultColorProcessor();\n    }\n\n    resolve(ctrl: any, shift: any, alt: any) {\n        return this.colorProcessor.resolve(ctrl, shift, alt);\n    }\n\n    setColorProcessor(colorProcessor: ColorProcessor) {\n        this.colorProcessor = colorProcessor;\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Arrow } from './shapes/arrow';\nimport { Circle } from './shapes/circle';\n\nexport class DrawProvider {\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\n\n    public arrows$ = this.arrowsSubject$.asObservable();\n    public circles$ = this.circlesSubject$.asObservable();\n\n    private get circles(): Circle[] {\n        return this.circlesSubject$.value;\n    }\n\n    private set circles(circles: Circle[]) {\n        this.circlesSubject$.next(circles);\n    }\n\n    private get arrows(): Arrow[] {\n        return this.arrowsSubject$.value;\n    }\n\n    private set arrows(arrows: Arrow[]) {\n        this.arrowsSubject$.next(arrows);\n    }\n\n    addCircle(circle: Circle) {\n        this.circles = [...this.circles, circle];\n    }\n\n    reomveCircle(removeCircle: Circle) {\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\n    }\n\n    addArrow(arrow: Arrow) {\n        this.arrows = [...this.arrows, arrow];\n    }\n\n    removeArrow(removeArrow: Arrow) {\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\n    }\n\n    containsCircle(checkCircle: Circle) {\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\n    }\n\n    containsArrow(checkArrow: Arrow) {\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\n    }\n\n    clear() {\n        this.arrows = [];\n        this.circles = [];\n    }\n}\n","import { Board } from '../../models/board';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\n\nexport abstract class AbstractPgnProcessor {\n\n    protected pgn = [];\n    protected currentIndex = 0.5;\n\n    public abstract process(\n        board: Board,\n        sourcePiece: Piece,\n        destPoint: Point,\n        destPiece?: Piece\n    ): void;\n\n    public getPGN() {\n        return this.pgn.join(' ');\n    }\n\n    protected getLast() {\n        return this.pgn[this.pgn.length - 1];\n    }\n\n    protected appendToLast(str: string) {\n        this.pgn[this.pgn.length - 1] = this.getLast() + str;\n    }\n\n    processChecks(checkmate: boolean, check: boolean, stalemate: boolean) {\n        if (checkmate) {\n            this.appendToLast('#');\n        } else {\n            if (check) {\n                this.appendToLast('+');\n            }\n        }\n    }\n\n    reset() {\n        this.pgn = [];\n        this.currentIndex = 0.5;\n    }\n\n    addPromotionChoice(promotion) {\n        switch (promotion) {\n            case 1:\n                this.appendToLast('=Q');\n                break;\n            case 2:\n                this.appendToLast('=R');\n                break;\n            case 3:\n                this.appendToLast('=B');\n                break;\n            case 4:\n                this.appendToLast('=N');\n                break;\n        }\n    }\n\n    removeLast() {\n        this.pgn.pop();\n        this.currentIndex -= 0.5;\n    }\n\n}\n","import { Board } from '../../models/board';\nimport { King } from '../../models/pieces/king';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\nimport { MoveUtils } from '../../utils/move-utils';\nimport { AbstractPgnProcessor } from './abstract-pgn-processor';\n\nexport class DefaultPgnProcessor extends AbstractPgnProcessor {\n\n    public process(\n        board: Board,\n        sourcePiece: Piece,\n        destPoint: Point,\n        destPiece?: Piece\n    ): void {\n        this.currentIndex += 0.5;\n        let currentMove = '';\n        if(this.currentIndex % Math.floor(this.currentIndex) === 0) {\n            currentMove = this.currentIndex + '. ';\n        }\n        let possibleCaptures = [];\n        let possibleMoves = [];\n\n        if (destPiece) {\n            possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(\n                MoveUtils.formatSingle(destPoint, board.reverted),\n                board,\n                sourcePiece.color\n            ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n        }\n        possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(\n            MoveUtils.formatSingle(destPoint, board.reverted),\n            board,\n            sourcePiece.color\n        ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n\n        if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {\n            currentMove += MoveUtils.formatSingle(destPoint, board.reverted);\n        } else {\n            if (sourcePiece instanceof Pawn && destPiece) {\n                currentMove += (MoveUtils.formatSingle(\n                    sourcePiece.point,\n                    board.reverted\n                ).substring(0, 1) + 'x' + MoveUtils.formatSingle(\n                    destPoint,\n                    board.reverted\n                ));\n            } else {\n                if (sourcePiece instanceof King && (Math.abs(sourcePiece.point.col - destPoint.col) === 2)) {\n                    if (board.reverted) {\n                        currentMove += (destPoint.col < 2\n                            ? 'O-O'\n                            : 'O-O-O');\n                    } else {\n                        currentMove += destPoint.col < 3\n                            ? 'O-O-O'\n                            : 'O-O';\n                    }\n                } else {\n                    if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) {     // Nf3\n                        currentMove += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(\n                            destPoint,\n                            board.reverted\n                        );\n                    } else {\n                        if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) {    // Nbd7\n                            if (this.isEqualByCol(\n                                possibleMoves[0],\n                                possibleMoves[1]\n                            )) {\n                                currentMove +=  MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + MoveUtils.reverse(\n                                    board,\n                                    sourcePiece.point.row\n                                ) + MoveUtils.formatSingle(\n                                    destPoint,\n                                    board.reverted\n                                );\n                            } else {\n                                currentMove += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + MoveUtils.formatCol(\n                                    board,\n                                    sourcePiece.point.col\n                                ) + MoveUtils.formatSingle(\n                                    destPoint,\n                                    board.reverted\n                                );\n                            }\n                        } else {\n                            if (possibleCaptures.length > 1) {\n                                if ((this.isEqualByCol(\n                                    possibleCaptures[0],\n                                    possibleCaptures[1]\n                                ))) {\n                                    currentMove += MoveUtils.getFirstLetterPiece(\n                                        sourcePiece) + MoveUtils.reverse(\n                                        board,\n                                        sourcePiece.point.row\n                                    ) + 'x' + MoveUtils.formatSingle(\n                                        destPoint,\n                                        board.reverted\n                                    );\n                                } else {\n                                    currentMove += MoveUtils.getFirstLetterPiece(\n                                        sourcePiece) + MoveUtils.formatCol(\n                                        board,\n                                        sourcePiece.point.col\n                                    ) + 'x' + MoveUtils.formatSingle(\n                                        destPoint,\n                                        board.reverted\n                                    );\n                                }\n                            } else {\n                                currentMove += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + 'x' + MoveUtils.formatSingle(\n                                    destPoint, board.reverted\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.pgn.push(currentMove);\n    }\n\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\n        return MoveUtils.getFirstLetterPiece(piece) === move;\n    }\n\n    private isEqualByCol(aPiece: Piece, bPiece: Piece) {\n        return aPiece.point.col === bPiece.point.col;\n    }\n\n}\n","import { PiecePromotionModalComponent } from '../piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { HistoryMove } from '../history-move-provider/history-move';\nimport { HistoryMoveProvider } from '../history-move-provider/history-move-provider';\nimport { Board } from '../models/board';\nimport { King } from '../models/pieces/king';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { Rook } from '../models/pieces/rook';\nimport { Constants } from '../utils/constants';\nimport { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\nimport { CoordsProvider } from './coords/coords-provider';\nimport { DragEndStrategy } from './drag/end/drag-end-strategy';\nimport { DragStartStrategy } from './drag/start/drag-start-strategy';\nimport { ColorStrategy } from './drawing-tools/colors/color-strategy';\nimport { DrawProvider } from './drawing-tools/draw-provider';\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\nimport { AbstractPgnProcessor } from './pgn/abstract-pgn-processor';\n\nexport abstract class AbstractEngineFacade {\n\n    public dragStartStrategy: DragStartStrategy = new DragStartStrategy();\n    public dragEndStrategy: DragEndStrategy = new DragEndStrategy();\n    public pgnProcessor: AbstractPgnProcessor = new DefaultPgnProcessor();\n    protected colorStrategy: ColorStrategy = new ColorStrategy();\n\n    public coords: CoordsProvider = new CoordsProvider();\n    public heightAndWidth: number = Constants.DEFAULT_SIZE;\n\n    public freeMode = false;\n    public dragDisabled: boolean;\n    public drawDisabled: boolean;\n    public lightDisabled: boolean;\n    public darkDisabled: boolean;\n    public board: Board;\n    public modal: PiecePromotionModalComponent;\n    public boardLoader: BoardLoader;\n    public drawProvider: DrawProvider = new DrawProvider();\n    public pieceIconManager: PieceIconInputManager = new PieceIconInputManager();\n    public moveHistoryProvider: HistoryMoveProvider = new HistoryMoveProvider();\n    public moveDone: boolean;\n    public disabling = false;\n\n    protected constructor(board: Board) {\n        this.board = board;\n    }\n\n    public abstract reset(): void;\n\n    public abstract undo(): void;\n\n    public abstract move(coords: string): void;\n\n    public abstract addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ): void;\n\n    public abstract onMouseUp(\n        event: MouseEvent,\n        pointClicked: Point,\n        left: number,\n        top: number\n    ): void;\n\n    public abstract onMouseDown(\n        event: MouseEvent,\n        pointClicked: Point,\n        left?: number,\n        top?: number\n    ): void;\n\n    public checkIfPawnFirstMove(piece: Piece) {\n        if (piece instanceof Pawn) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public checkIfRookMoved(piece: Piece) {\n        if (piece instanceof Rook) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public checkIfKingMoved(piece: Piece) {\n        if (piece instanceof King) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public getMoveHistory(): HistoryMove[] {\n        return this.moveHistoryProvider.getAll();\n    }\n\n}\n","import { Board } from '../../../models/board';\nimport { Bishop } from '../../../models/pieces/bishop';\nimport { Color } from '../../../models/pieces/color';\nimport { King } from '../../../models/pieces/king';\nimport { Knight } from '../../../models/pieces/knight';\nimport { Pawn } from '../../../models/pieces/pawn';\nimport { Point } from '../../../models/pieces/point';\nimport { Queen } from '../../../models/pieces/queen';\nimport { Rook } from '../../../models/pieces/rook';\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\nimport { AbstractEngineFacade } from '../../abstract-engine-facade';\nimport { DefaultPiecesLoader } from './default-pieces-loader';\nimport { NotationProcessor } from './notation-processors/notation-processor';\nimport { NotationProcessorFactory } from './notation-processors/notation-processor-factory';\n\nexport class BoardLoader {\n\n    private engineFacade: AbstractEngineFacade;\n    private notationProcessor: NotationProcessor;\n\n    constructor(engineFacade: AbstractEngineFacade, notationProcessor?: NotationProcessor) {\n        this.engineFacade = engineFacade;\n\n        if (notationProcessor) {\n            this.notationProcessor = notationProcessor;\n        } else {\n            this.notationProcessor = NotationProcessorFactory.getDefaultProcessor();\n        }\n\n    }\n\n    addPieces() {\n        DefaultPiecesLoader.loadDefaultPieces(this.engineFacade.board);\n    }\n\n    loadFEN(fen: string) {\n        this.notationProcessor.process(fen, this.engineFacade);\n    }\n\n    loadPGN(pgn: string) {\n        this.notationProcessor.process(pgn, this.engineFacade)\n    }\n\n    setEngineFacade(engineFacade: AbstractEngineFacade) {\n        this.engineFacade = engineFacade;\n    }\n\n    setNotationProcessor(notationProcessor: NotationProcessor) {\n        this.notationProcessor = notationProcessor;\n    }\n\n}\n","import { Board } from '../../../models/board';\n\nexport class BoardState {\n\n    board: Board;\n\n    constructor(board: Board) {\n        this.board = board;\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { BoardState } from './board-state';\n\nexport class BoardStateProvider {\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\n\n    get states(): BoardState[] {\n        return this.statesSubject$.value;\n    }\n\n    set states(states: BoardState[]) {\n        this.statesSubject$.next(states);\n    }\n\n    addMove(state: BoardState) {\n        this.states = [...this.states, state];\n    }\n\n    getStates(): BoardState[] {\n        return this.states;\n    }\n\n    pop(): BoardState {\n        const lastState = this.getLastState();\n        this.states = this.states.filter((state) => state !== lastState);\n        return lastState;\n    }\n\n    isEmpty() {\n        return this.states.length === 0;\n    }\n\n    clear() {\n        this.states = [];\n    }\n\n    getLastState() {\n        return this.states[this.getLastStateIndex()];\n    }\n\n    getLastStateIndex(): number {\n        return this.states.length - 1;\n    }\n}\n","import { DrawPoint } from '../draw-point';\n\nexport class Arrow {\n    start: DrawPoint;\n    end: DrawPoint;\n\n    isEqual(arrow: Arrow) {\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\n    }\n}\n","import { DrawPoint } from '../draw-point';\n\nexport class Circle {\n    drawPoint: DrawPoint;\n\n    isEqual(circle: Circle) {\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\n    }\n}\n","import { Point } from '../../models/pieces/point';\nimport { AbstractPiece } from './abstract-piece';\n\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\n\n    piece: AbstractPiece;\n\n    protected constructor(piece: AbstractPiece) {\n        this.piece = piece;\n    }\n\n    abstract getPossibleCaptures(): Point[];\n\n    abstract getPossibleMoves(): Point[];\n\n}\n","import { Board } from '../../models/board';\nimport { Color } from '../../models/pieces/color';\nimport { Point } from '../../models/pieces/point';\nimport { MoveUtils } from '../../utils/move-utils';\nimport { AbstractPiece } from './abstract-piece';\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\n\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\n    private pointClicked: Point;\n    private color: Color;\n    private board: Board;\n\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\n        super(piece);\n        this.pointClicked = pointClicked;\n        this.color = color;\n        this.board = board;\n    }\n\n    getPossibleCaptures(): Point[] {\n        return this.piece\n            .getPossibleCaptures()\n            .filter(\n                (point) =>\n                    !MoveUtils.willMoveCauseCheck(\n                        this.color,\n                        this.pointClicked.row,\n                        this.pointClicked.col,\n                        point.row,\n                        point.col,\n                        this.board\n                    )\n            );\n    }\n\n    getPossibleMoves(): Point[] {\n        return this.piece\n            .getPossibleMoves()\n            .filter(\n                (point) =>\n                    !MoveUtils.willMoveCauseCheck(\n                        this.color,\n                        this.pointClicked.row,\n                        this.pointClicked.col,\n                        point.row,\n                        point.col,\n                        this.board\n                    )\n            );\n    }\n}\n","import { Board } from '../models/board';\nimport { Bishop } from '../models/pieces/bishop';\nimport { Color } from '../models/pieces/color';\nimport { Knight } from '../models/pieces/knight';\nimport { Piece } from '../models/pieces/piece';\nimport { Queen } from '../models/pieces/queen';\nimport { Rook } from '../models/pieces/rook';\nimport { UnicodeConstants } from '../utils/unicode-constants';\n\nexport class PiecePromotionResolver {\n\n    static resolvePromotionChoice(board: Board, piece: Piece, index: number) {\n        const isWhite = piece.color === Color.WHITE;\n        switch (index) {\n            case 1:\n                board.pieces.push(\n                    new Queen(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_QUEEN\n                            : UnicodeConstants.BLACK_QUEEN,\n                        board\n                    )\n                );\n                break;\n            case 2:\n                board.pieces.push(\n                    new Rook(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_ROOK\n                            : UnicodeConstants.BLACK_ROOK,\n                        board\n                    )\n                );\n                break;\n            case 3:\n                board.pieces.push(\n                    new Bishop(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_BISHOP\n                            : UnicodeConstants.BLACK_BISHOP,\n                        board\n                    )\n                );\n                break;\n            case 4:\n                board.pieces.push(\n                    new Knight(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_KNIGHT\n                            : UnicodeConstants.BLACK_KNIGHT,\n                        board\n                    )\n                );\n                break;\n        }\n    }\n\n}\n","export enum PieceTypeInput {\n\n    KING = 1,\n    QUEEN = 2,\n    BISHOP = 3,\n    KNIGHT = 4,\n    ROOK = 5,\n    PAWN = 6\n\n}\n\nexport enum ColorInput {\n\n    LIGHT = 1,\n    DARK = 2\n\n}\n","import { Board } from '../../models/board';\nimport { MoveTranslation } from '../../models/move-translation';\nimport { Bishop } from '../../models/pieces/bishop';\nimport { Color } from '../../models/pieces/color';\nimport { King } from '../../models/pieces/king';\nimport { Knight } from '../../models/pieces/knight';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\nimport { Queen } from '../../models/pieces/queen';\nimport { Rook } from '../../models/pieces/rook';\nimport {\n    ColorInput,\n    PieceTypeInput\n} from '../../utils/inputs/piece-type-input';\nimport { UnicodeConstants } from '../../utils/unicode-constants';\n\nexport class PieceFactory {\n\n    static create(\n        indexes: MoveTranslation,\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        board: Board\n    ): Piece {\n        let piece;\n        let color = colorInput === ColorInput.LIGHT\n            ? Color.WHITE\n            : Color.BLACK;\n\n        switch (pieceTypeInput) {\n            case PieceTypeInput.QUEEN:\n                piece = new Queen(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN,\n                    board\n                );\n                break;\n            case PieceTypeInput.KING:\n                piece = new King(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING,\n                    board\n                );\n\n                break;\n            case PieceTypeInput.KNIGHT:\n                piece = new Knight(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT,\n                    board\n                );\n                break;\n            case PieceTypeInput.BISHOP:\n                piece = new Bishop(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP,\n                    board\n                );\n                break;\n            case PieceTypeInput.ROOK:\n                piece = new Rook(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK,\n                    board\n                );\n                break;\n            case PieceTypeInput.PAWN:\n                piece = new Pawn(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN,\n                    board\n                );\n                break;\n        }\n\n        return piece;\n    }\n}\n","import { EventEmitter } from '@angular/core';\nimport { HistoryMove } from '../history-move-provider/history-move';\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\nimport { AbstractEngineFacade } from './abstract-engine-facade';\n\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\nimport { BoardState } from './board-state-provider/board-state/board-state';\nimport { BoardStateProvider } from './board-state-provider/board-state/board-state-provider';\nimport { MoveStateProvider } from './board-state-provider/board-state/move-state-provider';\nimport { ClickUtils } from './click/click-utils';\nimport { Arrow } from './drawing-tools/shapes/arrow';\nimport { Circle } from './drawing-tools/shapes/circle';\nimport { DrawPoint } from './drawing-tools/draw-point';\nimport { DrawProvider } from './drawing-tools/draw-provider';\nimport { Board } from '../models/board';\nimport { Color } from '../models/pieces/color';\nimport { King } from '../models/pieces/king';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\nimport { PiecePromotionResolver } from '../piece-promotion/piece-promotion-resolver';\nimport { MoveUtils } from '../utils/move-utils';\nimport { MoveChange } from './outputs/move-change/move-change';\nimport { PieceFactory } from './utils/piece-factory';\n\nexport class EngineFacade extends AbstractEngineFacade {\n\n    _selected = false;\n    drawPoint: DrawPoint;\n    drawProvider: DrawProvider;\n    boardStateProvider: BoardStateProvider;\n    moveStateProvider: MoveStateProvider;\n    moveChange: EventEmitter<MoveChange>;\n\n    private historyMoveCandidate: HistoryMove;\n\n    constructor(\n        board: Board,\n        moveChange: EventEmitter<MoveChange>\n    ) {\n        super(board);\n        this.moveChange = moveChange;\n        this.boardLoader = new BoardLoader(this);\n        this.boardLoader.addPieces();\n        this.boardStateProvider = new BoardStateProvider();\n    }\n\n    public reset(): void {\n        this.boardStateProvider.clear();\n        this.moveHistoryProvider.clear();\n        this.boardLoader.addPieces();\n        this.board.reset();\n        this.coords.reset();\n        this.drawProvider.clear();\n        this.pgnProcessor.reset();\n    }\n\n    public undo(): void {\n        if (!this.boardStateProvider.isEmpty()) {\n            const lastBoard = this.boardStateProvider.pop().board;\n            if (this.board.reverted) {\n                lastBoard.reverse();\n            }\n            this.board = lastBoard;\n            this.board.possibleCaptures = [];\n            this.board.possibleMoves = [];\n            this.board.activePiece = null;\n            this.moveHistoryProvider.pop();\n            this.board.calculateFEN();\n            this.pgnProcessor.removeLast();\n        }\n    }\n\n    saveMoveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.moveStateProvider.addMove(new BoardState(clone));\n    }\n\n    public move(coords: string) {\n        if (coords) {\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(0, 2),\n                this.board.reverted\n            );\n\n            const destIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(2, 4),\n                this.board.reverted\n            );\n\n            const srcPiece = this.board.getPieceByPoint(\n                sourceIndexes.yAxis,\n                sourceIndexes.xAxis\n            );\n\n            if (srcPiece) {\n                if (\n                    (this.board.currentWhitePlayer &&\n                        srcPiece.color === Color.BLACK) ||\n                    (!this.board.currentWhitePlayer &&\n                        srcPiece.color === Color.WHITE)\n                ) {\n                    return;\n                }\n\n                this.prepareActivePiece(srcPiece, srcPiece.point);\n\n                if (\n                    this.board.isPointInPossibleMoves(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\n                    ) ||\n                    this.board.isPointInPossibleCaptures(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\n                    )\n                ) {\n                    this.saveClone();\n                    this.movePiece(\n                        srcPiece,\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\n                        coords.length === 5 ? +coords.substring(4, 5) : 0\n                    );\n\n                    this.board.lastMoveSrc = new Point(\n                        sourceIndexes.yAxis,\n                        sourceIndexes.xAxis\n                    );\n                    this.board.lastMoveDest = new Point(\n                        destIndexes.yAxis,\n                        destIndexes.xAxis\n                    );\n\n                    this.disableSelection();\n                } else {\n                    this.disableSelection();\n                }\n            }\n        }\n\n    }\n\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\n        this.board.activePiece = pieceClicked;\n        this._selected = true;\n        this.board.possibleCaptures = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this.board\n        ).getPossibleCaptures();\n        this.board.possibleMoves = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this.board\n        ).getPossibleMoves();\n    }\n\n    onPieceClicked(pieceClicked, pointClicked) {\n        if (\n            (this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) ||\n            (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)\n        ) {\n            return;\n        }\n\n        this.prepareActivePiece(pieceClicked, pointClicked);\n    }\n\n    public handleClickEvent(pointClicked: Point, isMouseDown: boolean) {\n        let moving = false;\n        if (((\n            this.board.isPointInPossibleMoves(pointClicked) ||\n            this.board.isPointInPossibleCaptures(pointClicked)\n        ) || this.freeMode) && pointClicked.isInRange()) {\n            this.saveClone();\n            this.board.lastMoveSrc = new Point(\n                this.board.activePiece.point.row,\n                this.board.activePiece.point.col\n            );\n            this.board.lastMoveDest = pointClicked.clone();\n            this.movePiece(this.board.activePiece, pointClicked);\n\n            if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\n                moving = true;\n            }\n        }\n\n        if (isMouseDown || moving) {\n            this.disableSelection();\n        }\n        this.disableSelection();\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n        if (pieceClicked && !moving) {\n            this.onFreeMode(pieceClicked);\n            this.onPieceClicked(pieceClicked, pointClicked);\n        }\n    }\n\n    onMouseDown(\n        event: MouseEvent,\n        pointClicked: Point,\n        left?: number,\n        top?: number\n    ) {\n        this.moveDone = false;\n        if (event.button !== 0) {\n            this.drawPoint = ClickUtils.getDrawingPoint(\n                this.heightAndWidth,\n                this.colorStrategy,\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left,\n                top\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (\n            this.board.activePiece &&\n            pointClicked.isEqual(this.board.activePiece.point)\n        ) {\n            this.disabling = true;\n            return;\n        }\n\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n\n        if (this.freeMode) {\n            if (pieceClicked) {\n                if (event.ctrlKey) {\n                    this.board.pieces = this.board.pieces.filter(e => e !== pieceClicked);\n                    return;\n                }\n                this.board.currentWhitePlayer = (pieceClicked.color === Color.WHITE);\n            }\n        }\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, true);\n        } else {\n            if (pieceClicked) {\n                this.onFreeMode(pieceClicked);\n                this.onPieceClicked(pieceClicked, pointClicked);\n            }\n        }\n    }\n\n    onMouseUp(\n        event: MouseEvent,\n        pointClicked: Point,\n        left: number,\n        top: number\n    ) {\n        this.moveDone = false;\n        if (event.button !== 0 && !this.drawDisabled) {\n            this.addDrawPoint(\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left, top\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (this.dragDisabled) {\n            return;\n        }\n\n        if (\n            this.board.activePiece &&\n            pointClicked.isEqual(this.board.activePiece.point) &&\n            this.disabling\n        ) {\n            this.disableSelection();\n            this.disabling = false;\n            return;\n        }\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, false);\n            //   this.possibleMoves = activePiece.getPossibleMoves();\n        }\n    }\n\n    saveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.boardStateProvider.addMove(new BoardState(clone));\n    }\n\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\n        const destPiece = this.board.pieces.find(\n            (piece) =>\n                piece.point.col === newPoint.col &&\n                piece.point.row === newPoint.row\n        );\n\n        this.pgnProcessor.process(\n            this.board,\n            toMovePiece,\n            newPoint,\n            destPiece\n        );\n\n        if (destPiece && toMovePiece.color !== destPiece.color) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== destPiece\n            );\n        } else {\n            if (destPiece && toMovePiece.color === destPiece.color) {\n                return;\n            }\n        }\n\n        this.historyMoveCandidate = new HistoryMove(\n            MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted),\n            toMovePiece.constant.name,\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\n            !!destPiece\n        );\n        this.moveHistoryProvider.addMove(this.historyMoveCandidate);\n\n        if (toMovePiece instanceof King) {\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\n            if (squaresMoved > 1) {\n                if (newPoint.col < 3) {\n                    const leftRook = this.board.getPieceByField(\n                        toMovePiece.point.row,\n                        0\n                    );\n                    if (!this.freeMode) {\n                        leftRook.point.col = this.board.reverted ? 2 : 3;\n                    }\n                } else {\n                    const rightRook = this.board.getPieceByField(\n                        toMovePiece.point.row,\n                        7\n                    );\n                    if (!this.freeMode) {\n                        rightRook.point.col = this.board.reverted ? 4 : 5;\n                    }\n                }\n            }\n        }\n\n        if (toMovePiece instanceof Pawn) {\n            this.board.checkIfPawnTakesEnPassant(newPoint);\n            this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\n        } else {\n            this.board.enPassantPoint = null;\n            this.board.enPassantPiece = null;\n        }\n\n        toMovePiece.point = newPoint;\n        this.increaseFullMoveCount();\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\n\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\n            this.afterMoveActions();\n        }\n    }\n\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\n        if (!(toPromotePiece instanceof Pawn)) {\n            return;\n        }\n\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== toPromotePiece\n            );\n\n            // When we make move manually, we pass promotion index already, so we don't need\n            // to acquire it from promote dialog\n            if (!promotionIndex) {\n                this.openPromoteDialog(toPromotePiece);\n            } else {\n                PiecePromotionResolver.resolvePromotionChoice(\n                    this.board,\n                    toPromotePiece,\n                    promotionIndex\n                );\n                this.afterMoveActions(promotionIndex);\n            }\n\n            return true;\n        }\n    }\n\n    afterMoveActions(promotionIndex?: number) {\n        this.checkIfPawnFirstMove(this.board.activePiece);\n        this.checkIfRookMoved(this.board.activePiece);\n        this.checkIfKingMoved(this.board.activePiece);\n\n        this.board.blackKingChecked = this.board.isKingInCheck(\n            Color.BLACK,\n            this.board.pieces\n        );\n        this.board.whiteKingChecked = this.board.isKingInCheck(\n            Color.WHITE,\n            this.board.pieces\n        );\n        const check =\n            this.board.blackKingChecked || this.board.whiteKingChecked;\n        const checkmate =\n            this.checkForPossibleMoves(Color.BLACK) ||\n            this.checkForPossibleMoves(Color.WHITE);\n        const stalemate =\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\n\n        this.historyMoveCandidate.setGameStates(check, stalemate, checkmate);\n        this.pgnProcessor.processChecks(checkmate, check, stalemate);\n        this.pgnProcessor.addPromotionChoice(promotionIndex);\n\n        this.disabling = false;\n        this.board.calculateFEN();\n\n        const lastMove = this.moveHistoryProvider.getLastMove();\n        if (lastMove && promotionIndex) {\n            lastMove.move += promotionIndex;\n        }\n\n        this.moveChange.emit({\n            ...lastMove,\n            check,\n            checkmate,\n            stalemate,\n            fen: this.board.fen,\n            pgn: {\n                pgn: this.pgnProcessor.getPGN()\n            },\n            freeMode: this.freeMode\n        });\n\n        this.moveDone = true;\n    }\n\n    checkForPat(color: Color) {\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\n            return this.checkForPossibleMoves(color);\n        } else {\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\n                return this.checkForPossibleMoves(color);\n            }\n        }\n    }\n\n    openPromoteDialog(piece: Piece) {\n        if (piece.color === this.board.activePiece.color) {\n            this.modal.open((index) => {\n                PiecePromotionResolver.resolvePromotionChoice(\n                    this.board,\n                    piece,\n                    index\n                );\n                this.afterMoveActions(index);\n            });\n        }\n    }\n\n    checkForPossibleMoves(color: Color): boolean {\n        return !this.board.pieces\n            .filter((piece) => piece.color === color)\n            .some(\n                (piece) =>\n                    piece\n                        .getPossibleMoves()\n                        .some(\n                            (move) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    move.row,\n                                    move.col,\n                                    this.board\n                                )\n                        ) ||\n                    piece\n                        .getPossibleCaptures()\n                        .some(\n                            (capture) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    capture.row,\n                                    capture.col,\n                                    this.board\n                                )\n                        )\n            );\n    }\n\n    disableSelection() {\n        this._selected = false;\n        this.board.possibleCaptures = [];\n        this.board.activePiece = null;\n        this.board.possibleMoves = [];\n    }\n\n    /**\n     * Processes logic to allow freeMode based logic processing\n     */\n    onFreeMode(pieceClicked) {\n        if (\n            !this.freeMode ||\n            pieceClicked === undefined ||\n            pieceClicked === null\n        ) {\n            return;\n        }\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\n    }\n\n    isPieceDisabled(pieceClicked: Piece) {\n        if (pieceClicked && pieceClicked.point) {\n            const foundCapture = this.board.possibleCaptures.find(\n                (capture) =>\n                    capture.col === pieceClicked.point.col &&\n                    capture.row === pieceClicked.point.row\n            );\n\n            if (foundCapture) {\n                return false;\n            }\n        }\n        return (\n            pieceClicked &&\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\n        );\n    }\n\n    addDrawPoint(\n        x: number,\n        y: number,\n        crtl: boolean,\n        alt: boolean,\n        shift: boolean,\n        left: number,\n        top: number\n    ) {\n        const upPoint = ClickUtils.getDrawingPoint(\n            this.heightAndWidth,\n            this.colorStrategy,\n            x,\n            y,\n            crtl,\n            alt,\n            shift,\n            left,\n            top\n        );\n\n        if (this.drawPoint.isEqual(upPoint)) {\n            const circle = new Circle();\n            circle.drawPoint = upPoint;\n            if (!this.drawProvider.containsCircle(circle)) {\n                this.drawProvider.addCircle(circle);\n            } else {\n                this.drawProvider.reomveCircle(circle);\n            }\n        } else {\n            const arrow = new Arrow();\n            arrow.start = this.drawPoint;\n            arrow.end = upPoint;\n\n            if (!this.drawProvider.containsArrow(arrow)) {\n                this.drawProvider.addArrow(arrow);\n            } else {\n                this.drawProvider.removeArrow(arrow);\n            }\n        }\n    }\n\n    increaseFullMoveCount() {\n        if (!this.board.currentWhitePlayer) {\n            ++this.board.fullMoveCount;\n        }\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ) {\n        if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\n            let indexes = MoveUtils.translateCoordsToIndex(\n                coords,\n                this.board.reverted\n            );\n            let existing = this.board.getPieceByPoint(\n                indexes.yAxis,\n                indexes.xAxis\n            );\n            if (existing) {\n                this.board.pieces = this.board.pieces.filter(e => e !== existing);\n            }\n            let createdPiece = PieceFactory.create(\n                indexes,\n                pieceTypeInput,\n                colorInput,\n                this.board\n            );\n            this.saveClone();\n            this.board.pieces.push(createdPiece);\n            this.afterMoveActions();\n        }\n    }\n}\n","import { cloneDeep } from 'lodash';\nimport { Bishop } from './pieces/bishop';\nimport { Color } from './pieces/color';\nimport { King } from './pieces/king';\nimport { Knight } from './pieces/knight';\nimport { Pawn } from './pieces/pawn';\nimport { Piece } from './pieces/piece';\nimport { Point } from './pieces/point';\nimport { Queen } from './pieces/queen';\nimport { Rook } from './pieces/rook';\n\nexport class Board {\n    board: number[][] = [];\n    pieces: Piece[] = [];\n\n    enPassantPoint: Point = null;\n    enPassantPiece: Piece = null;\n    lastMoveSrc: Point = null;\n    lastMoveDest: Point = null;\n    activePiece: Piece;\n\n    blackKingChecked: boolean;\n    possibleCaptures: any[] = [];\n    possibleMoves: Point[] = [];\n    whiteKingChecked: boolean;\n\n    currentWhitePlayer = true;\n    reverted = false;\n    fullMoveCount = 1;\n    fen: string;\n\n    constructor() {\n        for (let i = 0; i < 8; ++i) {\n            this.board[i] = [];\n            for (let j = 0; j < 8; ++j) {\n                this.board[i][j] = 0;\n            }\n        }\n    }\n\n    isXYInPossibleMoves(row: number, col: number): boolean {\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\n    }\n\n    isXYInPossibleCaptures(row: number, col: number): boolean {\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\n    }\n\n    isXYInSourceMove(i: number, j: number) {\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\n    }\n\n    isXYInDestMove(i: number, j: number) {\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\n    }\n\n    isXYInActiveMove(i: number, j: number) {\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\n    }\n\n    isPointInPossibleMoves(point: Point): boolean {\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\n    }\n\n    isPointInPossibleCaptures(point: Point): boolean {\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\n    }\n\n    reset() {\n        this.lastMoveDest = null;\n        this.lastMoveSrc = null;\n        this.whiteKingChecked = false;\n        this.blackKingChecked = false;\n        this.possibleCaptures = [];\n        this.possibleMoves = [];\n        this.activePiece = null;\n        this.reverted = false;\n        this.currentWhitePlayer = true;\n        this.enPassantPoint = null;\n        this.enPassantPiece = null;\n        this.fullMoveCount = 1;\n        this.calculateFEN();\n    }\n\n        reverse() {\n        this.reverted = !this.reverted;\n        this.activePiece = null;\n        this.possibleMoves = [];\n        this.possibleCaptures = [];\n\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\n\n        this.reversePoint(this.lastMoveSrc);\n        this.reversePoint(this.lastMoveDest);\n\n        if (this.enPassantPoint && this.enPassantPiece) {\n            this.reversePoint(this.enPassantPoint);\n        }\n    }\n\n    clone(): Board {\n        return cloneDeep(this);\n    }\n\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return this.pieces.some(\n            (piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor\n        );\n    }\n\n    isFieldEmpty(row: number, col: number): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\n    }\n\n    isFieldUnderAttack(row: number, col: number, color: Color) {\n        return this.pieces\n            .filter((piece) => piece.color === color)\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\n    }\n\n    getPieceByField(row: number, col: number): Piece {\n        if (this.isFieldEmpty(row, col)) {\n            //   throw new Error('Piece not found');\n            return undefined;\n        }\n\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\n    }\n\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\n\n        if (king) {\n            return pieces.some(\n                (piece) =>\n                    piece\n                        .getPossibleCaptures()\n                        .some((point) => point.col === king.point.col && point.row === king.point.row) &&\n                    piece.color !== color\n            );\n        }\n        return false;\n    }\n\n    getKingByColor(color: Color): King {\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color) as King;\n    }\n\n    getCastleFENString(color: Color) {\n        const king = this.getKingByColor(color);\n\n        if (!king || king.isMovedAlready) {\n            return '';\n        }\n\n        let fen = '';\n        const leftRook = this.getPieceByField(king.point.row, 0);\n        const rightRook = this.getPieceByField(king.point.row, 7);\n\n        if (rightRook instanceof Rook && rightRook.color === color) {\n            if (!rightRook.isMovedAlready) {\n                fen += this.reverted ? 'q' : 'k';\n            }\n        }\n\n        if (leftRook instanceof Rook && leftRook.color === color) {\n            if (!leftRook.isMovedAlready) {\n                fen += this.reverted ? 'k' : 'q';\n            }\n        }\n\n        fen = fen.split('').sort().join('');\n        return color === Color.BLACK ? fen : fen.toUpperCase();\n    }\n\n    getEnPassantFENString() {\n        if (this.enPassantPoint) {\n            if (this.reverted) {\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\n            } else {\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\n            }\n        } else {\n            return '-';\n        }\n    }\n\n    calculateFEN() {\n        let fen = '';\n        for (let i = 0; i < 8; ++i) {\n            let emptyFields = 0;\n            for (let j = 0; j < 8; ++j) {\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\n                if (foundPiece) {\n                    if (emptyFields > 0) {\n                        fen += emptyFields;\n                        emptyFields = 0;\n                    }\n\n                    if (foundPiece instanceof Rook) {\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\n                    } else {\n                        if (foundPiece instanceof Knight) {\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\n                        } else {\n                            if (foundPiece instanceof Bishop) {\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\n                            } else {\n                                if (foundPiece instanceof Queen) {\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\n                                } else {\n                                    if (foundPiece instanceof King) {\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\n                                    } else {\n                                        if (foundPiece instanceof Pawn) {\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    ++emptyFields;\n                }\n            }\n\n            if (emptyFields > 0) {\n                fen += emptyFields;\n            }\n\n            fen += '/';\n        }\n\n        fen = fen.substr(0, fen.length - 1);\n\n        if (this.reverted) {\n            fen = fen.split('').reverse().join('');\n        }\n\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\n        if (!concatedEnPassant) {\n            concatedEnPassant = '-';\n        }\n\n        fen += ' ' + concatedEnPassant;\n        fen += ' ' + this.getEnPassantFENString();\n        fen += ' ' + 0;\n        fen += ' ' + this.fullMoveCount;\n        this.fen = fen;\n    }\n\n    isXYInPointSelection(i: number, j: number) {\n        return false;\n    }\n\n    private reversePoint(point: Point) {\n        if (point) {\n            point.row = Math.abs(point.row - 7);\n            point.col = Math.abs(point.col - 7);\n        }\n    }\n\n    public getPieceByPoint(row: number, col: number): Piece {\n        row = Math.floor(row);\n        col = Math.floor(col);\n        return this.pieces.find(\n            (piece) => piece.point.col === col && piece.point.row === row\n        );\n    }\n\n    public checkIfPawnTakesEnPassant(newPoint: Point) {\n        if (newPoint.isEqual(this.enPassantPoint)) {\n            this.pieces = this.pieces.filter(\n                (piece) => piece !== this.enPassantPiece\n            );\n            this.enPassantPoint = null;\n            this.enPassantPiece = null;\n        }\n    }\n\n    public checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\n            this.enPassantPiece = piece;\n            this.enPassantPoint = new Point(\n                (piece.point.row + newPoint.row) / 2,\n                piece.point.col\n            );\n        } else {\n            this.enPassantPoint = null;\n            this.enPassantPiece = null;\n        }\n    }\n\n    isKingChecked(piece: Piece) {\n        if (piece instanceof King) {\n            return piece.color === Color.WHITE\n                ? this.whiteKingChecked\n                : this.blackKingChecked;\n        }\n    }\n\n    getCurrentPlayerColor(): number {\n        return this.currentWhitePlayer ? Color.WHITE : Color.BLACK;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class NgxChessBoardService {\n    private componentMethodCallSource = new Subject<any>();\n\n    componentMethodCalled$ = this.componentMethodCallSource.asObservable();\n\n    reset() {\n        this.componentMethodCallSource.next();\n    }\n}\n","<div #myModal class=\"container\">\n    <div class=\"wrapper\">\n        <div class=\"content\">\n            <div class=\"piece-wrapper\" *ngIf=\"pieceIconInput\">\n                <div class=\"piece\" (click)=\"changeSelection(1)\">\n                    <img [src]=\"getPieceIcon('queen')\" alt=\"Queen\">\n                </div>\n                <div class=\"piece\" (click)=\"changeSelection(2)\">\n                    <img [src]=\"getPieceIcon('rook')\" alt=\"Rook\">\n                </div>\n                <div class=\"piece\" (click)=\"changeSelection(3)\">\n                    <img [src]=\"getPieceIcon('bishop')\" alt=\"Bishop\">\n                </div>\n                <div class=\"piece\" (click)=\"changeSelection(4)\">\n                    <img [src]=\"getPieceIcon('knight')\" alt=\"Knight\">\n                </div>\n            </div>\n            <div class=\"piece-wrapper\" *ngIf=\"!pieceIconInput\">\n                <div class=\"piece\" (click)=\"changeSelection(1)\">&#x265B;</div>\n                <div class=\"piece\" (click)=\"changeSelection(2)\">&#x265C;</div>\n                <div class=\"piece\" (click)=\"changeSelection(3)\">&#x265D;</div>\n                <div class=\"piece\" (click)=\"changeSelection(4)\">&#x265E;</div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { PieceIconInput } from '../../utils/inputs/piece-icon-input';\n\n@Component({\n    selector: 'app-piece-promotion-modal',\n    templateUrl: './piece-promotion-modal.component.html',\n    styleUrls: ['./piece-promotion-modal.component.scss'],\n})\nexport class PiecePromotionModalComponent {\n    @ViewChild('myModal', { static: false }) modal: ElementRef;\n\n    @Input()\n    pieceIconInput: PieceIconInput;\n\n    @Input()\n    color = 'white';\n\n    opened = false;\n    private onCloseCallback: (index: number) => void;\n\n    open(closeCallback: (index: number) => void) {\n        this.opened = true;\n        this.onCloseCallback = closeCallback;\n        this.modal.nativeElement.style.display = 'block';\n    }\n\n    changeSelection(index: number) {\n        this.modal.nativeElement.style.display = 'none';\n        this.opened = false;\n        this.onCloseCallback(index);\n    }\n\n    getPieceIcon(piece: string): string {\n        let coloredPiece = '';\n        switch (piece.toLowerCase()) {\n            case 'queen':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteQueenUrl\n                        : this.pieceIconInput.blackQueenUrl;\n                break;\n            case 'rook':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteRookUrl\n                        : this.pieceIconInput.blackRookUrl;\n                break;\n            case 'bishop':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteBishopUrl\n                        : this.pieceIconInput.blackBishopUrl;\n                break;\n            case 'knight':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteKnightUrl\n                        : this.pieceIconInput.blackKnightUrl;\n                break;\n            case 'coin':\n                coloredPiece =\n                    this.color === 'white'\n                        ? this.pieceIconInput.whiteCoinUrl\n                        : this.pieceIconInput.blackCoinUrl;\n                break;\n        }\n\n        return coloredPiece;\n    }\n}\n","<div\n    id=\"board\"\n    [style.height.px]=\"engineFacade.heightAndWidth\"\n    [style.width.px]=\"engineFacade.heightAndWidth\"\n    (pointerdown)=\"!modal.opened && onMouseDown($event)\"\n    (pointerup)=\"!modal.opened && onMouseUp($event)\"\n    #boardRef\n>\n    <div id=\"drag\">\n        <div\n            [cdkDragDisabled]=\"engineFacade.dragDisabled\"\n            (cdkDragEnded)=\"dragEnded($event)\"\n            (cdkDragMoved)=\"dragMoved($event)\"\n            (cdkDragStarted)=\"dragStart($event)\"\n            class=\"single-piece\" [innerHTML]=\"engineFacade.pieceIconManager.isDefaultIcons() ? piece.constant.icon : ''\"\n            [ngStyle]=\"engineFacade.pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(piece)\"\n            [style.transform]=\"'translate3d(' + piece.point.col * pieceSize + 'px, ' + piece.point.row * pieceSize + 'px,0px)'\"\n            [style.max-height]=\"pieceSize + 'px'\"\n            [style.font-size]=\"pieceSize * 0.8 + 'px'\"\n            [style.width]=\"pieceSize + 'px'\"\n            [style.height]=\"pieceSize + 'px'\"\n            cdkDrag\n            *ngFor=\"let piece of engineFacade.board.pieces; let i = index\"\n        >\n        </div>\n        <div\n            class=\"board-row\"\n            *ngFor=\"let row of engineFacade.board.board; let i = index\"\n        >\n            <div\n                class=\"board-col\"\n                [class.current-selection]=\"showActivePiece && engineFacade.board.isXYInActiveMove(i,j)\"\n                [class.king-check]=\" engineFacade.board.isKingChecked(engineFacade.board.getPieceByPoint(i,j))\"\n                [class.point-circle]=\"engineFacade.board.isXYInPointSelection(i, j)\"\n                [class.possible-capture]=\"showPossibleCaptures && engineFacade.board.isXYInPossibleCaptures(i, j)\"\n                [class.possible-point]=\"engineFacade.board.isXYInPossibleMoves(i, j) && showLegalMoves\"\n                [style.background-color]=\"getTileBackgroundColor(i, j)\"\n                *ngFor=\"let col of row; let j = index\"\n            >\n                <span\n                    class=\"yCoord\"\n                    [style.color]=\"(i % 2 === 0) ? lightTileColor : darkTileColor\"\n                    [style.font-size.px]=\"pieceSize / 4\"\n                    *ngIf=\"showCoords && j === 7\"\n                >\n                    {{engineFacade.coords.yCoords[i]}}\n                </span>\n                <span\n                    class=\"xCoord\"\n                    [style.color]=\"(j % 2 === 0) ? lightTileColor : darkTileColor\"\n                    [style.font-size.px]=\"pieceSize / 4\"\n                    *ngIf=\"showCoords && i === 7\"\n                >\n                    {{engineFacade.coords.xCoords[j]}}\n                </span>\n                <div\n                    *ngIf=\"engineFacade.board.getPieceByPoint(i, j) as piece\"\n                    style=\"height:100%; width:100%\"\n                >\n                    <div\n                        [ngClass]=\"'piece'\"\n                        [style.font-size]=\"pieceSize + 'px'\"\n\n                    >\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <svg\n        [attr.height]=\"engineFacade.heightAndWidth\"\n        [attr.width]=\"engineFacade.heightAndWidth\"\n        style=\"position:absolute; top:0; pointer-events: none\"\n    >\n        <defs *ngFor=\"let color of ['red', 'green', 'blue', 'orange']\">\n            <marker\n                [id]=\"color + 'Arrow'\"\n                markerHeight=\"13\"\n                markerWidth=\"13\"\n                orient=\"auto\"\n                refX=\"9\"\n                refY=\"6\"\n            >\n                <path\n                    [style.fill]=\"color\"\n                    d=\"M2,2 L2,11 L10,6 L2,2\"\n                ></path>\n            </marker>\n        </defs>\n        <line\n            class=\"arrow\"\n            [attr.marker-end]=\"'url(#' + arrow.end.color + 'Arrow)'\"\n            [attr.stroke]=\"arrow.end.color\"\n            [attr.x1]=\"arrow.start.x\"\n            [attr.x2]=\"arrow.end.x\"\n            [attr.y1]=\"arrow.start.y\"\n            [attr.y2]=\"arrow.end.y\"\n            *ngFor=\"let arrow of engineFacade.drawProvider.arrows$ | async\"\n        ></line>\n        <circle\n            [attr.cx]=\"circle.drawPoint.x\"\n            [attr.cy]=\"circle.drawPoint.y\"\n            [attr.r]=\"engineFacade.heightAndWidth / 18\"\n            [attr.stroke]=\"circle.drawPoint.color\"\n            *ngFor=\"let circle of engineFacade.drawProvider.circles$ | async\"\n            fill-opacity=\"0.0\"\n            stroke-width=\"2\"\n        ></circle>\n    </svg>\n    <app-piece-promotion-modal #modal\n                               [pieceIconInput]=\"engineFacade.pieceIconManager.pieceIconInput\"\n                               [color]=\"engineFacade.board.getCurrentPlayerColor() ? 'white' : 'black'\"></app-piece-promotion-modal>\n</div>\n","import { CdkDragEnd, CdkDragMove, CdkDragStart } from '@angular/cdk/drag-drop';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { AbstractEngineFacade } from './engine/abstract-engine-facade';\nimport { BoardLoader } from './engine/board-state-provider/board-loader/board-loader';\nimport {\n    NotationProcessorFactory, NotationType,\n} from './engine/board-state-provider/board-loader/notation-processors/notation-processor-factory';\nimport { ClickUtils } from './engine/click/click-utils';\nimport { EngineFacade } from './engine/engine-facade';\nimport { MoveChange } from './engine/outputs/move-change/move-change';\nimport { HistoryMove } from './history-move-provider/history-move';\nimport { Board } from './models/board';\nimport { Piece } from './models/pieces/piece';\nimport { NgxChessBoardView } from './ngx-chess-board-view';\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\nimport { Constants } from './utils/constants';\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\nimport { ColorInput, PieceTypeInput } from './utils/inputs/piece-type-input';\n\n\n@Component({\n    selector: 'ngx-chess-board',\n    templateUrl: './ngx-chess-board.component.html',\n    styleUrls: ['./ngx-chess-board.component.scss'],\n})\nexport class NgxChessBoardComponent\n    implements OnInit, OnChanges, NgxChessBoardView, AfterViewInit {\n\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\n    @Input() showCoords = true;\n    @Input() sourcePointColor: string = Constants.DEFAULT_SOURCE_POINT_COLOR;\n    @Input() destinationPointColor: string = Constants.DEFAULT_DESTINATION_POINT_COLOR;\n    @Input() legalMovesPointColor: string = Constants.DEFAULT_LEGAL_MOVE_POINT_COLOR;\n    @Input() showLastMove = true;\n    @Input() showLegalMoves = true;\n    @Input() showActivePiece = true;\n    @Input() showPossibleCaptures = true;\n    /**\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\n     */\n    @Output() moveChange = new EventEmitter<MoveChange>();\n    @Output() checkmate = new EventEmitter<void>();\n    @Output() stalemate = new EventEmitter<void>();\n\n    @ViewChild('boardRef')\n    boardRef: ElementRef;\n    @ViewChild('modal')\n    modal: PiecePromotionModalComponent;\n\n    pieceSize: number;\n    selected = false;\n    boardLoader: BoardLoader;\n    pieceIconManager: PieceIconInputManager;\n    isDragging = false;\n    startTransition = '';\n\n    engineFacade: AbstractEngineFacade;\n\n    constructor(private ngxChessBoardService: NgxChessBoardService) {\n        this.engineFacade = new EngineFacade(\n            new Board(),\n            this.moveChange\n        );\n    }\n\n    @Input('size')\n    public set size(size: number) {\n        if (\n            size &&\n            size >= Constants.MIN_BOARD_SIZE &&\n            size <= Constants.MAX_BOARD_SIZE\n        ) {\n            this.engineFacade.heightAndWidth = size;\n        } else {\n            this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\n        }\n        this.engineFacade.drawProvider.clear();\n        this.calculatePieceSize();\n    }\n\n    @Input('freeMode')\n    public set freeMode(freeMode: boolean) {\n        this.engineFacade.freeMode = freeMode;\n    }\n\n    @Input('dragDisabled')\n    public set dragDisabled(dragDisabled: boolean) {\n        this.engineFacade.dragDisabled = dragDisabled;\n    }\n\n    @Input('drawDisabled')\n    public set drawDisabled(drawDisabled: boolean) {\n        this.engineFacade.drawDisabled = drawDisabled;\n    }\n\n    @Input('pieceIcons')\n    public set pieceIcons(pieceIcons: PieceIconInput) {\n        this.engineFacade.pieceIconManager.pieceIconInput = pieceIcons;\n    }\n\n    @Input('lightDisabled')\n    public set lightDisabled(lightDisabled: boolean) {\n        this.engineFacade.lightDisabled = lightDisabled;\n    }\n\n    @Input('darkDisabled')\n    public set darkDisabled(darkDisabled: boolean) {\n        this.engineFacade.darkDisabled = darkDisabled;\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onRightClick(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (\n            (changes.lightDisabled &&\n                this.lightDisabled &&\n                this.engineFacade.board.currentWhitePlayer) ||\n            (changes.darkDisabled &&\n                this.darkDisabled &&\n                !this.engineFacade.board.currentWhitePlayer)\n        ) {\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n        }\n    }\n\n    ngOnInit() {\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\n            this.engineFacade.reset();\n        });\n\n    }\n\n    ngAfterViewInit(): void {\n        this.engineFacade.modal = this.modal;\n        this.calculatePieceSize();\n    }\n\n    onMouseUp(event: MouseEvent) {\n        this.engineFacade.onMouseUp(\n            event,\n            this.getClickPoint(event),\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().top\n        );\n    }\n\n    reverse(): void {\n        this.selected = false;\n        this.engineFacade.board.reverse();\n        this.engineFacade.coords.reverse();\n    }\n\n    updateBoard(board: Board) {\n        this.engineFacade.board = board;\n        this.boardLoader.setEngineFacade(this.engineFacade);\n        this.engineFacade.board.possibleCaptures = [];\n        this.engineFacade.board.possibleMoves = [];\n    }\n\n    setFEN(fen: string): void {\n        try {\n            this.engineFacade.boardLoader.setNotationProcessor(\n                NotationProcessorFactory.getProcessor(NotationType.FEN)\n            );\n            this.engineFacade.boardLoader.loadFEN(fen);\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n            this.engineFacade.coords.reset();\n        } catch (exception) {\n            this.engineFacade.boardLoader.addPieces();\n        }\n    }\n\n    setPGN(pgn: string): void {\n        try {\n            this.engineFacade.pgnProcessor.reset();\n            this.engineFacade.boardLoader.setNotationProcessor(\n                NotationProcessorFactory.getProcessor(NotationType.PGN)\n            );\n            this.engineFacade.boardLoader.loadPGN(pgn);\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n            this.engineFacade.coords.reset();\n        } catch (exception) {\n            console.log(exception);\n            this.engineFacade.boardLoader.addPieces();\n        }\n    }\n\n    getFEN(): string {\n        return this.engineFacade.board.fen;\n    }\n\n    dragEnded(event: CdkDragEnd): void {\n        this.isDragging = false;\n        this.engineFacade.dragEndStrategy.process(\n            event,\n            this.engineFacade.moveDone,\n            this.startTransition\n        );\n    }\n\n    dragStart(event: CdkDragStart): void {\n        this.isDragging = true;\n        let trans = event.source.getRootElement().style.transform.split(') ');\n        //   this.startTrans= trans;\n        this.startTransition = trans.length === 2 ? trans[1] : trans[0];\n        this.engineFacade.dragStartStrategy.process(event);\n    }\n\n    onMouseDown(event: MouseEvent) {\n        this.engineFacade.onMouseDown(event, this.getClickPoint(event),\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().top\n        );\n    }\n\n    getClickPoint(event) {\n        return ClickUtils.getClickPoint(\n            event,\n            this.boardRef.nativeElement.getBoundingClientRect().top,\n            this.boardRef.nativeElement.getBoundingClientRect().height,\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().width\n        );\n    }\n\n    private calculatePieceSize() {\n        this.pieceSize = this.engineFacade.heightAndWidth / 8;\n    }\n\n\n    getCustomPieceIcons(piece: Piece) {\n        return JSON.parse(\n            `{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(\n                piece\n            )}')\"}`\n        );\n    }\n\n    move(coords: string): void {\n        this.engineFacade.move(coords);\n    }\n\n    getMoveHistory(): HistoryMove[] {\n        return this.engineFacade.getMoveHistory();\n    }\n\n    reset(): void {\n        this.engineFacade.reset();\n    }\n\n    undo(): void {\n        this.engineFacade.undo();\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ) {\n        this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\n    }\n\n    getPGN() {\n        return this.engineFacade.pgnProcessor.getPGN();\n    }\n\n    dragMoved($event: CdkDragMove<any>) {\n        let x = ($event.pointerPosition.x - $event.source.getRootElement().parentElement.getBoundingClientRect().left) - (this.pieceSize / 2);\n        let y = ($event.pointerPosition.y - $event.source.getRootElement().parentElement.getBoundingClientRect().top) - (this.pieceSize / 2);\n        $event.source.getRootElement().style.transform = 'translate3d(' + x + 'px, '\n            + (y) + 'px,0px)';\n    }\n\n    getTileBackgroundColor(i, j): string {\n        let color = ((i + j) % 2 === 0) ? this.lightTileColor : this.darkTileColor;\n\n        if (this.showLastMove) {\n            if (this.engineFacade.board.isXYInSourceMove(i, j)) {\n                color = this.sourcePointColor;\n            }\n\n            if (this.engineFacade.board.isXYInDestMove(i, j)) {\n                color = this.destinationPointColor;\n            }\n        }\n\n        return color;\n    }\n}\n","import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NgxChessBoardComponent } from './ngx-chess-board.component';\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\n\n@NgModule({\n    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\n    imports: [CommonModule, DragDropModule],\n    exports: [NgxChessBoardComponent],\n})\nexport class NgxChessBoardModule {\n    static forRoot(): ModuleWithProviders<NgxChessBoardModule> {\n        return {\n            ngModule: NgxChessBoardModule,\n            providers: [NgxChessBoardService],\n        };\n    }\n}\n","/*\n * Public API Surface of ngx-chess-board\n */\n\nexport * from './lib/ngx-chess-board.module';\nexport * from './lib/history-move-provider/history-move';\nexport * from './lib/utils/inputs/piece-icon-input';\n\nexport * from './lib/ngx-chess-board.component';\nexport * from './lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\n\nexport * from './lib/ngx-chess-board-view';\nexport * from './lib/service/ngx-chess-board.service';\nexport * from './lib/service/ngx-chess-board.service';\nexport * from './lib/engine/outputs/move-change/move-change'\n\n/*\n * Public API Surface of im-grid\n */\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["DefaultPgnProcessor"],"mappings":"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"}