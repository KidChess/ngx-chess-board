import { BehaviorSubject } from 'rxjs';
export class BoardStateProvider {
    statesSubject$ = new BehaviorSubject([]);
    get states() {
        return this.statesSubject$.value;
    }
    set states(states) {
        this.statesSubject$.next(states);
    }
    addMove(state) {
        this.states = [...this.states, state];
    }
    getStates() {
        return this.states;
    }
    pop() {
        const lastState = this.getLastState();
        this.states = this.states.filter((state) => state !== lastState);
        return lastState;
    }
    isEmpty() {
        return this.states.length === 0;
    }
    clear() {
        this.states = [];
    }
    getLastState() {
        return this.states[this.getLastStateIndex()];
    }
    getLastStateIndex() {
        return this.states.length - 1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQtc3RhdGUtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtY2hlc3MtYm9hcmQvc3JjL2xpYi9lbmdpbmUvYm9hcmQtc3RhdGUtcHJvdmlkZXIvYm9hcmQtc3RhdGUvYm9hcmQtc3RhdGUtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd2QyxNQUFNLE9BQU8sa0JBQWtCO0lBQzNCLGNBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBZSxFQUFFLENBQUMsQ0FBQztJQUV2RCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFvQjtRQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQWlCO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELEdBQUc7UUFDQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxpQkFBaUI7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJvYXJkU3RhdGUgfSBmcm9tICcuL2JvYXJkLXN0YXRlJztcblxuZXhwb3J0IGNsYXNzIEJvYXJkU3RhdGVQcm92aWRlciB7XG4gICAgc3RhdGVzU3ViamVjdCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEJvYXJkU3RhdGVbXT4oW10pO1xuXG4gICAgZ2V0IHN0YXRlcygpOiBCb2FyZFN0YXRlW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZXNTdWJqZWN0JC52YWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgc3RhdGVzKHN0YXRlczogQm9hcmRTdGF0ZVtdKSB7XG4gICAgICAgIHRoaXMuc3RhdGVzU3ViamVjdCQubmV4dChzdGF0ZXMpO1xuICAgIH1cblxuICAgIGFkZE1vdmUoc3RhdGU6IEJvYXJkU3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBbLi4udGhpcy5zdGF0ZXMsIHN0YXRlXTtcbiAgICB9XG5cbiAgICBnZXRTdGF0ZXMoKTogQm9hcmRTdGF0ZVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVzO1xuICAgIH1cblxuICAgIHBvcCgpOiBCb2FyZFN0YXRlIHtcbiAgICAgICAgY29uc3QgbGFzdFN0YXRlID0gdGhpcy5nZXRMYXN0U3RhdGUoKTtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSB0aGlzLnN0YXRlcy5maWx0ZXIoKHN0YXRlKSA9PiBzdGF0ZSAhPT0gbGFzdFN0YXRlKTtcbiAgICAgICAgcmV0dXJuIGxhc3RTdGF0ZTtcbiAgICB9XG5cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZXMubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLnN0YXRlcyA9IFtdO1xuICAgIH1cblxuICAgIGdldExhc3RTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVzW3RoaXMuZ2V0TGFzdFN0YXRlSW5kZXgoKV07XG4gICAgfVxuXG4gICAgZ2V0TGFzdFN0YXRlSW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVzLmxlbmd0aCAtIDE7XG4gICAgfVxufVxuIl19