import { HistoryMoveProvider } from '../history-move-provider/history-move-provider';
import { King } from '../models/pieces/king';
import { Pawn } from '../models/pieces/pawn';
import { Rook } from '../models/pieces/rook';
import { Constants } from '../utils/constants';
import { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';
import { CoordsProvider } from './coords/coords-provider';
import { DragEndStrategy } from './drag/end/drag-end-strategy';
import { DragStartStrategy } from './drag/start/drag-start-strategy';
import { ColorStrategy } from './drawing-tools/colors/color-strategy';
import { DrawProvider } from './drawing-tools/draw-provider';
import { DefaultPgnProcessor } from './pgn/default-pgn-processor';
export class AbstractEngineFacade {
    dragStartStrategy = new DragStartStrategy();
    dragEndStrategy = new DragEndStrategy();
    pgnProcessor = new DefaultPgnProcessor();
    colorStrategy = new ColorStrategy();
    coords = new CoordsProvider();
    heightAndWidth = Constants.DEFAULT_SIZE;
    freeMode = false;
    dragDisabled;
    drawDisabled;
    lightDisabled;
    darkDisabled;
    board;
    modal;
    boardLoader;
    drawProvider = new DrawProvider();
    pieceIconManager = new PieceIconInputManager();
    moveHistoryProvider = new HistoryMoveProvider();
    moveDone;
    disabling = false;
    constructor(board) {
        this.board = board;
    }
    checkIfPawnFirstMove(piece) {
        if (piece instanceof Pawn) {
            piece.isMovedAlready = true;
        }
    }
    checkIfRookMoved(piece) {
        if (piece instanceof Rook) {
            piece.isMovedAlready = true;
        }
    }
    checkIfKingMoved(piece) {
        if (piece instanceof King) {
            piece.isMovedAlready = true;
        }
    }
    getMoveHistory() {
        return this.moveHistoryProvider.getAll();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZW5naW5lLWZhY2FkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvbGliL2VuZ2luZS9hYnN0cmFjdC1lbmdpbmUtZmFjYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBRXJGLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHN0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUdqRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDN0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHbEUsTUFBTSxPQUFnQixvQkFBb0I7SUFDL0IsaUJBQWlCLEdBQXNCLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUMvRCxlQUFlLEdBQW9CLElBQUksZUFBZSxFQUFFLENBQUM7SUFDekQsWUFBWSxHQUF5QixJQUFJLG1CQUFtQixFQUFFLENBQUM7SUFDNUQsYUFBYSxHQUFrQixJQUFJLGFBQWEsRUFBRSxDQUFDO0lBRXRELE1BQU0sR0FBbUIsSUFBSSxjQUFjLEVBQUUsQ0FBQztJQUM5QyxjQUFjLEdBQVcsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUVoRCxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLFlBQVksQ0FBVTtJQUN0QixZQUFZLENBQVU7SUFDdEIsYUFBYSxDQUFVO0lBQ3ZCLFlBQVksQ0FBVTtJQUN0QixLQUFLLENBQVE7SUFDYixLQUFLLENBQStCO0lBQ3BDLFdBQVcsQ0FBYztJQUN6QixZQUFZLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7SUFDaEQsZ0JBQWdCLEdBQ25CLElBQUkscUJBQXFCLEVBQUUsQ0FBQztJQUN6QixtQkFBbUIsR0FBd0IsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0lBQ3JFLFFBQVEsQ0FBVTtJQUNsQixTQUFTLEdBQUcsS0FBSyxDQUFDO0lBRXpCLFlBQXNCLEtBQVk7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQTRCTSxvQkFBb0IsQ0FBQyxLQUFZO1FBQ3BDLElBQUksS0FBSyxZQUFZLElBQUksRUFBRSxDQUFDO1lBQ3hCLEtBQUssQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLENBQUM7SUFDTCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsS0FBWTtRQUNoQyxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUUsQ0FBQztZQUN4QixLQUFLLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUNoQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEtBQVk7UUFDaEMsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFLENBQUM7WUFDeEIsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDaEMsQ0FBQztJQUNMLENBQUM7SUFFTSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzdDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpZWNlUHJvbW90aW9uTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi9waWVjZS1wcm9tb3Rpb24vcGllY2UtcHJvbW90aW9uLW1vZGFsL3BpZWNlLXByb21vdGlvbi1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGlzdG9yeU1vdmUgfSBmcm9tICcuLi9oaXN0b3J5LW1vdmUtcHJvdmlkZXIvaGlzdG9yeS1tb3ZlJztcbmltcG9ydCB7IEhpc3RvcnlNb3ZlUHJvdmlkZXIgfSBmcm9tICcuLi9oaXN0b3J5LW1vdmUtcHJvdmlkZXIvaGlzdG9yeS1tb3ZlLXByb3ZpZGVyJztcbmltcG9ydCB7IEJvYXJkIH0gZnJvbSAnLi4vbW9kZWxzL2JvYXJkJztcbmltcG9ydCB7IEtpbmcgfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL2tpbmcnO1xuaW1wb3J0IHsgUGF3biB9IGZyb20gJy4uL21vZGVscy9waWVjZXMvcGF3bic7XG5pbXBvcnQgeyBQaWVjZSB9IGZyb20gJy4uL21vZGVscy9waWVjZXMvcGllY2UnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL3BvaW50JztcbmltcG9ydCB7IFJvb2sgfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL3Jvb2snO1xuaW1wb3J0IHsgQ29pbiB9IGZyb20gJy4uL21vZGVscy9waWVjZXMvY29pbic7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgUGllY2VJY29uSW5wdXRNYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvaW5wdXRzL3BpZWNlLWljb24taW5wdXQtbWFuYWdlcic7XG5pbXBvcnQgeyBDb2xvcklucHV0LCBQaWVjZVR5cGVJbnB1dCB9IGZyb20gJy4uL3V0aWxzL2lucHV0cy9waWVjZS10eXBlLWlucHV0JztcbmltcG9ydCB7IEJvYXJkTG9hZGVyIH0gZnJvbSAnLi9ib2FyZC1zdGF0ZS1wcm92aWRlci9ib2FyZC1sb2FkZXIvYm9hcmQtbG9hZGVyJztcbmltcG9ydCB7IENvb3Jkc1Byb3ZpZGVyIH0gZnJvbSAnLi9jb29yZHMvY29vcmRzLXByb3ZpZGVyJztcbmltcG9ydCB7IERyYWdFbmRTdHJhdGVneSB9IGZyb20gJy4vZHJhZy9lbmQvZHJhZy1lbmQtc3RyYXRlZ3knO1xuaW1wb3J0IHsgRHJhZ1N0YXJ0U3RyYXRlZ3kgfSBmcm9tICcuL2RyYWcvc3RhcnQvZHJhZy1zdGFydC1zdHJhdGVneSc7XG5pbXBvcnQgeyBDb2xvclN0cmF0ZWd5IH0gZnJvbSAnLi9kcmF3aW5nLXRvb2xzL2NvbG9ycy9jb2xvci1zdHJhdGVneSc7XG5pbXBvcnQgeyBEcmF3UHJvdmlkZXIgfSBmcm9tICcuL2RyYXdpbmctdG9vbHMvZHJhdy1wcm92aWRlcic7XG5pbXBvcnQgeyBEZWZhdWx0UGduUHJvY2Vzc29yIH0gZnJvbSAnLi9wZ24vZGVmYXVsdC1wZ24tcHJvY2Vzc29yJztcbmltcG9ydCB7IEFic3RyYWN0UGduUHJvY2Vzc29yIH0gZnJvbSAnLi9wZ24vYWJzdHJhY3QtcGduLXByb2Nlc3Nvcic7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEVuZ2luZUZhY2FkZSB7XG4gICAgcHVibGljIGRyYWdTdGFydFN0cmF0ZWd5OiBEcmFnU3RhcnRTdHJhdGVneSA9IG5ldyBEcmFnU3RhcnRTdHJhdGVneSgpO1xuICAgIHB1YmxpYyBkcmFnRW5kU3RyYXRlZ3k6IERyYWdFbmRTdHJhdGVneSA9IG5ldyBEcmFnRW5kU3RyYXRlZ3koKTtcbiAgICBwdWJsaWMgcGduUHJvY2Vzc29yOiBBYnN0cmFjdFBnblByb2Nlc3NvciA9IG5ldyBEZWZhdWx0UGduUHJvY2Vzc29yKCk7XG4gICAgcHJvdGVjdGVkIGNvbG9yU3RyYXRlZ3k6IENvbG9yU3RyYXRlZ3kgPSBuZXcgQ29sb3JTdHJhdGVneSgpO1xuXG4gICAgcHVibGljIGNvb3JkczogQ29vcmRzUHJvdmlkZXIgPSBuZXcgQ29vcmRzUHJvdmlkZXIoKTtcbiAgICBwdWJsaWMgaGVpZ2h0QW5kV2lkdGg6IG51bWJlciA9IENvbnN0YW50cy5ERUZBVUxUX1NJWkU7XG5cbiAgICBwdWJsaWMgZnJlZU1vZGUgPSBmYWxzZTtcbiAgICBwdWJsaWMgZHJhZ0Rpc2FibGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBkcmF3RGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGxpZ2h0RGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGRhcmtEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgYm9hcmQ6IEJvYXJkO1xuICAgIHB1YmxpYyBtb2RhbDogUGllY2VQcm9tb3Rpb25Nb2RhbENvbXBvbmVudDtcbiAgICBwdWJsaWMgYm9hcmRMb2FkZXI6IEJvYXJkTG9hZGVyO1xuICAgIHB1YmxpYyBkcmF3UHJvdmlkZXI6IERyYXdQcm92aWRlciA9IG5ldyBEcmF3UHJvdmlkZXIoKTtcbiAgICBwdWJsaWMgcGllY2VJY29uTWFuYWdlcjogUGllY2VJY29uSW5wdXRNYW5hZ2VyID1cbiAgICAgICAgbmV3IFBpZWNlSWNvbklucHV0TWFuYWdlcigpO1xuICAgIHB1YmxpYyBtb3ZlSGlzdG9yeVByb3ZpZGVyOiBIaXN0b3J5TW92ZVByb3ZpZGVyID0gbmV3IEhpc3RvcnlNb3ZlUHJvdmlkZXIoKTtcbiAgICBwdWJsaWMgbW92ZURvbmU6IGJvb2xlYW47XG4gICAgcHVibGljIGRpc2FibGluZyA9IGZhbHNlO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGJvYXJkOiBCb2FyZCkge1xuICAgICAgICB0aGlzLmJvYXJkID0gYm9hcmQ7XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IHJlc2V0KCk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgdW5kbygpOiB2b2lkO1xuXG4gICAgcHVibGljIGFic3RyYWN0IG1vdmUoY29vcmRzOiBzdHJpbmcpOiB2b2lkO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGFkZFBpZWNlKFxuICAgICAgICBwaWVjZVR5cGVJbnB1dDogUGllY2VUeXBlSW5wdXQsXG4gICAgICAgIGNvbG9ySW5wdXQ6IENvbG9ySW5wdXQsXG4gICAgICAgIGNvb3Jkczogc3RyaW5nLFxuICAgICk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3Qgb25Nb3VzZVVwKFxuICAgICAgICBldmVudDogTW91c2VFdmVudCxcbiAgICAgICAgcG9pbnRDbGlja2VkOiBQb2ludCxcbiAgICAgICAgbGVmdDogbnVtYmVyLFxuICAgICAgICB0b3A6IG51bWJlcixcbiAgICApOiB2b2lkO1xuXG4gICAgcHVibGljIGFic3RyYWN0IG9uTW91c2VEb3duKFxuICAgICAgICBldmVudDogTW91c2VFdmVudCxcbiAgICAgICAgcG9pbnRDbGlja2VkOiBQb2ludCxcbiAgICAgICAgbGVmdD86IG51bWJlcixcbiAgICAgICAgdG9wPzogbnVtYmVyLFxuICAgICk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgY2hlY2tJZlBhd25GaXJzdE1vdmUocGllY2U6IFBpZWNlKSB7XG4gICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIFBhd24pIHtcbiAgICAgICAgICAgIHBpZWNlLmlzTW92ZWRBbHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjaGVja0lmUm9va01vdmVkKHBpZWNlOiBQaWVjZSkge1xuICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBSb29rKSB7XG4gICAgICAgICAgICBwaWVjZS5pc01vdmVkQWxyZWFkeSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY2hlY2tJZktpbmdNb3ZlZChwaWVjZTogUGllY2UpIHtcbiAgICAgICAgaWYgKHBpZWNlIGluc3RhbmNlb2YgS2luZykge1xuICAgICAgICAgICAgcGllY2UuaXNNb3ZlZEFscmVhZHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldE1vdmVIaXN0b3J5KCk6IEhpc3RvcnlNb3ZlW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlSGlzdG9yeVByb3ZpZGVyLmdldEFsbCgpO1xuICAgIH1cbn1cbiJdfQ==