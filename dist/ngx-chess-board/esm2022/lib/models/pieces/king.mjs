import { Color } from './color';
import { Piece } from './piece';
import { Point } from './point';
import { Rook } from './rook';
export class King extends Piece {
    castledAlready = false;
    shortCastled = false;
    longCastled = false;
    isMovedAlready;
    isCastling = false;
    constructor(point, color, constant, board) {
        super(point, color, constant, 0, board);
    }
    getPossibleMoves() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        // lewo
        if (this.board.isFieldEmpty(row, col - 1) &&
            !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row, col - 1));
        }
        // prawo
        if (this.board.isFieldEmpty(row, col + 1) &&
            !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row, col + 1));
        }
        // dol
        if (this.board.isFieldEmpty(row + 1, col) &&
            !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col));
        }
        // gora
        if (this.board.isFieldEmpty(row - 1, col) &&
            !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col));
        }
        // lewo gora
        if (this.board.isFieldEmpty(row - 1, col - 1) &&
            !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col - 1));
        }
        // prawo gora
        if (this.board.isFieldEmpty(row - 1, col + 1) &&
            !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col + 1));
        }
        // lewo dol
        if (this.board.isFieldEmpty(row + 1, col - 1) &&
            !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col - 1));
        }
        // prawo dol
        if (this.board.isFieldEmpty(row + 1, col + 1) &&
            !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col + 1));
        }
        if (!this.isMovedAlready) {
            let longCastlePossible = true;
            for (let i = col - 1; i > 0; --i) {
                if (!this.board.isFieldEmpty(row, i) ||
                    this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
                    longCastlePossible = false;
                    break;
                }
            }
            if (longCastlePossible && !this.board.isKingInCheck(this.color, this.board.pieces) && this.board.getPieceByField(row, 0)) {
                const leftRook = this.board.getPieceByField(row, 0);
                if (leftRook instanceof Rook) {
                    if (!leftRook.isMovedAlready) {
                        possiblePoints.push(new Point(row, col - 2));
                    }
                }
            }
            let shortCastlePossible = true;
            for (let i = col + 1; i < 7; ++i) {
                if (!this.board.isFieldEmpty(row, i) ||
                    this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
                    shortCastlePossible = false;
                    break;
                }
            }
            if (shortCastlePossible && !this.board.isKingInCheck(this.color, this.board.pieces) && this.board.getPieceByField(row, 7)) {
                const rightRook = this.board.getPieceByField(row, 7);
                if (rightRook instanceof Rook) {
                    if (!rightRook.isMovedAlready) {
                        possiblePoints.push(new Point(row, col + 2));
                    }
                }
            }
        }
        return possiblePoints;
    }
    getPossibleCaptures() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        // lewo
        if (this.board.isFieldTakenByEnemy(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row, col - 1));
        }
        // prawo
        if (this.board.isFieldTakenByEnemy(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row, col + 1));
        }
        // dol
        if (this.board.isFieldTakenByEnemy(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col));
        }
        // gora
        if (this.board.isFieldTakenByEnemy(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col));
        }
        // lewo gora
        if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col - 1));
        }
        // prawo gora
        if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col + 1));
        }
        // lewo dol
        if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col - 1));
        }
        // prawo dol
        if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col + 1));
        }
        return possiblePoints;
    }
    getCoveredFields() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        // lewo
        possiblePoints.push(new Point(row, col - 1));
        // prawo
        possiblePoints.push(new Point(row, col + 1));
        // dol
        possiblePoints.push(new Point(row + 1, col));
        // gora
        possiblePoints.push(new Point(row - 1, col));
        // lewo gora
        possiblePoints.push(new Point(row - 1, col - 1));
        // prawo gora
        possiblePoints.push(new Point(row - 1, col + 1));
        // lewo dol
        possiblePoints.push(new Point(row + 1, col - 1));
        // prawo dol
        possiblePoints.push(new Point(row + 1, col + 1));
        return possiblePoints;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvbGliL21vZGVscy9waWVjZXMva2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sT0FBTyxJQUFLLFNBQVEsS0FBSztJQUMzQixjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDckIsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUNwQixjQUFjLENBQUM7SUFDZixVQUFVLEdBQUcsS0FBSyxDQUFDO0lBRW5CLFlBQ0ksS0FBWSxFQUNaLEtBQVksRUFDWixRQUF1QixFQUN2QixLQUFZO1FBRVosS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBRTFCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzNCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzNCLE9BQU87UUFDUCxJQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxFQUNILEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFB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QUN6RDtZQUNELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxFQUNILEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNILENBQUM7WUFDQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBRUQsTUFBTTtRQUNOLElBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RDtZQUNELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNILENBQUM7WUFDQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBRUQsT0FBTztRQUNQLElBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FB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QztRQUU3QyxPQUFPO1FBQ1AsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFN0MsWUFBWTtRQUNaLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVqRCxhQUFhO1FBQ2IsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpELFdBQVc7UUFDWCxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFakQsWUFBWTtRQUNaLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUdqRCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaWVjZUNvbnN0YW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdW5pY29kZS1jb25zdGFudHMnO1xuaW1wb3J0IHsgQm9hcmQgfSBmcm9tICcuLi9ib2FyZCc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vY29sb3InO1xuaW1wb3J0IHsgUGllY2UgfSBmcm9tICcuL3BpZWNlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9wb2ludCc7XG5pbXBvcnQgeyBSb29rIH0gZnJvbSAnLi9yb29rJztcblxuZXhwb3J0IGNsYXNzIEtpbmcgZXh0ZW5kcyBQaWVjZSB7XG4gICAgY2FzdGxlZEFscmVhZHkgPSBmYWxzZTtcbiAgICBzaG9ydENhc3RsZWQgPSBmYWxzZTtcbiAgICBsb25nQ2FzdGxlZCA9IGZhbHNlO1xuICAgIGlzTW92ZWRBbHJlYWR5O1xuICAgIGlzQ2FzdGxpbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwb2ludDogUG9pbnQsXG4gICAgICAgIGNvbG9yOiBDb2xvcixcbiAgICAgICAgY29uc3RhbnQ6IFBpZWNlQ29uc3RhbnQsXG4gICAgICAgIGJvYXJkOiBCb2FyZFxuICAgICkge1xuICAgICAgICBzdXBlcihwb2ludCwgY29sb3IsIGNvbnN0YW50LCAwLCBib2FyZCk7XG4gICAgfVxuXG4gICAgZ2V0UG9zc2libGVNb3ZlcygpOiBQb2ludFtdIHtcbiAgICAgICAgY29uc3QgcG9zc2libGVQb2ludHMgPSBbXTtcblxuICAgICAgICBjb25zdCByb3cgPSB0aGlzLnBvaW50LnJvdztcbiAgICAgICAgY29uc3QgY29sID0gdGhpcy5wb2ludC5jb2w7XG4gICAgICAgIC8vIGxld29cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBjb2wgLSAxKSAmJlxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxuICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICBjb2wgLSAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdywgY29sIC0gMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJhd29cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBjb2wgKyAxKSAmJlxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxuICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICBjb2wgKyAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdywgY29sICsgMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG9sXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KHJvdyArIDEsIGNvbCkgJiZcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcbiAgICAgICAgICAgICAgICByb3cgKyAxLFxuICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgKyAxLCBjb2wpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdvcmFcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93IC0gMSwgY29sKSAmJlxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxuICAgICAgICAgICAgICAgIHJvdyAtIDEsXG4gICAgICAgICAgICAgICAgY29sLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyAtIDEsIGNvbCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGV3byBnb3JhXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KHJvdyAtIDEsIGNvbCAtIDEpICYmXG4gICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkVW5kZXJBdHRhY2soXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcbiAgICAgICAgICAgICAgICBjb2wgLSAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyAtIDEsIGNvbCAtIDEpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmF3byBnb3JhXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KHJvdyAtIDEsIGNvbCArIDEpICYmXG4gICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkVW5kZXJBdHRhY2soXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcbiAgICAgICAgICAgICAgICBjb2wgKyAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyAtIDEsIGNvbCArIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxld28gZG9sXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KHJvdyArIDEsIGNvbCAtIDEpICYmXG4gICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkVW5kZXJBdHRhY2soXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcbiAgICAgICAgICAgICAgICBjb2wgLSAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyArIDEsIGNvbCAtIDEpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmF3byBkb2xcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93ICsgMSwgY29sICsgMSkgJiZcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcbiAgICAgICAgICAgICAgICByb3cgKyAxLFxuICAgICAgICAgICAgICAgIGNvbCArIDEsXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93ICsgMSwgY29sICsgMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzTW92ZWRBbHJlYWR5KSB7XG4gICAgICAgICAgICBsZXQgbG9uZ0Nhc3RsZVBvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjb2wgLSAxOyBpID4gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBpKSB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBsb25nQ2FzdGxlUG9zc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobG9uZ0Nhc3RsZVBvc3NpYmxlICYmICF0aGlzLmJvYXJkLmlzS2luZ0luQ2hlY2soXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvcixcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLnBpZWNlc1xuICAgICAgICAgICAgKSAmJiB0aGlzLmJvYXJkLmdldFBpZWNlQnlGaWVsZChyb3csIDApKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdFJvb2sgPSB0aGlzLmJvYXJkLmdldFBpZWNlQnlGaWVsZChyb3csIDApO1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0Um9vayBpbnN0YW5jZW9mIFJvb2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsZWZ0Um9vay5pc01vdmVkQWxyZWFkeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93LCBjb2wgLSAyKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBzaG9ydENhc3RsZVBvc3NpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjb2wgKyAxOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBpKSB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzaG9ydENhc3RsZVBvc3NpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNob3J0Q2FzdGxlUG9zc2libGUgJiYgIXRoaXMuYm9hcmQuaXNLaW5nSW5DaGVjayhcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yLFxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQucGllY2VzXG4gICAgICAgICAgICApICYmIHRoaXMuYm9hcmQuZ2V0UGllY2VCeUZpZWxkKHJvdywgNykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodFJvb2sgPSB0aGlzLmJvYXJkLmdldFBpZWNlQnlGaWVsZChyb3csIDcpO1xuICAgICAgICAgICAgICAgIGlmIChyaWdodFJvb2sgaW5zdGFuY2VvZiBSb29rKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmlnaHRSb29rLmlzTW92ZWRBbHJlYWR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGNvbCArIDIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb3NzaWJsZVBvaW50cztcbiAgICB9XG5cbiAgICBnZXRQb3NzaWJsZUNhcHR1cmVzKCk6IFBvaW50W10ge1xuICAgICAgICBjb25zdCBwb3NzaWJsZVBvaW50cyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHJvdyA9IHRoaXMucG9pbnQucm93O1xuICAgICAgICBjb25zdCBjb2wgPSB0aGlzLnBvaW50LmNvbDtcblxuICAgICAgICAvLyBsZXdvXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZFRha2VuQnlFbmVteShcbiAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcbiAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGNvbCAtIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByYXdvXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZFRha2VuQnlFbmVteShcbiAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgY29sICsgMSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcbiAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgY29sICsgMSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGNvbCArIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRvbFxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcbiAgICAgICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXG4gICAgICAgICAgICApICYmXG4gICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkVW5kZXJBdHRhY2soXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcbiAgICAgICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93ICsgMSwgY29sKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnb3JhXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZFRha2VuQnlFbmVteShcbiAgICAgICAgICAgICAgICByb3cgLSAxLFxuICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcbiAgICAgICAgICAgICAgICByb3cgLSAxLFxuICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxld28gZ29yYVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcbiAgICAgICAgICAgICAgICBjb2wgLSAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxuICAgICAgICAgICAgICAgIHJvdyAtIDEsXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wgLSAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJhd28gZ29yYVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcbiAgICAgICAgICAgICAgICBjb2wgKyAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxuICAgICAgICAgICAgICAgIHJvdyAtIDEsXG4gICAgICAgICAgICAgICAgY29sICsgMSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wgKyAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZXdvIGRvbFxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcbiAgICAgICAgICAgICAgICBjb2wgLSAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxuICAgICAgICAgICAgICAgIHJvdyArIDEsXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgKyAxLCBjb2wgLSAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJhd28gZG9sXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZFRha2VuQnlFbmVteShcbiAgICAgICAgICAgICAgICByb3cgKyAxLFxuICAgICAgICAgICAgICAgIGNvbCArIDEsXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXG4gICAgICAgICAgICApICYmXG4gICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkVW5kZXJBdHRhY2soXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcbiAgICAgICAgICAgICAgICBjb2wgKyAxLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyArIDEsIGNvbCArIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb3NzaWJsZVBvaW50cztcbiAgICB9XG5cbiAgICBnZXRDb3ZlcmVkRmllbGRzKCk6IFBvaW50W10ge1xuICAgICAgICBjb25zdCBwb3NzaWJsZVBvaW50cyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHJvdyA9IHRoaXMucG9pbnQucm93O1xuICAgICAgICBjb25zdCBjb2wgPSB0aGlzLnBvaW50LmNvbDtcblxuICAgICAgICAvLyBsZXdvXG4gICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdywgY29sIC0gMSkpO1xuXG4gICAgICAgIC8vIHByYXdvXG4gICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdywgY29sICsgMSkpO1xuXG4gICAgICAgIC8vIGRvbFxuICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgKyAxLCBjb2wpKTtcblxuICAgICAgICAvLyBnb3JhXG4gICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyAtIDEsIGNvbCkpO1xuXG4gICAgICAgIC8vIGxld28gZ29yYVxuICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wgLSAxKSk7XG5cbiAgICAgICAgLy8gcHJhd28gZ29yYVxuICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wgKyAxKSk7XG5cbiAgICAgICAgLy8gbGV3byBkb2xcbiAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93ICsgMSwgY29sIC0gMSkpO1xuXG4gICAgICAgIC8vIHByYXdvIGRvbFxuICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgKyAxLCBjb2wgKyAxKSk7XG5cblxuICAgICAgICByZXR1cm4gcG9zc2libGVQb2ludHM7XG4gICAgfVxufVxuIl19